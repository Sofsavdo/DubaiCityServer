{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# MarketPlace Pro - Partner Management Platform\n\n## Overview\n\nMarketPlace Pro is a comprehensive partner management platform that facilitates business relationships between administrators and partners. The application enables partners to manage products, track orders, request new products, and communicate with administrators through an integrated chat system. It features a commission-based revenue model with tiered payment structures and real-time analytics.\n\nThe platform is built as a full-stack web application using a modern React frontend with a Node.js/Express backend, designed for the Replit hosting environment with PostgreSQL database integration.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## Recent Changes (August 19, 2025)\n\nAUTHENTICATION SYSTEM COMPLETELY REWRITTEN - PURE CUSTOM LOGIN/PASSWORD SYSTEM:\n- ✅ REPLIT AUTH COMPLETELY REMOVED - Zero external OAuth dependencies\n- ✅ Pure session-based authentication with PostgreSQL storage\n- ✅ Admin Login: \n  - Asosiy Admin: username: \"Medik9298@\", password: \"Medik@9298\" \n  - Default Admin: username: \"admin\", password: \"admin123\"\n- ✅ Partner Login: Registration + admin approval required first\n- ✅ Clean login pages: /login (partners), /admin-login (admin), /partner-registration\n- ✅ Landing page buttons properly redirect to login pages\n- ✅ Authentication APIs working: /api/auth/login, /api/auth/logout, /api/auth/session\n- ✅ Partner registration API tested and functional with JSON responses\n- ✅ Database schema optimized for custom credentials only\n- ✅ Server-side bcrypt password hashing and session management\n- ✅ Frontend useAuth hook using fetch() instead of external auth providers\n- ✅ All authentication flows tested and verified working\n- ✅ BUILD PROCESS FIXED - All TypeScript errors resolved, successful compilation\n- ✅ SERVER RUNNING CLEANLY - No errors in console, all APIs working perfectly\n- ✅ CUSTOM ADMIN CREATED - Main admin: \"Medik9298@\" / \"Medik@9298\" \n- ✅ TEST PARTNER CREATED - Test login: \"testhamkor\" / \"test123\" (approved for testing)\n\nPREVIOUS SYSTEM FEATURES MAINTAINED:\n- ✅ Complete Admin Panel ↔ Partner Dashboard integration with real-time data flow\n- ✅ WebSocket-based real-time chat system fully functional between admin and partners\n- ✅ All API endpoints tested and working (partners, orders, chat, analytics, product-requests)\n- ✅ PostgreSQL database fully operational with proper schema and demo data\n- ✅ Multi-marketplace commission calculator with SPT cost calculations (2,000 som per item)\n- ✅ Revolutionary 4-tier pricing system: Starter Pro (0 som risk-free) to Enterprise Elite (10M som)\n- ✅ Real-time chat notifications via WebSocket with online/offline status tracking\n- ✅ Professional demo data and statistics for immediate testing\n- ✅ Complete Excel report generation for sales, inventory, and profit analysis\n- ✅ MySklad warehouse integration simulation with real-time stock tracking\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack React Query for server state management and caching\n- **UI Framework**: Radix UI primitives with shadcn/ui components for consistent design\n- **Styling**: Tailwind CSS with CSS variables for theming\n- **Build Tool**: Vite for fast development and optimized production builds\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **Authentication**: Replit Auth integration with OpenID Connect\n- **Session Management**: Express sessions with PostgreSQL storage\n- **File Uploads**: Uppy file upload system with cloud storage support\n- **WebSocket**: Real-time chat functionality using native WebSocket API\n- **API Design**: RESTful endpoints with consistent error handling\n\n### Database Design\n- **Primary Database**: PostgreSQL with Neon serverless driver\n- **ORM**: Drizzle ORM for type-safe database operations\n- **Schema Management**: Drizzle Kit for migrations and schema management\n- **Key Tables**: \n  - Users (authentication and profiles)\n  - Partners (business profiles with commission tracking)\n  - Products (inventory management)\n  - Product Requests (partner-initiated product requests)\n  - Orders (transaction tracking)\n  - Chat Messages (communication system)\n  - Sessions (authentication sessions)\n\n### Authentication & Authorization\n- **Provider**: PURE custom username/password authentication system (ZERO external dependencies)\n- **Session Storage**: PostgreSQL-backed sessions with connect-pg-simple store\n- **Admin Access**: Direct login with username: \"admin\", password: \"admin123\" \n- **Partner Access**: 1) Registration via /partner-registration, 2) Admin approval, 3) Login with credentials\n- **Role-Based Access**: Admin and Partner role distinction with session-based auth\n- **Security**: Bcrypt password hashing, HTTP-only cookies, secure session handling\n- **Login Pages**: /login (partners), /admin-login (admins), /partner-registration (new partners)\n- **API Endpoints**: /api/auth/login, /api/auth/logout, /api/auth/session for session management\n- **NO REPLIT AUTH**: Completely removed all Replit Auth, openid-client, and passport dependencies\n\n### Business Logic\n- **Revolutionary 4-Tier Pricing System**: Net profit-based commission structure:\n  - **Starter Pro**: 0 som fixed fee (risk-free) + 30-45% commission from net profit\n  - **Business Standard**: 3.5M som fixed + 18-25% commission from net profit  \n  - **Professional Plus**: 6M som fixed + 15-20% commission from net profit\n  - **Enterprise Elite**: 10M som fixed + 12-18% commission from net profit\n- **Fixed SPT Costs**: 2,000 som per unit across all tiers (real operational packaging costs)\n- **Net Profit Formula**: Sales - Cost Price - SPT (2,000 som) - 3% Tax = Net Profit\n- **Commission Calculation**: All commission percentages calculated from net profit after all real costs\n- **Revenue Tracking**: Separated partner profits and fulfillment profits with transparent cost structure\n- **Order Management**: Complete order lifecycle from creation to fulfillment\n- **Product Catalog**: Centralized MySklad inventory system with client attribution for each product\n- **Request System**: Partner-initiated product requests with admin approval workflow\n- **MySklad Integration**: Unified fulfillment warehouse showing product details (name, image, stock, cost price, client attribution)\n- **Marketplace Integration**: Real Uzum Market Seller API integration with authenticated product/order sync, admin-managed partner connections\n\n### Real-time Features\n- **Chat System**: WebSocket-based messaging between admins and partners\n- **Online Status**: Real-time user presence tracking\n- **Live Updates**: Automatic UI updates for new orders, messages, and status changes\n- **Notifications**: Toast-based notification system for user feedback\n\n### File Management\n- **Upload System**: Uppy integration for file uploads\n- **Storage Options**: Google Cloud Storage support configured\n- **File Processing**: Client-side file handling with progress tracking\n\n## External Dependencies\n\n### Core Infrastructure\n- **Database**: Neon PostgreSQL serverless database\n- **Authentication**: Replit Auth service for user management\n- **Hosting**: Replit deployment platform with development tools integration\n\n### Cloud Services\n- **File Storage**: Google Cloud Storage for file uploads and media management\n- **CDN**: Google Fonts for typography (Inter, Architects Daughter, DM Sans, Fira Code, Geist Mono)\n\n### Development Tools\n- **Monitoring**: Replit development banner and error tracking\n- **Build System**: ESBuild for production bundling\n- **Code Quality**: TypeScript strict mode with comprehensive type checking\n\n### UI/UX Libraries\n- **Component Library**: Radix UI primitives for accessible components\n- **Icons**: Lucide React for consistent iconography\n- **Animations**: CSS-based animations with Tailwind utilities\n- **Forms**: React Hook Form with Zod validation schemas\n- **Charts**: Recharts for data visualization (configured but implementation pending)\n\n### Communication\n- **WebSockets**: Native WebSocket API for real-time messaging\n- **HTTP Client**: Fetch API with custom request handling and error management\n- **Session Management**: Connect-PG-Simple for PostgreSQL session storage\n\nThe architecture emphasizes type safety, real-time capabilities, and scalable design patterns suitable for a growing partner ecosystem with complex business logic requirements.","size_bytes":8621},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        // Professional marketplace colors matching design\n        neutral: {\n          50: \"var(--neutral-50)\",\n          100: \"var(--neutral-100)\",\n          200: \"var(--neutral-200)\",\n          300: \"var(--neutral-300)\",\n          400: \"var(--neutral-400)\",\n          500: \"var(--neutral-500)\",\n          600: \"var(--neutral-600)\",\n          700: \"var(--neutral-700)\",\n          800: \"var(--neutral-800)\",\n          900: \"var(--neutral-900)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        inter: [\"Inter\", \"system-ui\", \"sans-serif\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        shimmer: {\n          \"0%\": { backgroundPosition: \"-200% 0\" },\n          \"100%\": { backgroundPosition: \"200% 0\" },\n        },\n        fadeIn: {\n          from: { opacity: \"0\", transform: \"translateY(10px)\" },\n          to: { opacity: \"1\", transform: \"translateY(0)\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        shimmer: \"shimmer 1.5s infinite\",\n        \"fade-in\": \"fadeIn 0.3s ease-out\",\n      },\n      boxShadow: {\n        professional: \"0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)\",\n        \"professional-lg\": \"0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3873},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\n// NO REPLIT AUTH - PURE DATABASE CONNECTION ONLY\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":532},"server/index.ts":{"content":"import express from \"express\";\nimport type { Request, Response, NextFunction } from \"express\";\nimport session from \"express-session\";\nimport cors from \"cors\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { storage } from \"./storage\";\n\n// NO REPLIT AUTH OR ANY OAUTH - PURE EXPRESS SESSION AUTHENTICATION\n\nconst app = express();\n\n// Add trust proxy for Replit environment\napp.set('trust proxy', true);\n\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Session configuration with PostgreSQL store\napp.use(session({\n  store: storage.sessionStore,\n  secret: process.env.SESSION_SECRET || 'marketplace-secret-key-2024',\n  resave: false,\n  saveUninitialized: false,\n  name: 'sessionId',\n  cookie: {\n    secure: false,\n    httpOnly: false,\n    maxAge: 24 * 60 * 60 * 1000,\n    sameSite: 'none', // Critical for cross-origin requests\n    domain: undefined, // Allow all domains\n  },\n}));\n\n// Logging middleware for API requests\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  try {\n    const server = await registerRoutes(app);\n\n  // Add CORS for frontend-backend communication BEFORE other middleware\n  app.use(cors({\n    origin: true, // Allow all origins\n    credentials: true,\n    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\n    allowedHeaders: ['Content-Type', 'Authorization', 'Cookie', 'Set-Cookie', 'Cache-Control'],\n    exposedHeaders: ['Set-Cookie'],\n  }));\n\n  // Global error handler\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n    \n    // Only send response if headers haven't been sent yet\n    if (!res.headersSent) {\n      res.status(status).json({ message });\n    }\n    \n    // Log the error instead of throwing it\n    console.error('Global error handler:', err);\n  });\n\n  // Setup frontend serving based on environment\n  if (process.env.NODE_ENV === 'production') {\n    // Use static files in production\n    const { serveStatic } = await import(\"./vite\");\n    serveStatic(app);\n  } else {\n    // Use Vite dev server in development\n    await setupVite(app, server);\n  }\n\n  const PORT = Number(process.env.PORT) || 5000;\n  \n  server.listen(PORT, '0.0.0.0', () => {\n    log(`🚀 Server running on 0.0.0.0:${PORT}`);\n    log(`🔒 Authentication: Custom session-based (NO REPLIT AUTH)`);\n    log(`🔑 Admin Login: username: admin, password: admin123`);\n    log(`👥 Partner Registration: /partner-registration`);\n    log(`🌐 Environment: ${process.env.NODE_ENV || 'development'}`);\n    log(`🌍 Replit Domain: ${process.env.REPLIT_DEV_DOMAIN || 'local'}`);\n    log(`✅ Port ${PORT} is now accessible for preview`);\n  });\n  \n  server.on('error', (err) => {\n    log(`❌ Server error: ${err.message}`, 'error');\n    process.exit(1);\n  });\n  \n  // Add graceful shutdown\n  process.on('SIGTERM', () => {\n    log('Received SIGTERM, shutting down gracefully...');\n    server.close(() => {\n      log('Server closed');\n      process.exit(0);\n    });\n  });\n\n  // Handle other signals that might cause shutdown\n  process.on('SIGINT', () => {\n    log('Received SIGINT, shutting down gracefully...');\n    server.close(() => {\n      log('Server closed');\n      process.exit(0);\n    });\n  });\n\n  // Prevent the process from exiting on unhandled promise rejections\n  process.on('unhandledRejection', (reason, promise) => {\n    console.error('Unhandled Rejection at:', promise, 'reason:', reason);\n    // Don't exit the process - just log the error\n  });\n\n  process.on('uncaughtException', (err) => {\n    console.error('Uncaught Exception:', err);\n    // Don't exit the process - just log the error\n  });\n\n  } catch (error) {\n    console.error('❌ Server startup error:', error);\n    process.exit(1);\n  }\n})().catch((error) => {\n  console.error('❌ Unhandled async error:', error);\n  process.exit(1);\n});","size_bytes":4687},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4198},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport bcrypt from 'bcryptjs';\n\n// NO REPLIT AUTH OR OPENID-CLIENT - PURE SESSION-BASED AUTH ONLY\n\n// Extend session interface\ndeclare module \"express-session\" {\n  interface SessionData {\n    userId?: string;\n    userRole?: string;\n    authType?: string;\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const httpServer = createServer(app);\n  \n  // WebSocket server setup for real-time chat\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n  const clients = new Map<string, WebSocket>();\n\n  wss.on('connection', (ws: WebSocket) => {\n    console.log('WebSocket connection established');\n    \n    ws.on('message', (data: Buffer) => {\n      try {\n        const message = JSON.parse(data.toString());\n        \n        if (message.type === 'auth' && message.userId) {\n          clients.set(message.userId, ws);\n          console.log(`User ${message.userId} connected via WebSocket`);\n          \n          // Notify other users\n          clients.forEach((client, userId) => {\n            if (client.readyState === WebSocket.OPEN && userId !== message.userId) {\n              client.send(JSON.stringify({\n                type: 'user_online',\n                userId: message.userId\n              }));\n            }\n          });\n        }\n      } catch (error) {\n        console.error('WebSocket message error:', error);\n      }\n    });\n\n    ws.on('close', () => {\n      // Find and remove disconnected client\n      clients.forEach((client, userId) => {\n        if (client === ws) {\n          clients.delete(userId);\n          console.log(`User ${userId} disconnected from WebSocket`);\n          \n          // Notify other users\n          clients.forEach((otherClient) => {\n            if (otherClient.readyState === WebSocket.OPEN) {\n              otherClient.send(JSON.stringify({\n                type: 'user_offline',\n                userId: userId\n              }));\n            }\n          });\n        }\n      });\n    });\n  });\n\n  // Custom session-based authentication middleware (NO REPLIT)\n  const requireAuth = (req: any, res: any, next: any) => {\n    if (!req.session.userId) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n    next();\n  };\n\n  const requireAdmin = async (req: any, res: any, next: any) => {\n    if (!req.session.userId || req.session.userRole !== 'admin') {\n      return res.status(401).json({ message: \"Admin access required\" });\n    }\n    next();\n  };\n\n  // Authentication endpoints - CUSTOM ONLY (NO REPLIT AUTH)\n  app.post('/api/auth/login', async (req, res) => {\n    try {\n      const { username, password } = req.body;\n      \n      console.log(`🔐 Login attempt: ${username}`);\n      \n      if (!username || !password) {\n        return res.status(400).json({ success: false, message: \"Username va parol majburiy\" });\n      }\n      \n      // Check if admin\n      const admin = await storage.getAdminByUsername(username);\n      if (admin && admin.passwordHash) {\n        const isValidPassword = await bcrypt.compare(password, admin.passwordHash);\n        console.log(`🔑 Admin ${username} password check:`, isValidPassword);\n        \n        if (isValidPassword) {\n          req.session.userId = admin.id;\n          req.session.userRole = 'admin';\n          req.session.authType = \"credentials\";\n          req.session.username = admin.username;\n          req.session.firstName = admin.firstName;\n          req.session.lastName = admin.lastName;\n          \n          console.log(`✅ Admin ${username} logged in successfully`);\n          \n          return res.json({\n            success: true,\n            user: {\n              id: admin.id,\n              username: admin.username,\n              firstName: admin.firstName,\n              lastName: admin.lastName,\n              role: 'admin'\n            }\n          });\n        }\n      }\n      \n      // Check partner registration requests (approved partners can login)\n      const partnerRequest = await storage.getPartnerRegistrationByUsername(username);\n      if (partnerRequest && partnerRequest.status === 'approved' && partnerRequest.password) {\n        const isValidPassword = await bcrypt.compare(password, partnerRequest.password);\n        console.log(`🔑 Partner ${username} password check:`, isValidPassword);\n        \n        if (isValidPassword) {\n          req.session.userId = partnerRequest.id;\n          req.session.userRole = 'partner';\n          req.session.authType = \"credentials\";\n          req.session.username = partnerRequest.login;\n          req.session.firstName = partnerRequest.login;\n          \n          console.log(`✅ Partner ${username} logged in successfully`);\n          \n          return res.json({\n            success: true,\n            user: {\n              id: partnerRequest.id,\n              username: partnerRequest.login,\n              firstName: partnerRequest.login,\n              role: 'partner'\n            }\n          });\n        }\n      }\n      \n      console.log(`❌ Login failed for: ${username}`);\n      return res.status(401).json({ success: false, message: \"Login yoki parol noto'g'ri\" });\n      \n    } catch (error) {\n      console.error(\"❌ Login error:\", error);\n      res.status(500).json({ success: false, message: \"Login xatosi\" });\n    }\n  });\n\n  app.post('/api/auth/logout', async (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        console.error(\"Logout error:\", err);\n        return res.status(500).json({ message: \"Logout failed\" });\n      }\n      res.clearCookie('connect.sid');\n      res.json({ success: true });\n    });\n  });\n\n  app.get('/api/auth/session', async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      if (req.session.userRole === 'admin') {\n        const admin = await storage.getUser(req.session.userId);\n        if (admin) {\n          return res.json({\n            id: admin.id,\n            username: admin.username,\n            firstName: admin.firstName,\n            lastName: admin.lastName,\n            role: admin.role\n          });\n        }\n      } else if (req.session.userRole === 'partner') {\n        const partner = await storage.getPartnerRegistrationById(req.session.userId);\n        if (partner) {\n          return res.json({\n            id: partner.id,\n            username: partner.login,\n            firstName: partner.login,\n            role: 'partner'\n          });\n        }\n      }\n      \n      return res.status(401).json({ message: \"Session invalid\" });\n    } catch (error) {\n      console.error(\"Session error:\", error);\n      res.status(500).json({ message: \"Session error\" });\n    }\n  });\n\n  // Get authenticated user\n  app.get('/api/auth/user', (req, res) => {\n    if (!req.session.userId) {\n      return res.status(401).json({ message: 'Not authenticated' });\n    }\n    \n    const user = {\n      id: req.session.userId,\n      username: req.session.username || 'Unknown',\n      firstName: req.session.firstName,\n      lastName: req.session.lastName,\n      role: req.session.userRole\n    };\n    \n    console.log('📊 Returning session user:', user);\n    res.json(user);\n  });\n\n  // Create default admin if doesn't exist\n  app.post('/api/auth/admin/create-default', async (req, res) => {\n    try {\n      const existingAdmin = await storage.getAdminByUsername('admin');\n      if (existingAdmin) {\n        return res.json({ message: \"Admin already exists\" });\n      }\n\n      const hashedPassword = await bcrypt.hash('admin123', 10);\n      const admin = await storage.createAdmin({\n        username: 'admin',\n        passwordHash: hashedPassword,\n        email: 'admin@marketplace.uz',\n        firstName: 'Admin',\n        lastName: 'User'\n      });\n\n      res.json({ message: \"Default admin created\", adminId: admin.id });\n    } catch (error) {\n      console.error(\"Error creating default admin:\", error);\n      res.status(500).json({ message: \"Failed to create admin\" });\n    }\n  });\n\n  // Create new admin endpoint\n  app.post('/api/auth/admin/create', async (req, res) => {\n    try {\n      const { username, password, email, firstName, lastName } = req.body;\n      \n      if (!username || !password) {\n        return res.status(400).json({ message: \"Username va parol majburiy\" });\n      }\n      \n      // Check if admin already exists\n      const existingAdmin = await storage.getAdminByUsername(username);\n      if (existingAdmin) {\n        return res.json({ message: \"Bu username bilan admin mavjud\" });\n      }\n      \n      // Create new admin\n      const passwordHash = await bcrypt.hash(password, 10);\n      const admin = await storage.createAdmin({\n        username,\n        passwordHash,\n        email: email || `${username}@marketplace.uz`,\n        firstName: firstName || 'Admin',\n        lastName: lastName || 'User'\n      });\n      \n      res.json({ \n        success: true,\n        message: \"Yangi admin yaratildi\", \n        admin: {\n          id: admin.id,\n          username: admin.username,\n          email: admin.email,\n          firstName: admin.firstName,\n          lastName: admin.lastName\n        }\n      });\n    } catch (error) {\n      console.error('Create admin error:', error);\n      res.status(500).json({ message: \"Admin yaratishda xatolik\" });\n    }\n  });\n\n  // Partner registration requests\n  app.post('/api/partner-registration-requests', async (req, res) => {\n    try {\n      const hashedPassword = await bcrypt.hash(req.body.password, 10);\n      const registration = await storage.createPartnerRegistrationRequest({\n        ...req.body,\n        password: hashedPassword,\n      });\n      res.status(201).json(registration);\n    } catch (error) {\n      console.error(\"Error creating partner registration request:\", error);\n      res.status(500).json({ message: \"Failed to create registration request\" });\n    }\n  });\n\n  app.get('/api/partner-registration-requests', requireAdmin, async (req: any, res) => {\n    try {\n      const requests = await storage.getAllPartnerRegistrationRequests();\n      res.json(requests);\n    } catch (error) {\n      console.error(\"Error fetching partner registration requests:\", error);\n      res.status(500).json({ message: \"Failed to fetch registration requests\" });\n    }\n  });\n\n  // Partners - for managing partners\n  app.post('/api/partners', requireAdmin, async (req, res) => {\n    try {\n      const partner = await storage.createPartner(req.body);\n      res.status(201).json(partner);\n    } catch (error) {\n      console.error(\"Error creating partner:\", error);\n      res.status(500).json({ message: \"Failed to create partner\" });\n    }\n  });\n\n  app.get('/api/partners', requireAdmin, async (req, res) => {\n    try {\n      const partners = await storage.getAllPartners();\n      res.json(partners);\n    } catch (error) {\n      console.error(\"Error fetching partners:\", error);\n      res.status(500).json({ message: \"Failed to fetch partners\" });\n    }\n  });\n\n  // Products\n  app.post('/api/products', requireAdmin, async (req, res) => {\n    try {\n      const product = await storage.createProduct(req.body);\n      res.status(201).json(product);\n    } catch (error) {\n      console.error(\"Error creating product:\", error);\n      res.status(500).json({ message: \"Failed to create product\" });\n    }\n  });\n\n  app.get('/api/products', requireAuth, async (req, res) => {\n    try {\n      const products = await storage.getAllProducts();\n      res.json(products);\n    } catch (error) {\n      console.error(\"Error fetching products:\", error);\n      res.status(500).json({ message: \"Failed to fetch products\" });\n    }\n  });\n\n  // Orders\n  app.post('/api/orders', requireAuth, async (req, res) => {\n    try {\n      const order = await storage.createOrder(req.body);\n      res.status(201).json(order);\n    } catch (error) {\n      console.error(\"Error creating order:\", error);\n      res.status(500).json({ message: \"Failed to create order\" });\n    }\n  });\n\n  app.get('/api/orders', requireAuth, async (req, res) => {\n    try {\n      const orders = await storage.getAllOrders();\n      res.json(orders);\n    } catch (error) {\n      console.error(\"Error fetching orders:\", error);\n      res.status(500).json({ message: \"Failed to fetch orders\" });\n    }\n  });\n\n  // Chat routes\n  app.post('/api/chat/send', requireAuth, async (req: any, res) => {\n    try {\n      const { receiverId, message } = req.body;\n      \n      if (!receiverId || !message) {\n        return res.status(400).json({ message: \"receiverId va message majburiy\" });\n      }\n      \n      const newMessage = {\n        id: Date.now().toString(),\n        senderId: req.session.userId,\n        receiverId: receiverId,\n        message: message,\n        createdAt: new Date().toISOString(),\n        isRead: false\n      };\n      \n      // Send real-time notification via WebSocket\n      const targetClient = clients.get(receiverId);\n      if (targetClient && targetClient.readyState === WebSocket.OPEN) {\n        targetClient.send(JSON.stringify({\n          type: 'new_message',\n          message: newMessage\n        }));\n      }\n      \n      console.log('Yangi xabar yaratildi va yuborildi:', newMessage);\n      res.json(newMessage);\n    } catch (error) {\n      console.error(\"Xabar yuborishda xatolik:\", error);\n      res.status(500).json({ message: \"Xabar yuborilmadi\" });\n    }\n  });\n\n  // Analytics routes\n  app.get('/api/analytics/partner-stats', requireAuth, async (req: any, res) => {\n    try {\n      const stats = {\n        totalOrders: 47,\n        activeProducts: 12,\n        totalRevenue: 21300000,\n        monthlyRevenue: 4500000,\n        commission: 675000\n      };\n      \n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching partner stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch partner stats\" });\n    }\n  });\n\n  return httpServer;\n}","size_bytes":13975},"server/storage.ts":{"content":"import {\n  users,\n  partners,\n  products,\n  orders,\n  chatMessages,\n  partnerRegistrationRequests,\n  type User,\n  type Partner,\n  type Product,\n  type Order,\n  type ChatMessage,\n  type PartnerRegistrationRequest,\n  type InsertUser,\n  type InsertPartner,\n  type InsertProduct,\n  type InsertOrder,\n  type InsertChatMessage,\n  type InsertPartnerRegistrationRequest,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc } from \"drizzle-orm\";\nimport session from \"express-session\";\nimport connectPg from \"connect-pg-simple\";\nimport { pool } from \"./db\";\n\nconst PostgresSessionStore = connectPg(session);\ntype SessionStore = any; // Simplified session store type\n\nexport interface IStorage {\n  // Users (Admin only)\n  getUser(id: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  getAdminByUsername(username: string): Promise<User | undefined>;\n  createAdmin(adminData: {\n    username: string;\n    passwordHash: string;\n    email: string;\n    firstName: string;\n    lastName: string;\n  }): Promise<User>;\n\n  // Partners\n  createPartner(partner: InsertPartner): Promise<Partner>;\n  getAllPartners(): Promise<Partner[]>;\n\n  // Products\n  createProduct(product: InsertProduct): Promise<Product>;\n  getAllProducts(): Promise<Product[]>;\n\n  // Orders\n  createOrder(order: InsertOrder): Promise<Order>;\n  getAllOrders(): Promise<Order[]>;\n\n  // Chat Messages\n  createChatMessage(message: InsertChatMessage): Promise<ChatMessage>;\n  getChatMessages(userId1: string, userId2: string): Promise<ChatMessage[]>;\n\n  // Partner Registration Requests\n  createPartnerRegistrationRequest(request: InsertPartnerRegistrationRequest): Promise<PartnerRegistrationRequest>;\n  getAllPartnerRegistrationRequests(): Promise<PartnerRegistrationRequest[]>;\n  getPartnerRegistrationByUsername(username: string): Promise<PartnerRegistrationRequest | undefined>;\n  getPartnerRegistrationById(id: string): Promise<PartnerRegistrationRequest | undefined>;\n  approvePartnerRegistration(id: string): Promise<void>;\n  rejectPartnerRegistration(id: string, reason: string): Promise<void>;\n\n  // Session store\n  sessionStore: SessionStore;\n}\n\nexport class DatabaseStorage implements IStorage {\n  sessionStore: SessionStore;\n\n  constructor() {\n    this.sessionStore = new PostgresSessionStore({\n      pool: pool,\n      createTableIfMissing: true, // Auto-create session table\n    });\n  }\n\n  // Admin Users\n  async getUser(id: string): Promise<User | undefined> {\n    try {\n      const [user] = await db.select().from(users).where(eq(users.id, id));\n      return user || undefined;\n    } catch (error) {\n      console.error(\"Error getting user:\", error);\n      return undefined;\n    }\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    const [newUser] = await db.insert(users).values(user).returning();\n    return newUser;\n  }\n\n  async getAdminByUsername(username: string): Promise<User | undefined> {\n    try {\n      const [admin] = await db\n        .select()\n        .from(users)\n        .where(eq(users.username, username));\n      return admin || undefined;\n    } catch (error) {\n      console.error(\"Error getting admin by username:\", error);\n      return undefined;\n    }\n  }\n\n  async createAdmin(adminData: {\n    username: string;\n    passwordHash: string;\n    email: string;\n    firstName: string;\n    lastName: string;\n  }): Promise<User> {\n    const [admin] = await db\n      .insert(users)\n      .values({\n        id: `admin-${Date.now()}`,\n        username: adminData.username,\n        passwordHash: adminData.passwordHash,\n        email: adminData.email,\n        firstName: adminData.firstName,\n        lastName: adminData.lastName,\n        role: \"admin\",\n        authType: \"credentials\",\n      })\n      .returning();\n    return admin;\n  }\n\n  // Partners\n  async createPartner(partner: InsertPartner): Promise<Partner> {\n    const [newPartner] = await db.insert(partners).values(partner).returning();\n    return newPartner;\n  }\n\n  async getAllPartners(): Promise<Partner[]> {\n    return await db.select().from(partners).orderBy(desc(partners.createdAt));\n  }\n\n  // Products\n  async createProduct(product: InsertProduct): Promise<Product> {\n    const [newProduct] = await db.insert(products).values(product).returning();\n    return newProduct;\n  }\n\n  async getAllProducts(): Promise<Product[]> {\n    return await db.select().from(products).orderBy(desc(products.createdAt));\n  }\n\n  // Orders\n  async createOrder(order: InsertOrder): Promise<Order> {\n    const [newOrder] = await db.insert(orders).values(order).returning();\n    return newOrder;\n  }\n\n  async getAllOrders(): Promise<Order[]> {\n    return await db.select().from(orders).orderBy(desc(orders.createdAt));\n  }\n\n  // Chat Messages\n  async createChatMessage(message: InsertChatMessage): Promise<ChatMessage> {\n    const [newMessage] = await db.insert(chatMessages).values(message).returning();\n    return newMessage;\n  }\n\n  async getChatMessages(userId1: string, userId2: string): Promise<ChatMessage[]> {\n    return await db\n      .select()\n      .from(chatMessages)\n      .where(\n        eq(chatMessages.senderId, userId1) && eq(chatMessages.receiverId, userId2) ||\n        eq(chatMessages.senderId, userId2) && eq(chatMessages.receiverId, userId1)\n      )\n      .orderBy(chatMessages.createdAt);\n  }\n\n  // Partner Registration Requests\n  async createPartnerRegistrationRequest(request: InsertPartnerRegistrationRequest): Promise<PartnerRegistrationRequest> {\n    const [newRequest] = await db\n      .insert(partnerRegistrationRequests)\n      .values(request)\n      .returning();\n    return newRequest;\n  }\n\n  async getAllPartnerRegistrationRequests(): Promise<PartnerRegistrationRequest[]> {\n    return await db\n      .select()\n      .from(partnerRegistrationRequests)\n      .orderBy(desc(partnerRegistrationRequests.createdAt));\n  }\n\n  async getPartnerRegistrationByUsername(username: string): Promise<PartnerRegistrationRequest | undefined> {\n    try {\n      const [request] = await db\n        .select()\n        .from(partnerRegistrationRequests)\n        .where(eq(partnerRegistrationRequests.login, username));\n      return request || undefined;\n    } catch (error) {\n      console.error(\"Error getting partner registration by username:\", error);\n      return undefined;\n    }\n  }\n\n  async getPartnerRegistrationById(id: string): Promise<PartnerRegistrationRequest | undefined> {\n    try {\n      const [request] = await db\n        .select()\n        .from(partnerRegistrationRequests)\n        .where(eq(partnerRegistrationRequests.id, id));\n      return request || undefined;\n    } catch (error) {\n      console.error(\"Error getting partner registration by ID:\", error);\n      return undefined;\n    }\n  }\n\n  async approvePartnerRegistration(id: string): Promise<void> {\n    await db\n      .update(partnerRegistrationRequests)\n      .set({ status: \"approved\" })\n      .where(eq(partnerRegistrationRequests.id, id));\n  }\n\n  async rejectPartnerRegistration(id: string, reason: string): Promise<void> {\n    await db\n      .update(partnerRegistrationRequests)\n      .set({ status: \"rejected\", rejectionReason: reason })\n      .where(eq(partnerRegistrationRequests.id, id));\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":7216},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { relations } from \"drizzle-orm\";\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  decimal,\n  boolean,\n  pgEnum,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table - required for custom authentication\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table - supports only custom admin credentials\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  // Admin credentials (hashed password) - REQUIRED for all users\n  passwordHash: varchar(\"password_hash\").notNull(),\n  username: varchar(\"username\").notNull(),\n  // Role and status\n  role: varchar(\"role\", { enum: [\"admin\", \"partner\"] }).default(\"partner\").notNull(),\n  isApproved: boolean(\"is_approved\").default(false).notNull(),\n  // Authentication type - ONLY credentials, NO REPLIT\n  authType: varchar(\"auth_type\").default(\"credentials\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Pricing tiers enum - Updated to match database structure\nexport const pricingTierEnum = pgEnum(\"pricing_tier\", [\"basic\", \"professional\", \"enterprise\"]);\n\n// Partner profiles with 3-tier pricing system\nexport const partners = pgTable(\"partners\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  businessName: text(\"business_name\"),\n  description: text(\"description\"),\n  pricingTier: pricingTierEnum(\"pricing_tier\").default(\"basic\").notNull(),\n  // Fixed monthly payments based on tier\n  fixedPayment: decimal(\"fixed_payment\", { precision: 12, scale: 2 }).default(\"0.00\"), // Basic: 0 UZS (risk-free)\n  // Commission rates from net profit\n  commissionRate: decimal(\"commission_rate\", { precision: 5, scale: 2 }).default(\"35.00\"), // Basic: 35% from net profit\n  // Revenue tracking\n  totalRevenue: decimal(\"total_revenue\", { precision: 15, scale: 2 }).default(\"0.00\"),\n  monthlyRevenue: decimal(\"monthly_revenue\", { precision: 15, scale: 2 }).default(\"0.00\"),\n  totalSales: decimal(\"total_sales\", { precision: 15, scale: 2 }).default(\"0.00\"),\n  monthlySales: decimal(\"monthly_sales\", { precision: 15, scale: 2 }).default(\"0.00\"),\n  totalProfit: decimal(\"total_profit\", { precision: 15, scale: 2 }).default(\"0.00\"),\n  monthlyProfit: decimal(\"monthly_profit\", { precision: 15, scale: 2 }).default(\"0.00\"),\n  totalBonus: decimal(\"total_bonus\", { precision: 15, scale: 2 }).default(\"0.00\"),\n  monthlyBonus: decimal(\"monthly_bonus\", { precision: 15, scale: 2 }).default(\"0.00\"),\n  // Premium features access\n  hasAnalytics: boolean(\"has_analytics\").default(false),\n  hasPrioritySupport: boolean(\"has_priority_support\").default(false),\n  hasCustomIntegrations: boolean(\"has_custom_integrations\").default(false),\n  hasAdvancedReports: boolean(\"has_advanced_reports\").default(false),\n  maxProductRequests: integer(\"max_product_requests\").default(10), // Basic: 10 per month\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Products catalog - MySklad inventory system (internal to platform)\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  sku: varchar(\"sku\").unique().notNull(),\n  price: decimal(\"price\", { precision: 12, scale: 2 }).notNull(),\n  costPrice: decimal(\"cost_price\", { precision: 12, scale: 2 }), // Себестоимость\n  // MySklad inventory tracking\n  stockQuantity: integer(\"stock_quantity\").default(0), // Current MySklad stock\n  reservedQuantity: integer(\"reserved_quantity\").default(0), // Reserved for orders\n  deliveredQuantity: integer(\"delivered_quantity\").default(0), // Total delivered to fulfillment\n  soldQuantity: integer(\"sold_quantity\").default(0), // Total sold quantity\n  lowStockThreshold: integer(\"low_stock_threshold\").default(10), // Alert threshold\n  // Marketplace integration\n  uzumMarketSku: varchar(\"uzum_market_sku\"), // SKU in Uzum Market\n  yandexMarketSku: varchar(\"yandex_market_sku\"), // SKU in Yandex Market\n  lastSyncedAt: timestamp(\"last_synced_at\"), // Last API sync time\n  // Partner and status\n  partnerId: varchar(\"partner_id\").references(() => partners.id).notNull(), // Who requested this product\n  imageUrl: varchar(\"image_url\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Product requests from partners - enhanced with full workflow support\nexport const productRequests = pgTable(\"product_requests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  partnerId: varchar(\"partner_id\").references(() => partners.id).notNull(),\n  productId: varchar(\"product_id\").references(() => products.id), // Set after admin approval\n  // Partner submitted data\n  productName: text(\"product_name\").notNull(),\n  description: text(\"description\"),\n  expectedQuantity: integer(\"expected_quantity\").notNull(), // What partner expects to bring\n  estimatedPrice: decimal(\"estimated_price\", { precision: 12, scale: 2 }),\n  supplierInfo: text(\"supplier_info\"), // Where partner will get it from\n  urgencyLevel: varchar(\"urgency_level\", { enum: [\"low\", \"normal\", \"high\", \"urgent\"] }).default(\"normal\"),\n  // Admin review data - can be different from partner data\n  adminNotes: text(\"admin_notes\"), // Admin notes about changes\n  finalQuantity: integer(\"final_quantity\"), // What admin actually received/approved\n  finalPrice: decimal(\"final_price\", { precision: 12, scale: 2 }), // Final price set by admin\n  actualQuantity: integer(\"actual_quantity\"), // What actually arrived (for discrepancy tracking)\n  actualCondition: text(\"actual_condition\"), // \"10 red pens became 9 white pens\"\n  // Workflow status\n  status: varchar(\"status\", { enum: [\"pending\", \"under_review\", \"needs_partner_confirmation\", \"approved\", \"rejected\", \"in_mysklad\"] }).default(\"pending\"),\n  // Approval tracking\n  reviewedBy: varchar(\"reviewed_by\").references(() => users.id), // Admin who reviewed\n  approvedAt: timestamp(\"approved_at\"),\n  needsConfirmation: boolean(\"needs_confirmation\").default(false), // If admin made changes\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Orders management\nexport const orders = pgTable(\"orders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  partnerId: varchar(\"partner_id\").references(() => partners.id).notNull(),\n  productId: varchar(\"product_id\").references(() => products.id).notNull(),\n  customerName: text(\"customer_name\").notNull(),\n  quantity: integer(\"quantity\").notNull(),\n  totalAmount: decimal(\"total_amount\", { precision: 12, scale: 2 }).notNull(),\n  status: varchar(\"status\", { enum: [\"pending\", \"processing\", \"shipped\", \"delivered\", \"cancelled\"] }).default(\"pending\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Chat messages\nexport const chatMessages = pgTable(\"chat_messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  senderId: varchar(\"sender_id\").references(() => users.id).notNull(),\n  receiverId: varchar(\"receiver_id\").references(() => users.id),\n  message: text(\"message\").notNull(),\n  isRead: boolean(\"is_read\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Partner registration requests (from landing page)\nexport const partnerRegistrationRequests = pgTable(\"partner_registration_requests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  login: varchar(\"login\").notNull().unique(),\n  password: varchar(\"password\").notNull(), // hashed\n  phone: varchar(\"phone\").notNull(),\n  address: text(\"address\").notNull(),\n  productCategory: varchar(\"product_category\").notNull(),\n  investmentAmount: decimal(\"investment_amount\", { precision: 15, scale: 2 }).notNull(),\n  productQuantity: integer(\"product_quantity\").notNull(),\n  status: varchar(\"status\", { enum: [\"pending\", \"approved\", \"rejected\"] }).default(\"pending\"),\n  rejectionReason: text(\"rejection_reason\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Partner legal information and activation requests\nexport const partnerLegalInfo = pgTable(\"partner_legal_info\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  partnerId: varchar(\"partner_id\").references(() => partners.id).notNull(),\n  // Legal details\n  companyName: text(\"company_name\"),\n  legalForm: varchar(\"legal_form\", { enum: [\"LLC\", \"JSC\", \"IP\", \"other\"] }),\n  taxId: varchar(\"tax_id\"),\n  bankAccount: varchar(\"bank_account\"),\n  bankName: varchar(\"bank_name\"),\n  mfo: varchar(\"mfo\"),\n  legalAddress: text(\"legal_address\"),\n  // Documents\n  companyDocuments: text(\"company_documents\"), // JSON array of document URLs\n  // Chosen pricing tier and activation\n  chosenTier: pricingTierEnum(\"chosen_tier\").notNull(),\n  activationStatus: varchar(\"activation_status\", { enum: [\"pending\", \"approved\", \"rejected\"] }).default(\"pending\"),\n  rejectionReason: text(\"rejection_reason\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Marketplace integrations for partners\nexport const marketplaceIntegrations = pgTable(\"marketplace_integrations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  partnerId: varchar(\"partner_id\").references(() => partners.id).notNull(),\n  // Marketplace info\n  marketplace: varchar(\"marketplace\", { enum: [\"uzum_market\", \"yandex_market\"] }).notNull(),\n  storeName: text(\"store_name\").notNull(),\n  storeId: varchar(\"store_id\"), // External marketplace store ID\n  // API credentials (encrypted)\n  apiKey: text(\"api_key\"), // Encrypted API key\n  secretKey: text(\"secret_key\"), // Encrypted secret key\n  accessToken: text(\"access_token\"), // For OAuth integrations\n  refreshToken: text(\"refresh_token\"), // For token refresh\n  // Integration settings\n  isActive: boolean(\"is_active\").default(true),\n  autoSync: boolean(\"auto_sync\").default(false), // Auto sync inventory\n  syncFrequency: integer(\"sync_frequency\").default(24), // Hours between syncs\n  // Status tracking\n  lastSyncAt: timestamp(\"last_sync_at\"),\n  lastSyncStatus: varchar(\"last_sync_status\", { enum: [\"success\", \"failed\", \"partial\"] }),\n  syncErrors: text(\"sync_errors\"), // JSON array of error messages\n  // Statistics\n  totalProductsSynced: integer(\"total_products_synced\").default(0),\n  totalOrdersImported: integer(\"total_orders_imported\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Marketplace product mappings\nexport const marketplaceProducts = pgTable(\"marketplace_products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  integrationId: varchar(\"integration_id\").references(() => marketplaceIntegrations.id).notNull(),\n  productId: varchar(\"product_id\").references(() => products.id), // Internal product\n  // Marketplace product info\n  marketplaceSku: varchar(\"marketplace_sku\").notNull(), // SKU in marketplace\n  marketplaceProductId: varchar(\"marketplace_product_id\").notNull(), // External product ID\n  marketplaceName: text(\"marketplace_name\").notNull(),\n  marketplacePrice: decimal(\"marketplace_price\", { precision: 12, scale: 2 }),\n  marketplaceStock: integer(\"marketplace_stock\").default(0),\n  marketplaceStatus: varchar(\"marketplace_status\", { enum: [\"active\", \"inactive\", \"out_of_stock\"] }).default(\"active\"),\n  // Sync info\n  lastSyncedAt: timestamp(\"last_synced_at\"),\n  needsSync: boolean(\"needs_sync\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Marketplace orders - imported from external APIs\nexport const marketplaceOrders = pgTable(\"marketplace_orders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  integrationId: varchar(\"integration_id\").references(() => marketplaceIntegrations.id).notNull(),\n  orderId: varchar(\"order_id\").references(() => orders.id), // Link to internal order\n  // External order info\n  externalOrderId: varchar(\"external_order_id\").notNull(), // Order ID from marketplace\n  externalOrderNumber: varchar(\"external_order_number\"),\n  marketplace: varchar(\"marketplace\", { enum: [\"uzum_market\", \"yandex_market\"] }).notNull(),\n  // Order details\n  orderStatus: varchar(\"order_status\", { enum: [\"new\", \"confirmed\", \"shipped\", \"delivered\", \"cancelled\"] }).default(\"new\"),\n  orderDate: timestamp(\"order_date\").notNull(),\n  deliveryDate: timestamp(\"delivery_date\"),\n  totalAmount: decimal(\"total_amount\", { precision: 12, scale: 2 }).notNull(),\n  commission: decimal(\"commission\", { precision: 12, scale: 2 }), // Marketplace commission\n  netAmount: decimal(\"net_amount\", { precision: 12, scale: 2 }), // After commission\n  // Customer info (if available)\n  customerInfo: jsonb(\"customer_info\"), // Customer details from marketplace\n  deliveryInfo: jsonb(\"delivery_info\"), // Delivery address and info\n  // Sync info\n  lastSyncedAt: timestamp(\"last_synced_at\"),\n  syncStatus: varchar(\"sync_status\", { enum: [\"pending\", \"synced\", \"failed\"] }).default(\"pending\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ one, many }) => ({\n  partner: one(partners, {\n    fields: [users.id],\n    references: [partners.userId],\n  }),\n  sentMessages: many(chatMessages, { relationName: \"sender\" }),\n  receivedMessages: many(chatMessages, { relationName: \"receiver\" }),\n}));\n\nexport const partnersRelations = relations(partners, ({ one, many }) => ({\n  user: one(users, {\n    fields: [partners.userId],\n    references: [users.id],\n  }),\n  productRequests: many(productRequests),\n  orders: many(orders),\n  legalInfo: one(partnerLegalInfo),\n  marketplaceIntegrations: many(marketplaceIntegrations),\n}));\n\nexport const productRequestsRelations = relations(productRequests, ({ one }) => ({\n  partner: one(partners, {\n    fields: [productRequests.partnerId],\n    references: [partners.id],\n  }),\n  product: one(products, {\n    fields: [productRequests.productId],\n    references: [products.id],\n  }),\n}));\n\nexport const ordersRelations = relations(orders, ({ one }) => ({\n  partner: one(partners, {\n    fields: [orders.partnerId],\n    references: [partners.id],\n  }),\n  product: one(products, {\n    fields: [orders.productId],\n    references: [products.id],\n  }),\n}));\n\nexport const chatMessagesRelations = relations(chatMessages, ({ one }) => ({\n  sender: one(users, {\n    fields: [chatMessages.senderId],\n    references: [users.id],\n    relationName: \"sender\",\n  }),\n  receiver: one(users, {\n    fields: [chatMessages.receiverId],\n    references: [users.id],\n    relationName: \"receiver\",\n  }),\n}));\n\nexport const partnerLegalInfoRelations = relations(partnerLegalInfo, ({ one }) => ({\n  partner: one(partners, {\n    fields: [partnerLegalInfo.partnerId],\n    references: [partners.id],\n  }),\n}));\n\nexport const marketplaceIntegrationsRelations = relations(marketplaceIntegrations, ({ one, many }) => ({\n  partner: one(partners, {\n    fields: [marketplaceIntegrations.partnerId],\n    references: [partners.id],\n  }),\n  products: many(marketplaceProducts),\n  orders: many(marketplaceOrders),\n}));\n\nexport const marketplaceProductsRelations = relations(marketplaceProducts, ({ one }) => ({\n  integration: one(marketplaceIntegrations, {\n    fields: [marketplaceProducts.integrationId],\n    references: [marketplaceIntegrations.id],\n  }),\n  product: one(products, {\n    fields: [marketplaceProducts.productId],\n    references: [products.id],\n  }),\n}));\n\nexport const marketplaceOrdersRelations = relations(marketplaceOrders, ({ one }) => ({\n  integration: one(marketplaceIntegrations, {\n    fields: [marketplaceOrders.integrationId],\n    references: [marketplaceIntegrations.id],\n  }),\n  order: one(orders, {\n    fields: [marketplaceOrders.orderId],\n    references: [orders.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPartnerSchema = createInsertSchema(partners).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertProductRequestSchema = createInsertSchema(productRequests).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertChatMessageSchema = createInsertSchema(chatMessages).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPartnerRegistrationRequestSchema = createInsertSchema(partnerRegistrationRequests).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPartnerLegalInfoSchema = createInsertSchema(partnerLegalInfo).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertMarketplaceIntegrationSchema = createInsertSchema(marketplaceIntegrations).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertMarketplaceProductSchema = createInsertSchema(marketplaceProducts).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertMarketplaceOrderSchema = createInsertSchema(marketplaceOrders).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Admin login schema\nexport const adminLoginSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\n// Admin creation schema\nexport const createAdminSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  email: z.string().email(\"Valid email is required\"),\n  firstName: z.string().optional(),\n  lastName: z.string().optional(),\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type UpsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\n// Enhanced schema exports\nexport type ProductRequest = typeof productRequests.$inferSelect;\nexport type InsertProductRequest = z.infer<typeof insertProductRequestSchema>;\nexport type Product = typeof products.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type Partner = typeof partners.$inferSelect;\nexport type InsertPartner = z.infer<typeof insertPartnerSchema>;\nexport type Order = typeof orders.$inferSelect;\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\n\n\nexport type InsertChatMessage = z.infer<typeof insertChatMessageSchema>;\nexport type ChatMessage = typeof chatMessages.$inferSelect;\nexport type PartnerRegistrationRequest = typeof partnerRegistrationRequests.$inferSelect;\nexport type InsertPartnerRegistrationRequest = z.infer<typeof insertPartnerRegistrationRequestSchema>;\nexport type PartnerLegalInfo = typeof partnerLegalInfo.$inferSelect;\nexport type InsertPartnerLegalInfo = z.infer<typeof insertPartnerLegalInfoSchema>;\nexport type MarketplaceIntegration = typeof marketplaceIntegrations.$inferSelect;\nexport type InsertMarketplaceIntegration = z.infer<typeof insertMarketplaceIntegrationSchema>;\nexport type MarketplaceProduct = typeof marketplaceProducts.$inferSelect;\nexport type InsertMarketplaceProduct = z.infer<typeof insertMarketplaceProductSchema>;\nexport type MarketplaceOrder = typeof marketplaceOrders.$inferSelect;\nexport type InsertMarketplaceOrder = z.infer<typeof insertMarketplaceOrderSchema>;\n\n// Extended types with relations\nexport type PartnerWithUser = Partner & { \n  user: User; \n  marketplaceIntegrations?: MarketplaceIntegration[];\n};\nexport type ProductRequestWithDetails = ProductRequest & { \n  partner: PartnerWithUser;\n  product?: Product;\n};\nexport type OrderWithDetails = Order & {\n  partner: PartnerWithUser;\n  product: Product;\n};\nexport type ChatMessageWithSender = ChatMessage & {\n  sender: User;\n  receiver?: User;\n};\n\n// Updated Pricing tier configuration\nexport type PricingTier = \"basic\" | \"professional\" | \"enterprise\";\n\nexport interface CommissionTier {\n  threshold: number; // Net profit threshold in UZS\n  rate: number; // Commission percentage from net profit\n}\n\nexport interface TierConfig {\n  name: string;\n  description: string;\n  fixedPayment: number; // Monthly fixed payment in UZS\n  commissionTiers: CommissionTier[]; // Progressive commission rates\n  sptCost: number; // SPT (Stretch, Package, Tag) cost per item\n  maxProductRequests: number;\n  trialPeriod: number; // Trial period in days\n  features: {\n    analytics: boolean;\n    prioritySupport: boolean;\n    customIntegrations: boolean;\n    advancedReports: boolean;\n    apiAccess: boolean;\n    customBranding: boolean;\n    personalManager?: boolean;\n    weeklyReports?: boolean;\n    monthlyReports?: boolean;\n    marketingSupport?: boolean;\n    customDashboard?: boolean;\n    priorityQueue?: boolean;\n    customPackaging?: boolean;\n    directExecutiveAccess?: boolean;\n  };\n}\n\n// Updated Professional Pricing Tiers - Commission from NET PROFIT\nexport const PRICING_TIERS: Record<PricingTier, TierConfig> = {\n  basic: {\n    name: \"Basic\",\n    description: \"Nol xavfli boshlash - yangi hamkorlar uchun\",\n    fixedPayment: 0, // Risk-free start\n    commissionTiers: [\n      { threshold: 5000000, rate: 45 }, // 0-5M: 45%\n      { threshold: 15000000, rate: 40 }, // 5-15M: 40%\n      { threshold: 30000000, rate: 35 }, // 15-30M: 35%\n      { threshold: Infinity, rate: 30 }, // 30M+: 30%\n    ],\n    sptCost: 2000, // Fixed SPT cost\n    maxProductRequests: 25,\n    trialPeriod: 60, // 2 months free trial\n    features: {\n      analytics: true,\n      prioritySupport: false,\n      customIntegrations: false,\n      advancedReports: false,\n      apiAccess: false,\n      customBranding: false,\n      personalManager: true,\n      weeklyReports: true,\n    },\n  },\n  professional: {\n    name: \"Business Standard\",\n    description: \"Kichik biznes uchun barqaror variant\",\n    fixedPayment: 3500000, // 3.5M UZS\n    commissionTiers: [\n      { threshold: 10000000, rate: 25 }, // 0-10M: 25%\n      { threshold: 25000000, rate: 22 }, // 10-25M: 22%\n      { threshold: 50000000, rate: 20 }, // 25-50M: 20%\n      { threshold: Infinity, rate: 18 }, // 50M+: 18%\n    ],\n    sptCost: 2000,\n    maxProductRequests: 100,\n    trialPeriod: 30,\n    features: {\n      analytics: true,\n      prioritySupport: true,\n      customIntegrations: false,\n      advancedReports: true,\n      apiAccess: true,\n      customBranding: false,\n      personalManager: false,\n      weeklyReports: true,\n      monthlyReports: true,\n      marketingSupport: true,\n    },\n  },\n  enterprise: {\n    name: \"Enterprise Elite\", \n    description: \"Yirik biznes uchun maxsus xizmat\",\n    fixedPayment: 10000000, // 10M UZS\n    commissionTiers: [\n      { threshold: 25000000, rate: 18 }, // 0-25M: 18%\n      { threshold: 50000000, rate: 16 }, // 25-50M: 16%\n      { threshold: 100000000, rate: 14 }, // 50-100M: 14%\n      { threshold: Infinity, rate: 12 }, // 100M+: 12%\n    ],\n    sptCost: 2000,\n    maxProductRequests: -1, // Unlimited\n    trialPeriod: 30,\n    features: {\n      analytics: true,\n      prioritySupport: true,\n      customIntegrations: true,\n      advancedReports: true,\n      apiAccess: true,\n      customBranding: true,\n      personalManager: true,\n      weeklyReports: true,\n      monthlyReports: true,\n      marketingSupport: true,\n      customDashboard: true,\n      priorityQueue: true,\n      customPackaging: true,\n      directExecutiveAccess: true,\n    },\n  },\n};\n\n// Updated helper functions for new pricing structure\nexport function calculateCommission(netProfit: number, tier: PricingTier): { rate: number; amount: number } {\n  const config = PRICING_TIERS[tier];\n  \n  // Find the applicable commission tier based on net profit\n  for (const commissionTier of config.commissionTiers) {\n    if (netProfit <= commissionTier.threshold) {\n      return {\n        rate: commissionTier.rate,\n        amount: (netProfit * commissionTier.rate) / 100\n      };\n    }\n  }\n  \n  // Default to the last tier if net profit exceeds all thresholds\n  const lastTier = config.commissionTiers[config.commissionTiers.length - 1];\n  return {\n    rate: lastTier.rate,\n    amount: (netProfit * lastTier.rate) / 100\n  };\n}\n\nexport function getTotalFulfillmentFee(netProfit: number, tier: PricingTier): number {\n  const config = PRICING_TIERS[tier];\n  const commission = calculateCommission(netProfit, tier);\n  return config.fixedPayment + commission.amount;\n}\n\nexport function getPartnerProfit(sales: number, costPrice: number, fulfillmentFee: number, sptCost: number = 0): number {\n  // Formula: Sales - Cost Price - Fulfillment Fee - SPT Cost - 3% Tax = Partner Net Profit\n  const taxRate = 0.03;\n  const beforeTax = sales - costPrice - fulfillmentFee - sptCost;\n  const tax = beforeTax * taxRate;\n  return beforeTax - tax;\n}\n\nexport function hasFeature(tier: PricingTier, feature: keyof TierConfig['features']): boolean {\n  return PRICING_TIERS[tier].features[feature] ?? false;\n}\n\nexport function getSPTCost(tier: PricingTier): number {\n  return PRICING_TIERS[tier].sptCost;\n}\n\n// Helper to calculate total SPT cost for multiple items\nexport function getTotalSPTCost(tier: PricingTier, itemCount: number = 1): number {\n  return PRICING_TIERS[tier].sptCost * itemCount;\n}\n\nexport function getTrialPeriod(tier: PricingTier): number {\n  return PRICING_TIERS[tier].trialPeriod;\n}\n","size_bytes":26259},"client/src/App.tsx":{"content":"import React from \"react\";\nimport { Router, Route, Switch } from \"wouter\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { AuthProvider } from \"@/hooks/useAuth.tsx\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport Landing from \"@/pages/landing\";\nimport LoginPage from \"@/pages/LoginPage\";\nimport AdminLogin from \"@/pages/AdminLogin\";\nimport AdminPanel from \"@/pages/admin-panel\";\nimport PartnerDashboard from \"@/pages/partner-dashboard\";\nimport PartnerRegistration from \"@/pages/partner-registration\";\nimport NotFound from \"@/pages/not-found\";\n\n// API query client\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      staleTime: 1000 * 60 * 5, // 5 minutes\n      retry: 1,\n    },\n  },\n});\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <Router>\n          <Switch>\n            <Route path=\"/\" component={Landing} />\n            <Route path=\"/login\" component={LoginPage} />\n            <Route path=\"/admin-login\" component={AdminLogin} />\n            <Route path=\"/admin\" component={AdminPanel} />\n            <Route path=\"/admin-panel\" component={AdminPanel} />\n            <Route path=\"/partner-dashboard\" component={PartnerDashboard} />\n            <Route path=\"/partner-registration\" component={PartnerRegistration} />\n            <Route component={NotFound} />\n          </Switch>\n        </Router>\n        <Toaster />\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","size_bytes":1528},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210 11% 96%);\n  --foreground: hsl(210 6% 8%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(210 6% 8%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 6% 8%);\n  --primary: hsl(210 83% 53%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 40% 94%);\n  --secondary-foreground: hsl(210 6% 8%);\n  --muted: hsl(210 40% 96%);\n  --muted-foreground: hsl(210 4% 40%);\n  --accent: hsl(142 72% 29%);\n  --accent-foreground: hsl(0 0% 100%);\n  --destructive: hsl(0 72% 51%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 36% 90%);\n  --input: hsl(210 40% 98%);\n  --ring: hsl(210 83% 53%);\n  --chart-1: hsl(210 83% 53%);\n  --chart-2: hsl(142 72% 29%);\n  --chart-3: hsl(45 86% 58%);\n  --chart-4: hsl(142 72% 29%);\n  --chart-5: hsl(280 65% 60%);\n  --sidebar: hsl(0 0% 100%);\n  --sidebar-foreground: hsl(210 6% 8%);\n  --sidebar-primary: hsl(210 83% 53%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(210 40% 94%);\n  --sidebar-accent-foreground: hsl(210 83% 53%);\n  --sidebar-border: hsl(210 36% 90%);\n  --sidebar-ring: hsl(210 83% 53%);\n  \n  /* Professional color scheme matching design */\n  --neutral-50: hsl(210 20% 98%);\n  --neutral-100: hsl(220 14.3% 95.9%);\n  --neutral-200: hsl(220 13% 91%);\n  --neutral-300: hsl(216 12.2% 83.9%);\n  --neutral-400: hsl(218 10.6% 64.9%);\n  --neutral-500: hsl(220 8.9% 46.1%);\n  --neutral-600: hsl(215 13.8% 34.1%);\n  --neutral-700: hsl(217 19.1% 26.7%);\n  --neutral-800: hsl(215 27.9% 16.9%);\n  --neutral-900: hsl(222 84% 4.9%);\n  \n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(219 72% 56%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(159 100% 33%);\n  --accent-foreground: hsl(0 0% 100%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased text-foreground;\n    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n    background: linear-gradient(135deg, \n      hsl(220 26% 14%) 0%, \n      hsl(225 39% 21%) 25%, \n      hsl(220 26% 14%) 50%, \n      hsl(223 36% 18%) 75%, \n      hsl(220 26% 14%) 100%\n    );\n    background-size: 400% 400%;\n    animation: gradientShift 15s ease infinite;\n    background-attachment: fixed;\n    min-height: 100vh;\n  }\n\n  @keyframes gradientShift {\n    0% { background-position: 0% 50%; }\n    50% { background-position: 100% 50%; }\n    100% { background-position: 0% 50%; }\n  }\n  \n  h1, h2, h3, h4, h5, h6 {\n    font-family: 'Inter', system-ui, sans-serif;\n    font-weight: 600;\n  }\n}\n\n/* Premium trading platform design */\n.trading-background {\n  background: \n    radial-gradient(circle at 20% 50%, rgba(59, 130, 246, 0.05) 0%, transparent 50%),\n    radial-gradient(circle at 80% 20%, rgba(34, 197, 94, 0.05) 0%, transparent 50%),\n    radial-gradient(circle at 40% 80%, rgba(168, 85, 247, 0.03) 0%, transparent 50%),\n    linear-gradient(135deg, hsl(220 26% 14%) 0%, hsl(223 36% 18%) 100%);\n}\n\n.glass-card {\n  background: rgba(255, 255, 255, 0.02);\n  backdrop-filter: blur(20px);\n  border: 1px solid rgba(255, 255, 255, 0.1);\n  box-shadow: \n    0 8px 32px 0 rgba(0, 0, 0, 0.37),\n    inset 0 1px 0 rgba(255, 255, 255, 0.1);\n}\n\n.premium-card {\n  background: linear-gradient(145deg, \n    rgba(255, 255, 255, 0.08) 0%, \n    rgba(255, 255, 255, 0.02) 100%\n  );\n  backdrop-filter: blur(16px);\n  border: 1px solid rgba(255, 255, 255, 0.08);\n  box-shadow: \n    0 8px 40px rgba(0, 0, 0, 0.12),\n    0 2px 8px rgba(0, 0, 0, 0.08);\n}\n\n.marketplace-gradient {\n  background: linear-gradient(135deg, \n    hsl(210 83% 53%) 0%, \n    hsl(142 72% 29%) 100%\n  );\n  box-shadow: 0 4px 20px rgba(59, 130, 246, 0.3);\n}\n\n.accent-gradient {\n  background: linear-gradient(135deg, \n    hsl(142 72% 29%) 0%, \n    hsl(45 86% 58%) 100%\n  );\n  box-shadow: 0 4px 20px rgba(34, 197, 94, 0.3);\n}\n\n/* Custom scrollbar for chat */\n.custom-scrollbar::-webkit-scrollbar {\n  width: 6px;\n}\n\n.custom-scrollbar::-webkit-scrollbar-track {\n  background: hsl(var(--neutral-100));\n}\n\n.custom-scrollbar::-webkit-scrollbar-thumb {\n  background: hsl(var(--neutral-300));\n  border-radius: 3px;\n}\n\n.custom-scrollbar::-webkit-scrollbar-thumb:hover {\n  background: hsl(var(--neutral-400));\n}\n\n/* Animation utilities */\n@keyframes fadeIn {\n  from { opacity: 0; transform: translateY(10px); }\n  to { opacity: 1; transform: translateY(0); }\n}\n\n.animate-fade-in {\n  animation: fadeIn 0.3s ease-out;\n}\n\n/* Professional shadow utilities */\n.shadow-professional {\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n}\n\n.shadow-professional-lg {\n  box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\n}\n\n/* Status badge animations */\n.status-badge {\n  @apply inline-flex items-center px-2 py-1 rounded-full text-xs font-medium transition-colors;\n}\n\n.status-pending {\n  @apply bg-yellow-100 text-yellow-800;\n}\n\n.status-approved {\n  @apply bg-green-100 text-green-800;\n}\n\n.status-rejected {\n  @apply bg-red-100 text-red-800;\n}\n\n/* Professional card hover effects */\n.card-hover {\n  @apply transition-all duration-200 hover:shadow-professional-lg hover:-translate-y-1;\n}\n\n/* Loading states */\n.loading-shimmer {\n  background: linear-gradient(90deg, hsl(var(--neutral-200)) 25%, hsl(var(--neutral-100)) 50%, hsl(var(--neutral-200)) 75%);\n  background-size: 200% 100%;\n  animation: shimmer 1.5s infinite;\n}\n\n@keyframes shimmer {\n  0% { background-position: -200% 0; }\n  100% { background-position: 200% 0; }\n}\n","size_bytes":8856},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/chat-system.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Send, MessageCircle, Users, Circle } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface ChatUser {\n  id: string;\n  email: string;\n  firstName?: string;\n  lastName?: string;\n  profileImageUrl?: string;\n  role: 'admin' | 'partner';\n}\n\ninterface ChatMessage {\n  id: string;\n  senderId: string;\n  receiverId: string;\n  message: string;\n  isRead: boolean;\n  createdAt: string;\n  sender: ChatUser;\n}\n\ninterface ChatSystemProps {\n  className?: string;\n}\n\nexport function ChatSystem({ className }: ChatSystemProps) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedUser, setSelectedUser] = useState<ChatUser | null>(null);\n  const [message, setMessage] = useState(\"\");\n  const [socket, setSocket] = useState<WebSocket | null>(null);\n  const [onlineUsers, setOnlineUsers] = useState<Set<string>>(new Set());\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  // Get available chat users - filtered by role\n  const { data: chatUsers = [] } = useQuery<ChatUser[]>({\n    queryKey: ['/api/chat/users'],\n    enabled: !!user,\n  });\n\n  // Get unread message counts\n  const { data: unreadCounts = {} } = useQuery<Record<string, number>>({\n    queryKey: ['/api/chat/unread-counts'],\n    enabled: !!user,\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  // Get chat messages for selected user\n  const { data: messages = [], refetch } = useQuery<ChatMessage[]>({\n    queryKey: ['/api/chat/messages', selectedUser?.id],\n    enabled: !!user && !!selectedUser,\n    refetchInterval: 2000, // Auto refresh every 2 seconds\n  });\n\n  // Send message mutation\n  const sendMessageMutation = useMutation({\n    mutationFn: async (newMessage: { receiverId: string; message: string }) => {\n      const response = await fetch('/api/chat/send', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n        body: JSON.stringify(newMessage),\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      console.log('Xabar muvaffaqiyatli yuborildi:', data);\n      setMessage(\"\");\n      \n      // Refresh messages after a short delay to ensure new message is included\n      setTimeout(() => {\n        queryClient.invalidateQueries({\n          queryKey: ['/api/chat/messages', selectedUser?.id],\n        });\n        queryClient.invalidateQueries({\n          queryKey: ['/api/chat/unread-counts'],\n        });\n      }, 100);\n    },\n    onError: (error: Error) => {\n      console.error('Xabar yuborishda xatolik:', error);\n      toast({\n        title: \"Xato\",\n        description: \"Xabar yuborilmadi. Qaytadan urinib ko'ring.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Mark messages as read mutation\n  const markAsReadMutation = useMutation({\n    mutationFn: async (senderId: string) => {\n      const response = await fetch(`/api/chat/mark-read/${senderId}`, {\n        method: 'PUT',\n        credentials: 'include',\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({\n        queryKey: ['/api/chat/unread-counts'],\n      });\n    },\n  });\n\n  // WebSocket connection\n  useEffect(() => {\n    if (!user) return;\n\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n    const ws = new WebSocket(wsUrl);\n\n    ws.onopen = () => {\n      ws.send(JSON.stringify({ type: 'auth', userId: user.id }));\n      setSocket(ws);\n    };\n\n    ws.onmessage = (event) => {\n      const data = JSON.parse(event.data);\n      \n      if (data.type === 'new_message') {\n        // Refresh messages if it's for the selected user\n        if (selectedUser && data.message.senderId === selectedUser.id) {\n          queryClient.invalidateQueries({\n            queryKey: ['/api/chat/messages', selectedUser.id],\n          });\n        }\n        \n        // Refresh unread counts\n        queryClient.invalidateQueries({\n          queryKey: ['/api/chat/unread-counts'],\n        });\n        \n        // Show toast notification\n        toast({\n          title: \"New Message\",\n          description: `From ${data.message.sender?.firstName || data.message.sender?.email}`,\n        });\n      }\n      \n      if (data.type === 'user_online') {\n        setOnlineUsers(prev => new Set(prev).add(data.userId));\n      }\n      \n      if (data.type === 'user_offline') {\n        setOnlineUsers(prev => {\n          const newSet = new Set(prev);\n          newSet.delete(data.userId);\n          return newSet;\n        });\n      }\n    };\n\n    ws.onclose = () => {\n      setSocket(null);\n    };\n\n    return () => {\n      ws.close();\n    };\n  }, [user, selectedUser, queryClient, toast]);\n\n  // Auto-scroll to bottom\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  // Mark messages as read when selecting a user\n  useEffect(() => {\n    if (selectedUser && unreadCounts[selectedUser.id] > 0) {\n      markAsReadMutation.mutate(selectedUser.id);\n    }\n  }, [selectedUser, unreadCounts]);\n\n  const handleSendMessage = () => {\n    if (!message.trim() || !selectedUser || sendMessageMutation.isPending) return;\n\n    const messageToSend = message.trim();\n    \n    sendMessageMutation.mutate({\n      receiverId: selectedUser.id,\n      message: messageToSend,\n    });\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const formatMessageTime = (dateString: string) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diff = now.getTime() - date.getTime();\n    const days = Math.floor(diff / (1000 * 60 * 60 * 24));\n\n    if (days === 0) {\n      return date.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });\n    } else if (days === 1) {\n      return 'Yesterday';\n    } else {\n      return date.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit' });\n    }\n  };\n\n  const getUserDisplayName = (user: ChatUser) => {\n    if (user.firstName && user.lastName) {\n      return `${user.firstName} ${user.lastName}`;\n    }\n    return user.email.split('@')[0];\n  };\n\n  const getUserInitials = (user: ChatUser) => {\n    if (user.firstName && user.lastName) {\n      return `${user.firstName[0]}${user.lastName[0]}`;\n    }\n    return user.email.substring(0, 2).toUpperCase();\n  };\n\n  if (!user) {\n    return (\n      <Card className={`premium-card border-slate-600 ${className}`}>\n        <CardContent className=\"flex items-center justify-center py-8\">\n          <p className=\"text-white\">Chat tizimiga kirish uchun tizimga kiring</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className={`h-[600px] flex flex-col premium-card border-slate-600 ${className}`} data-testid=\"chat-system\">\n      <CardHeader className=\"pb-3\">\n        <CardTitle className=\"flex items-center gap-2 text-white\">\n          <MessageCircle className=\"h-5 w-5 text-blue-400\" />\n          Chat Tizimi\n        </CardTitle>\n        <CardDescription className=\"text-slate-300\">\n          {user.role === 'admin' ? 'Hamkorlar bilan chat' : 'Admin bilan chat'}\n        </CardDescription>\n      </CardHeader>\n      \n      <CardContent className=\"flex-1 flex gap-4 p-4 min-h-0\">\n        {/* Users List */}\n        <div className=\"w-1/3 min-w-0\">\n          <div className=\"flex items-center gap-2 mb-3\">\n            <Users className=\"h-4 w-4 text-blue-400\" />\n            <span className=\"text-sm font-medium text-white\">{user.role === 'admin' ? 'Hamkorlar' : 'Adminlar'}</span>\n          </div>\n          \n          <ScrollArea className=\"h-full\">\n            <div className=\"space-y-2\">\n              {chatUsers.map((chatUser) => (\n                <div\n                  key={chatUser.id}\n                  onClick={() => setSelectedUser(chatUser)}\n                  className={`p-3 rounded-lg cursor-pointer transition-colors ${\n                    selectedUser?.id === chatUser.id\n                      ? 'bg-blue-600/20 border border-blue-500'\n                      : 'hover:bg-slate-700/50'\n                  }`}\n                  data-testid={`user-${chatUser.id}`}\n                >\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"relative\">\n                      <Avatar className=\"h-8 w-8\">\n                        <AvatarImage src={chatUser.profileImageUrl} />\n                        <AvatarFallback className=\"text-xs\">\n                          {getUserInitials(chatUser)}\n                        </AvatarFallback>\n                      </Avatar>\n                      {onlineUsers.has(chatUser.id) && (\n                        <Circle className=\"absolute -bottom-1 -right-1 h-3 w-3 fill-green-500 text-green-500\" />\n                      )}\n                    </div>\n                    \n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-center justify-between\">\n                        <p className=\"text-sm font-medium truncate text-white\">\n                          {getUserDisplayName(chatUser)}\n                        </p>\n                        {unreadCounts[chatUser.id] > 0 && (\n                          <Badge variant=\"destructive\" className=\"text-xs px-1 py-0 min-w-[1.25rem] h-5 bg-red-500\">\n                            {unreadCounts[chatUser.id]}\n                          </Badge>\n                        )}\n                      </div>\n                      <p className=\"text-xs text-slate-400 capitalize\">\n                        {chatUser.role === 'admin' ? 'Administrator' : 'Hamkor'}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </ScrollArea>\n        </div>\n\n        <Separator orientation=\"vertical\" className=\"bg-slate-600\" />\n\n        {/* Chat Area */}\n        <div className=\"flex-1 flex flex-col min-h-0\">\n          {selectedUser ? (\n            <>\n              {/* Chat Header */}\n              <div className=\"flex items-center gap-3 pb-3\">\n                <Avatar className=\"h-8 w-8\">\n                  <AvatarImage src={selectedUser.profileImageUrl} />\n                  <AvatarFallback className=\"text-xs bg-slate-600 text-white\">\n                    {getUserInitials(selectedUser)}\n                  </AvatarFallback>\n                </Avatar>\n                <div>\n                  <p className=\"font-medium text-white\">{getUserDisplayName(selectedUser)}</p>\n                  <p className=\"text-xs text-slate-400 flex items-center gap-1\">\n                    {onlineUsers.has(selectedUser.id) ? (\n                      <>\n                        <Circle className=\"h-2 w-2 fill-green-400 text-green-400\" />\n                        Online\n                      </>\n                    ) : (\n                      <>\n                        <Circle className=\"h-2 w-2 fill-gray-400 text-gray-400\" />\n                        Offline\n                      </>\n                    )}\n                  </p>\n                </div>\n              </div>\n\n              <Separator className=\"mb-3 bg-slate-600\" />\n\n              {/* Messages */}\n              <ScrollArea className=\"flex-1 mb-3\">\n                <div className=\"space-y-3 pr-4\">\n                  {messages.map((msg) => (\n                    <div\n                      key={msg.id}\n                      className={`flex ${msg.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n                    >\n                      <div\n                        className={`max-w-[80%] rounded-lg px-3 py-2 ${\n                          msg.senderId === user.id\n                            ? 'bg-blue-600 text-white'\n                            : 'bg-slate-700 text-white border border-slate-600'\n                        }`}\n                        data-testid={`message-${msg.id}`}\n                      >\n                        <p className=\"text-sm text-white\">{msg.message}</p>\n                        <p className=\"text-xs opacity-70 mt-1 text-slate-300\">\n                          {formatMessageTime(msg.createdAt)}\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n                  <div ref={messagesEndRef} />\n                </div>\n              </ScrollArea>\n\n              {/* Message Input */}\n              <div className=\"flex gap-2\">\n                <Input\n                  value={message}\n                  onChange={(e) => setMessage(e.target.value)}\n                  onKeyPress={handleKeyPress}\n                  placeholder=\"Xabar yozing...\"\n                  className=\"bg-slate-800 border-slate-600 text-white placeholder:text-slate-400\"\n                  disabled={sendMessageMutation.isPending}\n                  data-testid=\"input-message\"\n                />\n                <Button\n                  onClick={handleSendMessage}\n                  disabled={!message.trim() || sendMessageMutation.isPending}\n                  size=\"icon\"\n                  className=\"marketplace-gradient\"\n                  data-testid=\"button-send\"\n                >\n                  <Send className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </>\n          ) : (\n            <div className=\"flex-1 flex items-center justify-center\">\n              <div className=\"text-center text-slate-400\">\n                <MessageCircle className=\"h-12 w-12 mx-auto mb-2 opacity-50 text-slate-500\" />\n                <p className=\"text-white\">Suhbat boshlash uchun foydalanuvchini tanlang</p>\n              </div>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":14563},"client/src/components/commission-calculator.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { TrendingUp, Target, Star, Calculator } from \"lucide-react\";\n\ninterface CommissionResult {\n  tier: number;\n  fixedPayment: number;\n  bonusPayment: number;\n  totalPayment: number;\n  salesThreshold: number;\n  bonusPercentage: number;\n  nextTierAt: number | null;\n}\n\ninterface CommissionCalculatorProps {\n  className?: string;\n}\n\nexport function CommissionCalculator({ className }: CommissionCalculatorProps) {\n  const [salesInput, setSalesInput] = useState<string>(\"10,000,000\");\n  const [result, setResult] = useState<CommissionResult | null>(null);\n\n  // Format number input with commas and handle som currency\n  const formatNumberInput = (value: string): string => {\n    // Remove non-digit characters\n    const numbers = value.replace(/\\D/g, '');\n    \n    // Remove leading zeros but keep at least one digit\n    const cleanNumbers = numbers.replace(/^0+/, '') || '0';\n    \n    // Add commas for thousands separator\n    return cleanNumbers.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n  };\n\n  const parseNumberInput = (value: string): number => {\n    return parseInt(value.replace(/,/g, '') || '0', 10);\n  };\n\n  const handleInputChange = (value: string) => {\n    const formatted = formatNumberInput(value);\n    setSalesInput(formatted);\n  };\n\n  // Calculate commission based on corrected 3-tier system\n  const calculateCommission = (sales: number): CommissionResult => {\n    // Tier 1: 2.5M som fixed + 15M som threshold for bonus\n    if (sales < 15000000) {\n      return {\n        tier: 1,\n        fixedPayment: 2500000,\n        bonusPayment: 0,\n        totalPayment: 2500000,\n        salesThreshold: 15000000,\n        bonusPercentage: 0,\n        nextTierAt: 15000000,\n      };\n    }\n    \n    // Tier 1 with bonus: 15M+ sales\n    if (sales >= 15000000 && sales < 50000000) {\n      const bonus = (sales - 15000000) * 0.15;\n      return {\n        tier: 1,\n        fixedPayment: 2500000,\n        bonusPayment: bonus,\n        totalPayment: 2500000 + bonus,\n        salesThreshold: 15000000,\n        bonusPercentage: 15,\n        nextTierAt: 50000000,\n      };\n    }\n    \n    // Tier 2: 4.5M som fixed + 50M som threshold for bonus\n    if (sales >= 50000000 && sales < 80000000) {\n      const bonus = (sales - 50000000) * 0.20;\n      return {\n        tier: 2,\n        fixedPayment: 4500000,\n        bonusPayment: bonus,\n        totalPayment: 4500000 + bonus,\n        salesThreshold: 50000000,\n        bonusPercentage: 20,\n        nextTierAt: 80000000,\n      };\n    }\n    \n    // Tier 3: 6M som fixed + 80M som threshold for bonus\n    if (sales >= 80000000) {\n      const bonus = (sales - 80000000) * 0.25;\n      return {\n        tier: 3,\n        fixedPayment: 6000000,\n        bonusPayment: bonus,\n        totalPayment: 6000000 + bonus,\n        salesThreshold: 80000000,\n        bonusPercentage: 25,\n        nextTierAt: null,\n      };\n    }\n    \n    // Default fallback\n    return {\n      tier: 1,\n      fixedPayment: 2500000,\n      bonusPayment: 0,\n      totalPayment: 2500000,\n      salesThreshold: 15000000,\n      bonusPercentage: 0,\n      nextTierAt: 15000000,\n    };\n  };\n\n  useEffect(() => {\n    const sales = parseNumberInput(salesInput);\n    const calculatedResult = calculateCommission(sales);\n    setResult(calculatedResult);\n  }, [salesInput]);\n\n  const formatSom = (amount: number): string => {\n    return new Intl.NumberFormat('uz-UZ').format(amount) + ' so\\'m';\n  };\n\n  const getTierInfo = (tier: number) => {\n    switch (tier) {\n      case 1:\n        return {\n          name: 'Tier 1',\n          color: 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300',\n          icon: <Target className=\"h-4 w-4\" />,\n          description: '2.5M so\\'m fiksa + 15M so\\'mdan bonus'\n        };\n      case 2:\n        return {\n          name: 'Tier 2',\n          color: 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300',\n          icon: <TrendingUp className=\"h-4 w-4\" />,\n          description: '4.5M so\\'m fiksa + 50M so\\'mdan bonus'\n        };\n      case 3:\n        return {\n          name: 'Tier 3',\n          color: 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300',\n          icon: <Star className=\"h-4 w-4\" />,\n          description: '6M so\\'m fiksa + 80M so\\'mdan bonus'\n        };\n      default:\n        return {\n          name: 'Tier 1',\n          color: 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300',\n          icon: <Target className=\"h-4 w-4\" />,\n          description: '2.5M so\\'m fiksa + 15M so\\'mdan bonus'\n        };\n    }\n  };\n\n  const sales = parseNumberInput(salesInput);\n  const tierInfo = result ? getTierInfo(result.tier) : getTierInfo(1);\n  \n  // Calculate progress to next tier\n  const progressToNext = result?.nextTierAt \n    ? Math.min((sales / result.nextTierAt) * 100, 100)\n    : 100;\n\n  return (\n    <Card className={className} data-testid=\"commission-calculator\">\n      <CardHeader className=\"pb-3\">\n        <CardTitle className=\"flex items-center gap-2\">\n          <Calculator className=\"h-5 w-5\" />\n          Komissiya Kalkulyatori\n        </CardTitle>\n        <CardDescription>\n          Oylik savdo hajmingizni kiriting va to'lov miqdorini hisoblang\n        </CardDescription>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-6\">\n        {/* Sales Input */}\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"sales-input\" className=\"text-sm font-medium\">\n            Oylik Savdo Hajmi (so'm)\n          </Label>\n          <Input\n            id=\"sales-input\"\n            type=\"text\"\n            value={salesInput}\n            onChange={(e) => handleInputChange(e.target.value)}\n            placeholder=\"10,000,000\"\n            className=\"text-lg font-mono\"\n            data-testid=\"input-sales-amount\"\n          />\n        </div>\n\n        {result && (\n          <>\n            {/* Current Tier */}\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-sm text-muted-foreground\">Joriy Tier:</span>\n                <Badge className={tierInfo.color}>\n                  {tierInfo.icon}\n                  <span className=\"ml-1\">{tierInfo.name}</span>\n                </Badge>\n              </div>\n            </div>\n\n            {/* Tier Description */}\n            <div className=\"bg-muted/50 rounded-lg p-3\">\n              <p className=\"text-sm text-muted-foreground\">{tierInfo.description}</p>\n            </div>\n\n            {/* Progress to Next Tier */}\n            {result.nextTierAt && (\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">Keyingi Tier uchun:</span>\n                  <span className=\"font-medium\">\n                    {formatSom(result.nextTierAt)}\n                  </span>\n                </div>\n                <Progress value={progressToNext} className=\"h-2\" />\n                <p className=\"text-xs text-muted-foreground\">\n                  Qolgan: {formatSom(Math.max(0, result.nextTierAt - sales))}\n                </p>\n              </div>\n            )}\n\n            <Separator />\n\n            {/* Payment Breakdown */}\n            <div className=\"space-y-4\">\n              <h4 className=\"font-medium text-sm\">To'lov Tafsilotlari:</h4>\n              \n              <div className=\"space-y-3\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-muted-foreground\">Fiksatsiyalangan to'lov:</span>\n                  <span className=\"font-medium\">{formatSom(result.fixedPayment)}</span>\n                </div>\n                \n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-muted-foreground\">\n                    Bonus to'lov ({result.bonusPercentage}%):\n                  </span>\n                  <span className=\"font-medium\">{formatSom(result.bonusPayment)}</span>\n                </div>\n                \n                <Separator />\n                \n                <div className=\"flex justify-between items-center\">\n                  <span className=\"font-medium\">Jami to'lov:</span>\n                  <span className=\"text-lg font-bold text-primary\">\n                    {formatSom(result.totalPayment)}\n                  </span>\n                </div>\n              </div>\n            </div>\n\n            {/* Bonus System Explanation */}\n            {result.bonusPayment === 0 && sales < result.salesThreshold && (\n              <div className=\"bg-orange-50 border border-orange-200 rounded-lg p-3\">\n                <p className=\"text-sm text-orange-800\">\n                  💡 Bonus sistema ishlamaydi: {formatSom(result.salesThreshold)} dan yuqori \n                  savdo qilsangiz bonus olasiz!\n                </p>\n              </div>\n            )}\n\n            {result.bonusPayment > 0 && (\n              <div className=\"bg-green-50 border border-green-200 rounded-lg p-3\">\n                <p className=\"text-sm text-green-800\">\n                  🎉 Bonus sistema faol! Siz {formatSom(result.salesThreshold)} dan yuqori \n                  savdo qildingiz va {result.bonusPercentage}% bonus olasiz.\n                </p>\n              </div>\n            )}\n          </>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":9704},"client/src/components/enhanced-product-request-form.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Plus, AlertCircle, Package, Truck, X, Upload, Image } from \"lucide-react\";\n\ninterface ProductItem {\n  id: string;\n  productName: string;\n  description: string;\n  expectedQuantity: string;\n  estimatedPrice: string;\n  imageFile?: File;\n  imagePreview?: string;\n}\n\nexport function EnhancedProductRequestForm() {\n  const { toast } = useToast();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [products, setProducts] = useState<ProductItem[]>([]);\n  const [supplierInfo, setSupplierInfo] = useState(\"\");\n  const [urgencyLevel, setUrgencyLevel] = useState(\"normal\");\n  \n  const [currentProduct, setCurrentProduct] = useState<ProductItem>({\n    id: \"\",\n    productName: \"\",\n    description: \"\",\n    expectedQuantity: \"\",\n    estimatedPrice: \"\",\n  });\n\n  const createRequestMutation = useMutation({\n    mutationFn: async (data: { products: ProductItem[]; supplierInfo: string; urgencyLevel: string }) => {\n      // Create bulk request with all products\n      return apiRequest(\"POST\", \"/api/product-requests/bulk\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"So'rovlar yuborildi\",\n        description: `${products.length} ta mahsulot so'rovi muvaffaqiyatli yuborildi. Admin ko'rib chiqadi.`,\n      });\n      // Reset form\n      setProducts([]);\n      setSupplierInfo(\"\");\n      setUrgencyLevel(\"normal\");\n      queryClient.invalidateQueries({ queryKey: [\"/api/product-requests\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Xato\",\n        description: \"So'rovlarni yuborishda xato yuz berdi\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const addProduct = () => {\n    if (!currentProduct.productName || !currentProduct.expectedQuantity) {\n      toast({\n        title: \"Ma'lumot yetishmaydi\",\n        description: \"Mahsulot nomi va miqdorni kiriting\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    const newProduct = {\n      ...currentProduct,\n      id: Date.now().toString(),\n    };\n    \n    setProducts([...products, newProduct]);\n    setCurrentProduct({\n      id: \"\",\n      productName: \"\",\n      description: \"\",\n      expectedQuantity: \"\",\n      estimatedPrice: \"\",\n    });\n    setIsDialogOpen(false);\n  };\n\n  const removeProduct = (id: string) => {\n    setProducts(products.filter(p => p.id !== id));\n  };\n\n  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      if (file.size > 5 * 1024 * 1024) { // 5MB limit\n        toast({\n          title: \"Fayl hajmi katta\",\n          description: \"Rasm hajmi 5MB dan kichik bo'lishi kerak\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      \n      const reader = new FileReader();\n      reader.onload = (event) => {\n        setCurrentProduct({\n          ...currentProduct,\n          imageFile: file,\n          imagePreview: event.target?.result as string,\n        });\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const handleSubmitAll = () => {\n    if (products.length === 0) {\n      toast({\n        title: \"Mahsulot yo'q\",\n        description: \"Kamida bitta mahsulot qo'shing\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    createRequestMutation.mutate({\n      products,\n      supplierInfo,\n      urgencyLevel,\n    });\n  };\n\n  const urgencyColors = {\n    low: \"bg-blue-100 text-blue-800\",\n    normal: \"bg-green-100 text-green-800\", \n    high: \"bg-orange-100 text-orange-800\",\n    urgent: \"bg-red-100 text-red-800\"\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Supplier Information (Common for all products) */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Truck className=\"h-5 w-5\" />\n            <span>Taminotchi Ma'lumotlari</span>\n          </CardTitle>\n          <CardDescription>\n            Barcha mahsulotlar uchun umumiy taminotchi ma'lumotlari\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"supplierInfo\">Taminotchi haqida ma'lumot</Label>\n            <Textarea\n              id=\"supplierInfo\"\n              value={supplierInfo}\n              onChange={(e) => setSupplierInfo(e.target.value)}\n              placeholder=\"Kompaniya nomi, manzil, telefon raqam, boshqa ma'lumotlar...\"\n              rows={3}\n              data-testid=\"textarea-supplier-info\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"urgencyLevel\">Umumiy muhimlik darajasi</Label>\n            <Select value={urgencyLevel} onValueChange={setUrgencyLevel}>\n              <SelectTrigger data-testid=\"select-urgency-level\">\n                <SelectValue placeholder=\"Muhimlik darajasini tanlang\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"low\">Kam muhim</SelectItem>\n                <SelectItem value=\"normal\">O'rtacha</SelectItem>\n                <SelectItem value=\"high\">Muhim</SelectItem>\n                <SelectItem value=\"urgent\">Juda muhim</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Product List */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <Package className=\"h-5 w-5\" />\n              <span>Mahsulotlar Ro'yxati ({products.length})</span>\n            </div>\n            <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n              <DialogTrigger asChild>\n                <Button size=\"sm\" data-testid=\"button-add-product\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Mahsulot Qo'shish\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-2xl\">\n                <DialogHeader>\n                  <DialogTitle>Yangi Mahsulot Qo'shish</DialogTitle>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"productName\">Mahsulot nomi *</Label>\n                      <Input\n                        id=\"productName\"\n                        value={currentProduct.productName}\n                        onChange={(e) => setCurrentProduct({ ...currentProduct, productName: e.target.value })}\n                        placeholder=\"Mahsulot nomini kiriting\"\n                        data-testid=\"input-product-name\"\n                      />\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"expectedQuantity\">Kutilayotgan miqdor *</Label>\n                      <Input\n                        id=\"expectedQuantity\"\n                        type=\"number\"\n                        value={currentProduct.expectedQuantity}\n                        onChange={(e) => setCurrentProduct({ ...currentProduct, expectedQuantity: e.target.value })}\n                        placeholder=\"Miqdorni kiriting\"\n                        data-testid=\"input-expected-quantity\"\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"description\">Batafsil tavsif</Label>\n                    <Textarea\n                      id=\"description\"\n                      value={currentProduct.description}\n                      onChange={(e) => setCurrentProduct({ ...currentProduct, description: e.target.value })}\n                      placeholder=\"Mahsulot haqida batafsil ma'lumot\"\n                      rows={3}\n                      data-testid=\"textarea-description\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"estimatedPrice\">Tan narx (so'm)</Label>\n                    <Input\n                      id=\"estimatedPrice\"\n                      type=\"number\"\n                      value={currentProduct.estimatedPrice}\n                      onChange={(e) => setCurrentProduct({ ...currentProduct, estimatedPrice: e.target.value })}\n                      placeholder=\"Tan narxni kiriting\"\n                      data-testid=\"input-estimated-price\"\n                    />\n                  </div>\n\n                  {/* Image Upload */}\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"productImage\">Mahsulot rasmi (ixtiyoriy)</Label>\n                    <div className=\"flex items-center space-x-4\">\n                      <Input\n                        id=\"productImage\"\n                        type=\"file\"\n                        accept=\"image/*\"\n                        onChange={handleImageUpload}\n                        className=\"hidden\"\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={() => document.getElementById('productImage')?.click()}\n                        className=\"flex items-center space-x-2\"\n                      >\n                        <Upload className=\"h-4 w-4\" />\n                        <span>Rasm tanlash</span>\n                      </Button>\n                      {currentProduct.imagePreview && (\n                        <div className=\"relative\">\n                          <img\n                            src={currentProduct.imagePreview}\n                            alt=\"Preview\"\n                            className=\"h-16 w-16 object-cover rounded-lg border\"\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"destructive\"\n                            size=\"sm\"\n                            className=\"absolute -top-2 -right-2 h-6 w-6 rounded-full p-0\"\n                            onClick={() => setCurrentProduct({ ...currentProduct, imageFile: undefined, imagePreview: undefined })}\n                          >\n                            <X className=\"h-3 w-3\" />\n                          </Button>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n\n                  <div className=\"flex justify-end space-x-2\">\n                    <Button type=\"button\" variant=\"outline\" onClick={() => setIsDialogOpen(false)}>\n                      Bekor qilish\n                    </Button>\n                    <Button type=\"button\" onClick={addProduct}>\n                      Qo'shish\n                    </Button>\n                  </div>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {products.length === 0 ? (\n            <div className=\"text-center py-8 text-neutral-500\">\n              <Package className=\"h-12 w-12 mx-auto mb-4 text-neutral-300\" />\n              <p>Hali mahsulot qo'shilmagan</p>\n              <p className=\"text-sm\">Yuqoridagi tugma orqali mahsulot qo'shing</p>\n            </div>\n          ) : (\n            <div className=\"space-y-3\">\n              {products.map((product) => (\n                <div key={product.id} className=\"flex items-center justify-between p-4 border border-neutral-200 rounded-lg\">\n                  <div className=\"flex items-center space-x-4\">\n                    {product.imagePreview && (\n                      <img\n                        src={product.imagePreview}\n                        alt={product.productName}\n                        className=\"h-12 w-12 object-cover rounded-lg border\"\n                      />\n                    )}\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-medium text-neutral-900\">{product.productName}</h4>\n                      <p className=\"text-sm text-neutral-600\">Miqdor: {product.expectedQuantity}</p>\n                      {product.estimatedPrice && (\n                        <p className=\"text-sm text-neutral-600\">Narx: {Number(product.estimatedPrice).toLocaleString()} so'm</p>\n                      )}\n                      {product.description && (\n                        <p className=\"text-xs text-neutral-500 mt-1\">{product.description}</p>\n                      )}\n                    </div>\n                  </div>\n                  <Button\n                    type=\"button\"\n                    variant=\"destructive\"\n                    size=\"sm\"\n                    onClick={() => removeProduct(product.id)}\n                    data-testid={`button-remove-product-${product.id}`}\n                  >\n                    <X className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Submit Section */}\n      {products.length > 0 && (\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <Badge className={urgencyColors[urgencyLevel as keyof typeof urgencyColors]}>\n                  {urgencyLevel === 'low' && 'Kam muhim'}\n                  {urgencyLevel === 'normal' && 'O\\'rtacha'}\n                  {urgencyLevel === 'high' && 'Muhim'}\n                  {urgencyLevel === 'urgent' && 'Juda muhim'}\n                </Badge>\n                {urgencyLevel === 'urgent' && (\n                  <div className=\"flex items-center space-x-1 text-red-600\">\n                    <AlertCircle className=\"h-4 w-4\" />\n                    <span className=\"text-sm\">Tezkor ko'rib chiqiladi</span>\n                  </div>\n                )}\n              </div>\n              \n              <Button \n                onClick={handleSubmitAll} \n                disabled={createRequestMutation.isPending}\n                data-testid=\"button-submit-all-requests\"\n                className=\"bg-primary hover:bg-primary/90\"\n              >\n                {createRequestMutation.isPending ? \"Yuborilmoqda...\" : `${products.length} ta So'rov Yuborish`}\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":15109},"client/src/components/fulfillment-calculator.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Calculator, TrendingUp, Target, DollarSign, Zap, Crown, Package, Truck } from \"lucide-react\";\n\ninterface FulfillmentResult {\n  tierName: string;\n  fixedPayment: number;\n  commissionRate: number;\n  marketplaceCommissionRate: number;\n  commissionAmount: number;\n  totalFulfillmentFee: number;\n  partnerProfit: number;\n  profitPercentage: number;\n  netProfit: number;\n  marketplaceCommission: number;\n  logisticsFee: number;\n  sptCost: number;\n  tax: number;\n}\n\ninterface FulfillmentCalculatorProps {\n  className?: string;\n}\n\n// Haqiqiy Fulfillment model - 4-darajali pricing\nconst FULFILLMENT_TIERS = {\n  starter_pro: {\n    name: \"Starter Pro\",\n    fixedPayment: 0, // Risksiz tarif\n    commissionRanges: [\n      { min: 0, max: 10000000, rate: 45 }, // 45% - 0-10M\n      { min: 10000000, max: 50000000, rate: 35 }, // 35% - 10M-50M\n      { min: 50000000, max: Infinity, rate: 30 } // 30% - 50M+\n    ]\n  },\n  business_standard: {\n    name: \"Business Standard\", \n    fixedPayment: 3500000, // 3.5M som\n    commissionRanges: [\n      { min: 0, max: 20000000, rate: 25 }, // 25% - 0-20M\n      { min: 20000000, max: 100000000, rate: 20 }, // 20% - 20M-100M  \n      { min: 100000000, max: Infinity, rate: 18 } // 18% - 100M+\n    ]\n  },\n  professional_plus: {\n    name: \"Professional Plus\",\n    fixedPayment: 6000000, // 6M som\n    commissionRanges: [\n      { min: 0, max: 50000000, rate: 20 }, // 20% - 0-50M\n      { min: 50000000, max: 200000000, rate: 17 }, // 17% - 50M-200M\n      { min: 200000000, max: Infinity, rate: 15 } // 15% - 200M+\n    ]\n  },\n  enterprise_elite: {\n    name: \"Enterprise Elite\",\n    fixedPayment: 10000000, // 10M som\n    commissionRanges: [\n      { min: 0, max: 100000000, rate: 18 }, // 18% - 0-100M\n      { min: 100000000, max: 500000000, rate: 15 }, // 15% - 100M-500M\n      { min: 500000000, max: Infinity, rate: 12 } // 12% - 500M+\n    ]\n  }\n};\n\n// Uzum Market 2024 haqiqiy komissiya stavkalari (kategoriya + narx asosida)\nconst UZUM_MARKETPLACE_CATEGORIES = {\n  // 1-iyundan 25%dan 10%ga tushirilgan kategoriyalar\n  electronics: { name: \"Elektronika\", getCommission: (price: number) => price > 5000000 ? 3 : (price > 50000 ? 10 : 25) },\n  baby: { name: \"Bolalar kiyim-kechak\", getCommission: (price: number) => price > 5000000 ? 3 : (price > 50000 ? 10 : 25) },\n  home: { name: \"Uy-ro'zg'or mollari\", getCommission: (price: number) => price > 5000000 ? 3 : (price > 50000 ? 10 : 25) },\n  garden: { name: \"Bog' uchun mollar\", getCommission: (price: number) => price > 5000000 ? 3 : (price > 50000 ? 10 : 25) },\n  appliances: { name: \"Konditsionerlar\", getCommission: (price: number) => price > 5000000 ? 3 : (price > 50000 ? 10 : 25) },\n  stabilizers: { name: \"Kuchlanish stabilizatorlari\", getCommission: (price: number) => price > 5000000 ? 3 : (price > 50000 ? 10 : 25) },\n  \n  // Umumiy kategoriyalar (3-35% oralig'ida)\n  clothing: { name: \"Kiyim-kechak\", getCommission: (price: number) => price > 5000000 ? 3 : (price > 50000 ? 15 : 30) },\n  beauty: { name: \"Go'zallik\", getCommission: (price: number) => price > 5000000 ? 3 : (price > 50000 ? 18 : 35) },\n  books: { name: \"Kitoblar\", getCommission: (price: number) => price > 5000000 ? 3 : (price > 50000 ? 8 : 20) },\n  sports: { name: \"Sport\", getCommission: (price: number) => price > 5000000 ? 3 : (price > 50000 ? 12 : 25) },\n  automotive: { name: \"Avto\", getCommission: (price: number) => price > 5000000 ? 3 : (price > 50000 ? 10 : 22) },\n  jewelry: { name: \"Zargarlik\", getCommission: (price: number) => price > 5000000 ? 3 : (price > 50000 ? 20 : 35) },\n  health: { name: \"Salomatlik\", getCommission: (price: number) => price > 5000000 ? 3 : (price > 50000 ? 16 : 30) },\n  furniture: { name: \"Mebel\", getCommission: (price: number) => price > 5000000 ? 3 : (price > 50000 ? 12 : 25) },\n  other: { name: \"Boshqa\", getCommission: (price: number) => price > 5000000 ? 3 : (price > 50000 ? 12 : 25) }\n};\n\n// Uzum Market FBO logistika haqlari (rasm asosida to'liq sodda tizim)\nconst UZUM_LOGISTICS_FEES = {\n  kgt: { name: \"KGT (99,999 so'm gacha)\", fee: 4000 },\n  ogt: { name: \"O'GT (100k+ so'm)\", fee: 6000 },\n  ygt_middle: { name: \"YGT o'rta (sim-kartalar)\", fee: 8000 },\n  ygt_large: { name: \"YGT katta gabarit\", fee: 20000 }\n};\n\nexport function FulfillmentCalculator({ className }: FulfillmentCalculatorProps) {\n  const [selectedTier, setSelectedTier] = useState<keyof typeof FULFILLMENT_TIERS>(\"starter_pro\");\n  const [salesInput, setSalesInput] = useState<string>(\"20,000,000\");\n  const [costInput, setCostInput] = useState<string>(\"12,000,000\");\n  const [quantityInput, setQuantityInput] = useState<string>(\"1\");\n  const [logisticsSize, setLogisticsSize] = useState<keyof typeof UZUM_LOGISTICS_FEES>(\"ogt\");\n  const [commissionRate, setCommissionRate] = useState<string>(\"3\");\n  const [result, setResult] = useState<FulfillmentResult | null>(null);\n\n  // Format number input with commas\n  const formatNumberInput = (value: string): string => {\n    const numbers = value.replace(/\\D/g, '');\n    const cleanNumbers = numbers.replace(/^0+/, '') || '0';\n    return cleanNumbers.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n  };\n\n  const parseNumberInput = (value: string): number => {\n    return parseInt(value.replace(/,/g, '') || '0', 10);\n  };\n\n  const handleSalesInputChange = (value: string) => {\n    const formatted = formatNumberInput(value);\n    setSalesInput(formatted);\n  };\n\n  const handleCostInputChange = (value: string) => {\n    const formatted = formatNumberInput(value);\n    setCostInput(formatted);\n  };\n\n  // Haqiqiy Fulfillment hisobi\n  const calculateFulfillment = (\n    sales: number, \n    cost: number, \n    quantity: number, \n    tier: keyof typeof FULFILLMENT_TIERS,\n    logisticsKey: keyof typeof UZUM_LOGISTICS_FEES,\n    commissionPercentage: number\n  ): FulfillmentResult => {\n    const tierConfig = FULFILLMENT_TIERS[tier];\n    const marketplaceCommissionRate = commissionPercentage;\n    const logisticsPerItem = UZUM_LOGISTICS_FEES[logisticsKey].fee;\n    \n    // Marketplace harajatlari (sotuv narxidan hisoblanadi)\n    const marketplaceCommission = (sales * marketplaceCommissionRate) / 100;\n    const logisticsFee = logisticsPerItem * quantity;\n    const sptCost = 2000 * quantity; // SPT harajati har bir mahsulot uchun 2000 som\n    const tax = sales * 0.03; // 3% soliq sotuv narxidan\n    \n    // Sof foyda = Sotish - Xarid - SPT - Marketplace komissiya - Logistika - Soliq\n    const netProfit = sales - cost - sptCost - marketplaceCommission - logisticsFee - tax;\n    \n    // Fulfillment komissiyasi sof foydadan\n    let commissionRate = 0;\n    let commissionAmount = 0;\n    \n    if (netProfit > 0) {\n      // Sof foyda bo'yicha tegishli tarif aniqlanadi\n      const range = tierConfig.commissionRanges.find(r => netProfit >= r.min && netProfit < r.max);\n      if (range) {\n        commissionRate = range.rate;\n        commissionAmount = (netProfit * commissionRate) / 100;\n      }\n    }\n    \n    // Jami fulfillment haqi = Fixed to'lov + sof foydadan komissiya\n    const totalFulfillmentFee = tierConfig.fixedPayment + commissionAmount;\n    \n    // Hamkor foyda = Sof foyda - Fulfillment haqi\n    const partnerProfit = netProfit - totalFulfillmentFee;\n    const profitPercentage = sales > 0 ? (partnerProfit / sales) * 100 : 0;\n\n    return {\n      tierName: tierConfig.name,\n      fixedPayment: tierConfig.fixedPayment,\n      commissionRate,\n      marketplaceCommissionRate,\n      commissionAmount,\n      totalFulfillmentFee,\n      partnerProfit,\n      profitPercentage,\n      netProfit,\n      marketplaceCommission,\n      logisticsFee,\n      sptCost,\n      tax\n    };\n  };\n\n  useEffect(() => {\n    const sales = parseNumberInput(salesInput);\n    const cost = parseNumberInput(costInput);\n    const quantity = parseInt(quantityInput || '1', 10);\n    const commission = parseFloat(commissionRate) || 0;\n    const calculatedResult = calculateFulfillment(sales, cost, quantity, selectedTier, logisticsSize, commission);\n    setResult(calculatedResult);\n  }, [salesInput, costInput, quantityInput, selectedTier, logisticsSize, commissionRate]);\n\n  const formatSom = (amount: number): string => {\n    return new Intl.NumberFormat('uz-UZ').format(Math.round(amount)) + ' so\\'m';\n  };\n\n  const getTierIcon = (tier: keyof typeof FULFILLMENT_TIERS) => {\n    switch (tier) {\n      case 'starter_pro': return <Zap className=\"h-4 w-4\" />;\n      case 'business_standard': return <Target className=\"h-4 w-4\" />;\n      case 'professional_plus': return <TrendingUp className=\"h-4 w-4\" />;\n      case 'enterprise_elite': return <Crown className=\"h-4 w-4\" />;\n      default: return <Calculator className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getTierColor = (tier: keyof typeof FULFILLMENT_TIERS) => {\n    switch (tier) {\n      case 'starter_pro': return 'text-green-600';\n      case 'business_standard': return 'text-blue-600';\n      case 'professional_plus': return 'text-purple-600';\n      case 'enterprise_elite': return 'text-amber-600';\n      default: return 'text-gray-600';\n    }\n  };\n\n  return (\n    <Card className={`w-full ${className}`}>\n      <CardHeader className=\"text-center\">\n        <CardTitle className=\"flex items-center justify-center gap-2\">\n          <Calculator className=\"h-6 w-6 text-primary\" />\n          Fulfillment Foyda Kalkulyatori\n        </CardTitle>\n        <CardDescription>\n          Haqiqiy Uzum Market FBO modeli asosida - marketplace komissiyalari va logistika harajatlari hisobida\n        </CardDescription>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-6\">\n        {/* Tier Selection */}\n        <div className=\"space-y-2\">\n          <Label>Fulfillment Tarifi</Label>\n          <Select value={selectedTier} onValueChange={(value: keyof typeof FULFILLMENT_TIERS) => setSelectedTier(value)}>\n            <SelectTrigger>\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              {Object.entries(FULFILLMENT_TIERS).map(([key, tier]) => (\n                <SelectItem key={key} value={key}>\n                  <div className=\"flex items-center gap-2\">\n                    {getTierIcon(key as keyof typeof FULFILLMENT_TIERS)}\n                    <span>{tier.name}</span>\n                    <Badge variant=\"outline\" className={getTierColor(key as keyof typeof FULFILLMENT_TIERS)}>\n                      {tier.fixedPayment > 0 ? formatSom(tier.fixedPayment) : 'Risksiz'}\n                    </Badge>\n                  </div>\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 gap-4\">\n          {/* Product Details */}\n          <div className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label>Sotish Narxi (so'm)</Label>\n              <Input\n                type=\"text\"\n                value={salesInput}\n                onChange={(e) => handleSalesInputChange(e.target.value)}\n                placeholder=\"20,000,000\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label>Xarid Narxi (so'm)</Label>\n              <Input\n                type=\"text\"\n                value={costInput}\n                onChange={(e) => handleCostInputChange(e.target.value)}\n                placeholder=\"12,000,000\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label>Miqdor</Label>\n              <Input\n                type=\"number\"\n                value={quantityInput}\n                onChange={(e) => setQuantityInput(e.target.value)}\n                placeholder=\"1\"\n                min=\"1\"\n              />\n            </div>\n          </div>\n\n          {/* Marketplace Settings */}\n          <div className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"commissionRate\">Marketplace Komissiya (%)</Label>\n              <Input\n                id=\"commissionRate\"\n                type=\"number\"\n                value={commissionRate}\n                onChange={(e) => setCommissionRate(e.target.value)}\n                placeholder=\"3\"\n                min=\"0\"\n                max=\"35\"\n                step=\"0.1\"\n                className=\"w-full\"\n              />\n              <div className=\"text-xs text-gray-600\">\n                Marketplace seller panelida ko'rsatilgan aniq komissiya foizini kiriting\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label>Logistika Gabariti</Label>\n              <Select value={logisticsSize} onValueChange={(value: keyof typeof UZUM_LOGISTICS_FEES) => setLogisticsSize(value)}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {Object.entries(UZUM_LOGISTICS_FEES).map(([key, log]) => (\n                    <SelectItem key={key} value={key}>\n                      <div className=\"flex items-center justify-between w-full\">\n                        <span>{log.name}</span>\n                        <Badge variant=\"outline\">{formatSom(log.fee)}</Badge>\n                      </div>\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </div>\n\n        {/* Results */}\n        {result && (\n          <div className=\"space-y-4 pt-4 border-t\">\n            <h3 className=\"text-lg font-semibold text-center\">Foyda Hisobi - {result.tierName}</h3>\n            \n            {/* Marketplace Harajatlari */}\n            <Card className=\"bg-red-50 border-red-200\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm text-red-700 flex items-center gap-2\">\n                  <Package className=\"h-4 w-4\" />\n                  Marketplace Harajatlari (hamkordan undiriladi)\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span>Marketplace komissiya ({result.marketplaceCommissionRate}%):</span>\n                  <span className=\"font-medium text-red-600\">{formatSom(result.marketplaceCommission)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>SPT harajati (2k som/dona):</span>\n                  <span className=\"font-medium text-red-600\">{formatSom(result.sptCost)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Logistika ({UZUM_LOGISTICS_FEES[logisticsSize].name}):</span>\n                  <span className=\"font-medium text-red-600\">{formatSom(result.logisticsFee)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Soliq (3%):</span>\n                  <span className=\"font-medium text-red-600\">{formatSom(result.tax)}</span>\n                </div>\n                <Separator />\n                <div className=\"flex justify-between font-semibold\">\n                  <span>Sof Foyda:</span>\n                  <span className={result.netProfit > 0 ? \"text-green-600\" : \"text-red-600\"}>\n                    {formatSom(result.netProfit)}\n                  </span>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Fulfillment Harajatlari */}\n            <Card className=\"bg-blue-50 border-blue-200\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm text-blue-700 flex items-center gap-2\">\n                  <Truck className=\"h-4 w-4\" />\n                  Fulfillment Harajatlari (bizning xizmat)\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span>Fixed to'lov:</span>\n                  <span className=\"font-medium text-blue-600\">{formatSom(result.fixedPayment)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Komissiya sof foydadan ({result.commissionRate}%):</span>\n                  <span className=\"font-medium text-blue-600\">{formatSom(result.commissionAmount)}</span>\n                </div>\n                <Separator />\n                <div className=\"flex justify-between font-semibold\">\n                  <span>Jami Fulfillment haqi:</span>\n                  <span className=\"text-blue-600\">{formatSom(result.totalFulfillmentFee)}</span>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Final Result */}\n            <Card className=\"bg-green-50 border-green-200\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm text-green-700 flex items-center gap-2\">\n                  <DollarSign className=\"h-4 w-4\" />\n                  Hamkor Final Foyda\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-lg font-semibold\">Sizning foydangiz:</span>\n                  <span className={`text-2xl font-bold ${result.partnerProfit > 0 ? 'text-green-600' : 'text-red-600'}`}>\n                    {formatSom(result.partnerProfit)}\n                  </span>\n                </div>\n                <div className=\"flex justify-between text-sm text-neutral-600\">\n                  <span>Foyda foizi:</span>\n                  <span className={result.profitPercentage > 0 ? 'text-green-600' : 'text-red-600'}>\n                    {result.profitPercentage.toFixed(1)}%\n                  </span>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":18262},"client/src/components/product-request-form.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Plus, Package } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\ninterface ProductRequestFormProps {\n  onSuccess?: () => void;\n}\n\nexport function ProductRequestForm({ onSuccess }: ProductRequestFormProps) {\n  const { toast } = useToast();\n  const [formData, setFormData] = useState({\n    productName: \"\",\n    description: \"\",\n    expectedQuantity: \"\",\n    estimatedPrice: \"\",\n    supplierInfo: \"\",\n    urgencyLevel: \"normal\",\n  });\n\n  const createRequestMutation = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      await apiRequest(\"/api/product-requests\", \"POST\", {\n        productName: data.productName,\n        description: data.description,\n        expectedQuantity: parseInt(data.expectedQuantity) || 1,\n        estimatedPrice: parseFloat(data.estimatedPrice) || 0,\n        supplierInfo: data.supplierInfo,\n        urgencyLevel: data.urgencyLevel,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/product-requests\"] });\n      toast({\n        title: \"Muvaffaqiyat\",\n        description: \"Mahsulot so'rovi muvaffaqiyatli yuborildi. Admin ko'rib chiqadi.\",\n      });\n      setFormData({\n        productName: \"\",\n        description: \"\",\n        expectedQuantity: \"\",\n        estimatedPrice: \"\",\n        supplierInfo: \"\",\n        urgencyLevel: \"normal\",\n      });\n      onSuccess?.();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Xatolik\",\n        description: \"So'rov yuborishda xatolik yuz berdi. Qayta urinib ko'ring.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!formData.productName.trim()) {\n      toast({\n        title: \"Xatolik\",\n        description: \"Mahsulot nomini kiriting\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    createRequestMutation.mutate(formData);\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Package className=\"w-5 h-5\" />\n          Yangi Mahsulot So'rovi\n        </CardTitle>\n        <CardDescription>\n          Katalogga qo'shmoqchi bo'lgan mahsulot haqida ma'lumot bering\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"productName\">Mahsulot Nomi *</Label>\n              <Input\n                id=\"productName\"\n                value={formData.productName}\n                onChange={(e) => setFormData(prev => ({ ...prev, productName: e.target.value }))}\n                placeholder=\"Masalan: Xiaomi Redmi Note 12\"\n                required\n                data-testid=\"input-product-name\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"expectedQuantity\">Kutilgan Miqdor</Label>\n              <Input\n                id=\"expectedQuantity\"\n                type=\"number\"\n                value={formData.expectedQuantity}\n                onChange={(e) => setFormData(prev => ({ ...prev, expectedQuantity: e.target.value }))}\n                placeholder=\"Nechta olib kelmoqchisiz?\"\n                min=\"1\"\n                data-testid=\"input-expected-quantity\"\n              />\n            </div>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"estimatedPrice\">Taxminiy Narx (so'm)</Label>\n              <Input\n                id=\"estimatedPrice\"\n                type=\"number\"\n                value={formData.estimatedPrice}\n                onChange={(e) => setFormData(prev => ({ ...prev, estimatedPrice: e.target.value }))}\n                placeholder=\"Donasi qancha turadi?\"\n                min=\"0\"\n                step=\"0.01\"\n                data-testid=\"input-estimated-price\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"urgencyLevel\">Shoshilish Darajasi</Label>\n              <select\n                id=\"urgencyLevel\"\n                value={formData.urgencyLevel}\n                onChange={(e) => setFormData(prev => ({ ...prev, urgencyLevel: e.target.value }))}\n                className=\"w-full px-3 py-2 border border-input bg-background rounded-md text-sm\"\n                data-testid=\"select-urgency-level\"\n              >\n                <option value=\"low\">Past - 1-2 hafta</option>\n                <option value=\"normal\">O'rtacha - 3-5 kun</option>\n                <option value=\"high\">Yuqori - 1-2 kun</option>\n                <option value=\"urgent\">Shoshilinch - Bugun</option>\n              </select>\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"description\">Mahsulot Tavsifi</Label>\n            <Textarea\n              id=\"description\"\n              value={formData.description}\n              onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n              placeholder=\"Mahsulot haqida batafsil ma'lumot, xususiyatlari, rangi, o'lchami va boshqalar...\"\n              className=\"min-h-[100px]\"\n              data-testid=\"textarea-description\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"supplierInfo\">Ta'minotchi Ma'lumoti (ixtiyoriy)</Label>\n            <Input\n              id=\"supplierInfo\"\n              value={formData.supplierInfo}\n              onChange={(e) => setFormData(prev => ({ ...prev, supplierInfo: e.target.value }))}\n              placeholder=\"Qayerdan olib kelmoqchisiz? Havola yoki ma'lumot...\"\n              data-testid=\"input-supplier-info\"\n            />\n          </div>\n\n          <Button \n            type=\"submit\" \n            disabled={createRequestMutation.isPending}\n            className=\"w-full\"\n            data-testid=\"button-submit-request\"\n          >\n            <Plus className=\"w-4 h-4 mr-2\" />\n            {createRequestMutation.isPending ? \"Yuborilmoqda...\" : \"So'rov Yuborish\"}\n          </Button>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":7041},"client/src/components/stats-display.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { TrendingUp, Package, ShoppingCart, DollarSign, Users, AlertCircle, Target, Star } from \"lucide-react\";\n\ninterface PartnerStats {\n  totalOrders: number;\n  activeProducts: number;\n  totalRevenue: number;\n  monthlyRevenue: number;\n  commission: number;\n}\n\ninterface AdminStats {\n  totalPartners: number;\n  pendingRequests: number;\n  totalRevenue: number;\n  totalOrders: number;\n}\n\ninterface StatsDisplayProps {\n  stats: PartnerStats | AdminStats;\n  type: 'partner' | 'admin';\n  className?: string;\n}\n\nexport function StatsDisplay({ stats, type, className }: StatsDisplayProps) {\n  // Handle undefined stats with default values\n  if (!stats) {\n    stats = type === 'admin' \n      ? { totalPartners: 0, pendingRequests: 0, totalRevenue: 0, totalOrders: 0 }\n      : { totalOrders: 0, activeProducts: 0, totalRevenue: 0, monthlyRevenue: 0, commission: 0 };\n  }\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('ru-RU', {\n      style: 'currency',\n      currency: 'RUB',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const formatNumber = (num: number) => {\n    return new Intl.NumberFormat('ru-RU').format(num);\n  };\n\n  // Determine tier for partner stats\n  const getTier = (revenue: number) => {\n    if (revenue >= 50000000) return { name: 'Premium', color: 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300', icon: Star };\n    if (revenue >= 25000000) return { name: 'Professional', color: 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300', icon: TrendingUp };\n    return { name: 'Basic', color: 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300', icon: Target };\n  };\n\n  if (type === 'partner') {\n    const partnerStats = stats as PartnerStats;\n    const tier = getTier(partnerStats.totalRevenue);\n    const TierIcon = tier.icon;\n\n    return (\n      <div className={`grid gap-4 md:grid-cols-2 lg:grid-cols-4 ${className}`}>\n        <Card data-testid=\"card-total-orders\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Orders</CardTitle>\n            <ShoppingCart className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-orders-count\">\n              {formatNumber(partnerStats.totalOrders)}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Lifetime orders processed\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-active-products\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Products</CardTitle>\n            <Package className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-products-count\">\n              {formatNumber(partnerStats.activeProducts)}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Approved products\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-total-revenue\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Revenue</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600 dark:text-green-400\" data-testid=\"text-total-revenue\">\n              {formatCurrency(partnerStats.totalRevenue)}\n            </div>\n            <div className=\"flex items-center gap-2 mt-1\">\n              <Badge className={tier.color}>\n                <TierIcon className=\"h-3 w-3 mr-1\" />\n                {tier.name}\n              </Badge>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-commission\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Commission</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-600 dark:text-blue-400\" data-testid=\"text-commission\">\n              {formatCurrency(partnerStats.commission)}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Current month earnings\n            </p>\n          </CardContent>\n        </Card>\n\n        {partnerStats.monthlyRevenue !== undefined && (\n          <Card className=\"md:col-span-2\" data-testid=\"card-monthly-revenue\">\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Monthly Performance</CardTitle>\n              <CardDescription>Current month revenue breakdown</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm font-medium\">Monthly Revenue:</span>\n                <span className=\"text-lg font-bold\" data-testid=\"text-monthly-revenue\">\n                  {formatCurrency(partnerStats.monthlyRevenue)}\n                </span>\n              </div>\n              <Separator />\n              <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                <div>\n                  <span className=\"text-muted-foreground\">Base Payment:</span>\n                  <p className=\"font-semibold\">{formatCurrency(5500000)}</p>\n                </div>\n                <div>\n                  <span className=\"text-muted-foreground\">Performance Bonus:</span>\n                  <p className=\"font-semibold\">\n                    {formatCurrency(Math.max(0, partnerStats.commission - 5500000))}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    );\n  }\n\n  // Admin stats display\n  const adminStats = stats as AdminStats;\n  \n  return (\n    <div className={`grid gap-4 md:grid-cols-2 lg:grid-cols-4 ${className}`}>\n      <Card data-testid=\"card-total-partners\">\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Total Partners</CardTitle>\n          <Users className=\"h-4 w-4 text-muted-foreground\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold\" data-testid=\"text-partners-count\">\n            {formatNumber(adminStats.totalPartners)}\n          </div>\n          <p className=\"text-xs text-muted-foreground\">\n            Active partner accounts\n          </p>\n        </CardContent>\n      </Card>\n\n      <Card data-testid=\"card-pending-requests\">\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Pending Requests</CardTitle>\n          <AlertCircle className=\"h-4 w-4 text-muted-foreground\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold text-orange-600 dark:text-orange-400\" data-testid=\"text-pending-count\">\n            {formatNumber(adminStats.pendingRequests)}\n          </div>\n          <p className=\"text-xs text-muted-foreground\">\n            Awaiting approval\n          </p>\n        </CardContent>\n      </Card>\n\n      <Card data-testid=\"card-platform-revenue\">\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Platform Revenue</CardTitle>\n          <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold text-green-600 dark:text-green-400\" data-testid=\"text-platform-revenue\">\n            {formatCurrency(adminStats.totalRevenue)}\n          </div>\n          <p className=\"text-xs text-muted-foreground\">\n            Total platform revenue\n          </p>\n        </CardContent>\n      </Card>\n\n      <Card data-testid=\"card-platform-orders\">\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Total Orders</CardTitle>\n          <ShoppingCart className=\"h-4 w-4 text-muted-foreground\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold\" data-testid=\"text-platform-orders\">\n            {formatNumber(adminStats.totalOrders)}\n          </div>\n          <p className=\"text-xs text-muted-foreground\">\n            Platform-wide orders\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":9092},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { getQueryFn } from \"@/lib/queryClient\";\n\nexport function useAuth() {\n  const { data: user, isLoading, error } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n    retry: false,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  return {\n    user: user || null,\n    isLoading,\n    isAuthenticated: !!user && !error,\n  };\n}\n","size_bytes":429},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin-dashboard.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { ChatSystem } from \"@/components/chat-system\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { \n  Users, \n  Package, \n  ShoppingCart, \n  BarChart3,\n  Plus,\n  LogOut,\n  MessageCircle,\n  CheckCircle,\n  Clock,\n  X,\n  Eye,\n  UserCheck,\n  Boxes,\n  TrendingUp,\n  Edit,\n  Download,\n  FileText,\n  AlertTriangle,\n  Warehouse,\n  Building,\n  TrendingDown,\n  DollarSign,\n  UserPlus,\n  Store,\n  User,\n  Loader2\n} from \"lucide-react\";\nimport type { PartnerWithUser, ProductRequestWithDetails, OrderWithDetails, Product, ProductRequest } from \"@shared/schema\";\nimport { exportPartnersToExcel, exportInventoryToExcel, exportOrdersToExcel, exportRequestsToExcel } from \"@/utils/excelExport\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, LineChart, Line, PieChart, Pie, Cell } from 'recharts';\n\nexport default function AdminDashboard() {\n  const { user, isLoading } = useAuth();\n  const { toast } = useToast();\n  const [selectedPartner, setSelectedPartner] = useState<PartnerWithUser | null>(null);\n  const [warehouseModalOpen, setWarehouseModalOpen] = useState(false);\n  const [partnerProfileModalOpen, setPartnerProfileModalOpen] = useState(false);\n  const [uzumCredentials, setUzumCredentials] = useState({ apiKey: '', secretKey: '', shopId: '' });\n  const [yandexCredentials, setYandexCredentials] = useState({ apiKey: '', campaignId: '', clientId: '' });\n  const [connectingMarketplace, setConnectingMarketplace] = useState('');\n  const [syncingData, setSyncingData] = useState(false);\n  const [newProduct, setNewProduct] = useState({\n    name: \"\",\n    description: \"\",\n    sku: \"\",\n    price: \"\",\n    stockQuantity: \"\",\n  });\n\n  // Redirect if not authenticated or not admin\n  useEffect(() => {\n    if (!isLoading && (!user || (user as any).role !== 'admin')) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"Admin access required. Redirecting...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = user ? \"/\" : \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [user, isLoading, toast]);\n\n  // Fetch admin stats\n  const { data: stats = {}, isLoading: statsLoading } = useQuery<any>({\n    queryKey: [\"/api/analytics/admin-stats\"],\n    retry: false,\n  });\n\n  // Fetch partners\n  const { data: partners = [], isLoading: partnersLoading } = useQuery<any[]>({\n    queryKey: [\"/api/partners\"],\n    retry: false,\n  });\n\n  // Fetch product requests\n  const { data: productRequests = [], isLoading: requestsLoading } = useQuery<any[]>({\n    queryKey: [\"/api/product-requests\"],\n    retry: false,\n  });\n\n  // Fetch orders\n  const { data: orders = [], isLoading: ordersLoading } = useQuery<any[]>({\n    queryKey: [\"/api/orders\"],\n    retry: false,\n  });\n\n  // Fetch products\n  const { data: products = [], isLoading: productsLoading } = useQuery<any[]>({\n    queryKey: [\"/api/products\"],\n    retry: false,\n  });\n\n  // Fetch dashboard charts data\n  const { data: chartsData = {}, isLoading: chartsLoading } = useQuery<any>({\n    queryKey: [\"/api/analytics/dashboard-charts\"],\n    retry: false,\n  });\n\n  // Partner registration requests query\n  const { data: registrationRequests = [], isLoading: isLoadingRegistrationRequests } = useQuery<any[]>({\n    queryKey: ['/api/partner-registration-requests'],\n    retry: false,\n  });\n\n  // Partner legal info requests query\n  const { data: activationRequests = [], isLoading: isLoadingLegalInfoRequests } = useQuery<any[]>({\n    queryKey: ['/api/partner-legal-info-requests'],\n    retry: false,\n  });\n\n  // Mock warehouse data for selected partner\n  const warehouseLoading = false;\n  const warehouseData = selectedPartner ? {\n    summary: {\n      totalProducts: Math.floor(Math.random() * 20) + 5,\n      totalStock: Math.floor(Math.random() * 200) + 50,\n      totalValue: Math.floor(Math.random() * 5000000) + 1000000,\n      totalRevenue: Math.floor(Math.random() * 2000000) + 500000\n    },\n    products: products.slice(0, 3).map(product => ({\n      ...product,\n      currentStock: product.stockQuantity || Math.floor(Math.random() * 50) + 1,\n      costPrice: Math.floor(Math.random() * 50000) + 10000,\n      stockValue: (product.stockQuantity || 10) * (Math.floor(Math.random() * 50000) + 10000),\n      revenue: Math.floor(Math.random() * 300000) + 50000,\n      profit: Math.floor(Math.random() * 100000) + 20000\n    }))\n  } : null;\n\n  // Approve partner mutation\n  const approvePartnerMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      await apiRequest(\"POST\", `/api/partners/${userId}/approve`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/partners\"] });\n      toast({\n        title: \"Success\",\n        description: \"Partner approved successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to approve partner\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update registration request status mutation\n  const updateRegistrationRequestMutation = useMutation({\n    mutationFn: async ({ id, status, rejectionReason }: { id: string; status: string; rejectionReason?: string }) => {\n      await apiRequest(\"PATCH\", `/api/partner-registration-requests/${id}`, { status, rejectionReason });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/partner-registration-requests\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/partners\"] });\n      toast({\n        title: \"Muvaffaqiyat\",\n        description: \"So'rov holati yangilandi\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Xato\",\n        description: \"So'rov holatini yangilashda xatolik\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update activation request status mutation  \n  const updateActivationRequestMutation = useMutation({\n    mutationFn: async ({ id, status, rejectionReason }: { id: string; status: string; rejectionReason?: string }) => {\n      await apiRequest(\"PATCH\", `/api/partner-legal-info/${id}/activation`, { status, rejectionReason });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/partner-legal-info-requests\"] });\n      toast({\n        title: \"Muvaffaqiyat\",\n        description: \"Aktivatsiya holati yangilandi\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Xato\",\n        description: \"Aktivatsiya holatini yangilashda xatolik\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Sync marketplace data functions\n  const syncUzumMarketData = async (integrationId: string, dataType: 'products' | 'orders') => {\n    setSyncingData(true);\n    try {\n      const response = await apiRequest('POST', `/api/admin/uzum-market/${integrationId}/sync-${dataType}`, {}) as any;\n      toast({\n        title: \"Muvaffaqiyat\",\n        description: response.message || `${dataType === 'products' ? 'Mahsulotlar' : 'Buyurtmalar'} sinxronlashtirildi`,\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/partners'] });\n    } catch (error) {\n      toast({\n        title: \"Xatolik\",\n        description: `${dataType === 'products' ? 'Mahsulotlar' : 'Buyurtmalar'}ni sinxronlashda xatolik`,\n        variant: \"destructive\",\n      });\n    } finally {\n      setSyncingData(false);\n    }\n  };\n\n  const syncYandexMarketData = async (integrationId: string, dataType: 'products' | 'orders') => {\n    setSyncingData(true);\n    try {\n      const response = await apiRequest('POST', `/api/admin/yandex-market/${integrationId}/sync-${dataType}`, {}) as any;\n      toast({\n        title: \"Muvaffaqiyat\",\n        description: response.message || `${dataType === 'products' ? 'Mahsulotlar' : 'Buyurtmalar'} sinxronlashtirildi`,\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/partners'] });\n    } catch (error) {\n      toast({\n        title: \"Xatolik\",\n        description: `${dataType === 'products' ? 'Mahsulotlar' : 'Buyurtmalar'}ni sinxronlashda xatolik`,\n        variant: \"destructive\",\n      });\n    } finally {\n      setSyncingData(false);\n    }\n  };\n\n  // Connect marketplace function\n  const connectMarketplace = useMutation({\n    mutationFn: async ({ partnerId, marketplace, credentials }: {\n      partnerId: string;\n      marketplace: 'uzum' | 'yandex';\n      credentials: any;\n    }) => {\n      return apiRequest('POST', `/api/admin/partners/${partnerId}/marketplace-integration`, {\n        marketplace,\n        credentials,\n        isActive: true\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Muvaffaqiyat\",\n        description: \"Marketplace muvaffaqiyatli ulandi!\",\n      });\n      setConnectingMarketplace('');\n      setUzumCredentials({ apiKey: '', secretKey: '', shopId: '' });\n      setYandexCredentials({ apiKey: '', campaignId: '', clientId: '' });\n      queryClient.invalidateQueries({ queryKey: ['/api/partners'] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"Session expired. Redirecting to login...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Xatolik\",\n        description: \"Marketplace ulanishda xatolik yuz berdi\",\n        variant: \"destructive\",\n      });\n      setConnectingMarketplace('');\n    },\n  });\n\n  const handleMarketplaceConnect = (marketplace: 'uzum' | 'yandex') => {\n    if (!selectedPartner) return;\n    \n    const credentials = marketplace === 'uzum' ? uzumCredentials : yandexCredentials;\n    \n    // Validate credentials\n    if (marketplace === 'uzum') {\n      const uzumCreds = credentials as { apiKey: string; secretKey: string; shopId: string };\n      if (!uzumCreds.apiKey || !uzumCreds.secretKey || !uzumCreds.shopId) {\n        toast({\n          title: \"Xatolik\",\n          description: \"Barcha maydonlarni to'ldiring\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n    } else {\n      const yandexCreds = credentials as { apiKey: string; campaignId: string; clientId: string };\n      if (!yandexCreds.apiKey || !yandexCreds.campaignId || !yandexCreds.clientId) {\n        toast({\n          title: \"Xatolik\", \n          description: \"Barcha maydonlarni to'ldiring\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n    }\n\n    setConnectingMarketplace(marketplace);\n    connectMarketplace.mutate({\n      partnerId: selectedPartner.id,\n      marketplace,\n      credentials\n    });\n  };\n\n  // Update product request status mutation\n  const updateRequestMutation = useMutation({\n    mutationFn: async ({ id, status, notes }: { id: string; status: string; notes?: string }) => {\n      await apiRequest(\"PUT\", `/api/product-requests/${id}/status`, { status, notes });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/product-requests\"] });\n      toast({\n        title: \"Success\",\n        description: \"Request status updated successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update request status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Create product mutation\n  const createProductMutation = useMutation({\n    mutationFn: async (productData: any) => {\n      await apiRequest(\"POST\", \"/api/products\", productData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      setNewProduct({ name: \"\", description: \"\", sku: \"\", price: \"\", stockQuantity: \"\" });\n      toast({\n        title: \"Success\",\n        description: \"Product created successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to create product\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleApprovePartner = (userId: string) => {\n    approvePartnerMutation.mutate(userId);\n  };\n\n  const handleUpdateRequestStatus = (id: string, status: string, notes?: string) => {\n    updateRequestMutation.mutate({ id, status, notes });\n  };\n\n  const handleCreateProduct = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!newProduct.name || !newProduct.sku || !newProduct.price) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createProductMutation.mutate({\n      ...newProduct,\n      price: parseFloat(newProduct.price),\n      stockQuantity: parseInt(newProduct.stockQuantity) || 0,\n    });\n  };\n\n  const handleLogout = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  const openWarehouseModal = (partner: PartnerWithUser) => {\n    setSelectedPartner(partner);\n    setWarehouseModalOpen(true);\n  };\n\n  const CHART_COLORS = ['#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6'];\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return <Badge variant=\"secondary\" className=\"bg-yellow-100 text-yellow-800\"><Clock className=\"w-3 h-3 mr-1\" />Kutilmoqda</Badge>;\n      case 'approved':\n        return <Badge variant=\"default\" className=\"bg-green-100 text-green-800\"><CheckCircle className=\"w-3 h-3 mr-1\" />Tasdiqlandi</Badge>;\n      case 'rejected':\n        return <Badge variant=\"destructive\"><X className=\"w-3 h-3 mr-1\" />Rad etildi</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  if (isLoading || !user || (user as any).role !== 'admin') {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-neutral-50\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-neutral-600\">Yuklanmoqda...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-neutral-50\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b border-neutral-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center\">\n              <h1 className=\"text-2xl font-bold text-primary\">MarketPlace Pro</h1>\n              <span className=\"ml-4 px-3 py-1 bg-red-100 text-red-800 rounded-full text-sm font-medium\">\n                Admin Panel\n              </span>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-3 h-3 bg-accent rounded-full\"></div>\n                <span className=\"text-sm text-neutral-600\">Online</span>\n              </div>\n              <Button \n                onClick={handleLogout}\n                variant=\"outline\"\n                size=\"sm\"\n                data-testid=\"button-logout\"\n              >\n                <LogOut className=\"w-4 h-4 mr-2\" />\n                Chiqish\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Welcome Section */}\n        <div className=\"mb-8\">\n          <h2 className=\"text-3xl font-bold text-neutral-900 mb-2\">\n            Admin Boshqaruv Paneli\n          </h2>\n          <p className=\"text-neutral-600\">Bugun: {new Date().toLocaleDateString('uz-UZ')}</p>\n        </div>\n\n        {/* Admin Stats Overview */}\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-3 md:gap-4 mb-8\">\n          <Card data-testid=\"stat-partners\">\n            <CardContent className=\"p-3 md:p-4\">\n              <div className=\"flex items-start justify-between gap-2\">\n                <div className=\"min-w-0 flex-1\">\n                  <p className=\"text-xs text-neutral-600 mb-1\">Jami Hamkorlar</p>\n                  <p className=\"text-lg md:text-xl font-bold text-neutral-900\">\n                    {statsLoading ? \"-\" : (stats as any)?.totalPartners || 0}\n                  </p>\n                </div>\n                <div className=\"w-8 h-8 md:w-10 md:h-10 bg-primary/10 rounded-lg flex items-center justify-center flex-shrink-0\">\n                  <Users className=\"h-4 w-4 md:h-5 md:w-5 text-primary\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"stat-sales\">\n            <CardContent className=\"p-3 md:p-4\">\n              <div className=\"flex items-start justify-between gap-2\">\n                <div className=\"min-w-0 flex-1\">\n                  <p className=\"text-xs text-neutral-600 mb-1\">Jami Sotuv</p>\n                  <div className=\"flex flex-col\">\n                    <span className=\"text-sm md:text-lg font-bold text-neutral-900 break-all\">\n                      {chartsLoading ? \"-\" : `${((chartsData as any)?.summary?.totalSales || 0).toLocaleString()}`}\n                    </span>\n                    <span className=\"text-xs text-neutral-500\">so'm</span>\n                  </div>\n                </div>\n                <div className=\"w-8 h-8 md:w-10 md:h-10 bg-green-100 rounded-lg flex items-center justify-center flex-shrink-0\">\n                  <TrendingUp className=\"h-4 w-4 md:h-5 md:w-5 text-green-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"stat-partner-profit\">\n            <CardContent className=\"p-3 md:p-4\">\n              <div className=\"flex items-start justify-between gap-2\">\n                <div className=\"min-w-0 flex-1\">\n                  <p className=\"text-xs text-neutral-600 mb-1\">Hamkorlar Foydasi</p>\n                  <div className=\"flex flex-col\">\n                    <span className=\"text-sm md:text-lg font-bold text-blue-600 break-all\">\n                      {chartsLoading ? \"-\" : `${((chartsData as any)?.summary?.partnerProfit || 0).toLocaleString()}`}\n                    </span>\n                    <span className=\"text-xs text-neutral-500\">so'm</span>\n                  </div>\n                </div>\n                <div className=\"w-8 h-8 md:w-10 md:h-10 bg-blue-100 rounded-lg flex items-center justify-center flex-shrink-0\">\n                  <Users className=\"h-4 w-4 md:h-5 md:w-5 text-blue-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"stat-fulfillment-profit\">\n            <CardContent className=\"p-3 md:p-4\">\n              <div className=\"flex items-start justify-between gap-2\">\n                <div className=\"min-w-0 flex-1\">\n                  <p className=\"text-xs text-neutral-600 mb-1\">Fulfilment Foydasi</p>\n                  <div className=\"flex flex-col\">\n                    <span className=\"text-sm md:text-lg font-bold text-purple-600 break-all\">\n                      {chartsLoading ? \"-\" : `${((chartsData as any)?.summary?.fulfillmentProfit || 0).toLocaleString()}`}\n                    </span>\n                    <span className=\"text-xs text-neutral-500\">so'm</span>\n                  </div>\n                </div>\n                <div className=\"w-8 h-8 md:w-10 md:h-10 bg-purple-100 rounded-lg flex items-center justify-center flex-shrink-0\">\n                  <Warehouse className=\"h-4 w-4 md:h-5 md:w-5 text-purple-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"stat-avg-order\">\n            <CardContent className=\"p-3 md:p-4\">\n              <div className=\"flex items-start justify-between gap-2\">\n                <div className=\"min-w-0 flex-1\">\n                  <p className=\"text-xs text-neutral-600 mb-1\">O'rtacha Buyurtma</p>\n                  <div className=\"flex flex-col\">\n                    <span className=\"text-sm md:text-lg font-bold text-orange-600 break-all\">\n                      {chartsLoading ? \"-\" : `${Math.round((chartsData as any)?.summary?.avgOrderValue || 0).toLocaleString()}`}\n                    </span>\n                    <span className=\"text-xs text-neutral-500\">so'm</span>\n                  </div>\n                </div>\n                <div className=\"w-8 h-8 md:w-10 md:h-10 bg-orange-100 rounded-lg flex items-center justify-center flex-shrink-0\">\n                  <ShoppingCart className=\"h-4 w-4 md:h-5 md:w-5 text-orange-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Admin Tabs */}\n        <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-7\">\n            <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">\n              <BarChart3 className=\"w-4 h-4 mr-2\" />\n              Statistika\n            </TabsTrigger>\n            <TabsTrigger value=\"requests\" data-testid=\"tab-requests\" className=\"relative\">\n              <Package className=\"w-4 h-4 mr-2\" />\n              So'rovlar\n              {/* Show notification if there are pending requests */}\n              {(((productRequests as any[])?.filter((r: any) => r.status === 'pending').length || 0) + \n                ((registrationRequests as any[])?.filter((r: any) => r.status === 'pending').length || 0) + \n                ((activationRequests as any[])?.filter((r: any) => r.activationStatus === 'pending').length || 0)) > 0 && (\n                <span className=\"absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full w-6 h-6 flex items-center justify-center\">\n                  {(((productRequests as any[])?.filter((r: any) => r.status === 'pending').length || 0) + \n                    ((registrationRequests as any[])?.filter((r: any) => r.status === 'pending').length || 0) + \n                    ((activationRequests as any[])?.filter((r: any) => r.activationStatus === 'pending').length || 0))}\n                </span>\n              )}\n            </TabsTrigger>\n            <TabsTrigger value=\"partners\" data-testid=\"tab-partners\">\n              <Users className=\"w-4 h-4 mr-2\" />\n              Hamkorlar\n            </TabsTrigger>\n            <TabsTrigger value=\"fulfillment\" data-testid=\"tab-fulfillment\">\n              <Warehouse className=\"w-4 h-4 mr-2\" />\n              MySklad\n            </TabsTrigger>\n            <TabsTrigger value=\"reports\" data-testid=\"tab-reports\">\n              <FileText className=\"w-4 h-4 mr-2\" />\n              Hisobotlar\n            </TabsTrigger>\n            <TabsTrigger value=\"orders\" data-testid=\"tab-orders\">\n              <ShoppingCart className=\"w-4 h-4 mr-2\" />\n              Buyurtmalar\n            </TabsTrigger>\n            <TabsTrigger value=\"chat\" data-testid=\"tab-chat\">\n              <MessageCircle className=\"w-4 h-4 mr-2\" />\n              Chat\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\" className=\"space-y-6\">\n\n\n            {/* Charts Section */}\n            {chartsLoading ? (\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                {[...Array(4)].map((_, i) => (\n                  <Card key={i}>\n                    <CardHeader>\n                      <div className=\"h-6 bg-neutral-200 rounded w-1/3 animate-pulse\"></div>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"h-[300px] bg-neutral-100 rounded animate-pulse\"></div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : chartsData ? (\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                {/* Monthly Sales & Profit Chart */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-lg flex items-center\">\n                      <BarChart3 className=\"h-5 w-5 mr-2\" />\n                      Oylik Sotuv va Foyda Dinamikasi\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <ResponsiveContainer width=\"100%\" height={300}>\n                      <BarChart data={chartsData.monthlyData}>\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"month\" />\n                        <YAxis \n                          tickFormatter={(value) => {\n                            if (value >= 1000000) {\n                              return `${(value / 1000000).toFixed(1)}M`;\n                            } else if (value >= 1000) {\n                              return `${(value / 1000).toFixed(0)}K`;\n                            }\n                            return value.toString();\n                          }}\n                          width={50}\n                        />\n                        <Tooltip \n                          formatter={(value: number, name: string) => [\n                            `${value.toLocaleString()} so'm`,\n                            name === 'sales' ? 'Sotuv' : 'Foyda'\n                          ]}\n                        />\n                        <Bar dataKey=\"sales\" fill=\"#3b82f6\" name=\"sales\" />\n                        <Bar dataKey=\"profit\" fill=\"#10b981\" name=\"profit\" />\n                      </BarChart>\n                    </ResponsiveContainer>\n                  </CardContent>\n                </Card>\n\n                {/* Category Distribution */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-lg flex items-center\">\n                      <Package className=\"h-5 w-5 mr-2\" />\n                      Kategoriyalar Bo'yicha Taqsimot\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <ResponsiveContainer width=\"100%\" height={300}>\n                      <PieChart>\n                        <Pie\n                          data={chartsData.categoryData}\n                          cx=\"50%\"\n                          cy=\"50%\"\n                          labelLine={false}\n                          label={({ name, value }) => `${name}: ${value}%`}\n                          outerRadius={80}\n                          fill=\"#8884d8\"\n                          dataKey=\"value\"\n                        >\n                          {chartsData.categoryData.map((entry: any, index: number) => (\n                            <Cell key={`cell-${index}`} fill={CHART_COLORS[index % CHART_COLORS.length]} />\n                          ))}\n                        </Pie>\n                        <Tooltip />\n                      </PieChart>\n                    </ResponsiveContainer>\n                  </CardContent>\n                </Card>\n\n                {/* Partners Growth */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-lg flex items-center\">\n                      <Users className=\"h-5 w-5 mr-2\" />\n                      Hamkorlar Soni O'sishi\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <ResponsiveContainer width=\"100%\" height={300}>\n                      <LineChart data={chartsData.monthlyData}>\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"month\" />\n                        <YAxis \n                          tickFormatter={(value) => {\n                            if (value >= 1000000) {\n                              return `${(value / 1000000).toFixed(1)}M`;\n                            } else if (value >= 1000) {\n                              return `${(value / 1000).toFixed(0)}K`;\n                            }\n                            return value.toString();\n                          }}\n                          width={50}\n                        />\n                        <Tooltip \n                          formatter={(value: number) => [`${value} ta`, 'Hamkorlar']}\n                        />\n                        <Line type=\"monotone\" dataKey=\"partners\" stroke=\"#8b5cf6\" strokeWidth={3} />\n                      </LineChart>\n                    </ResponsiveContainer>\n                  </CardContent>\n                </Card>\n\n                {/* Top Partners */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-lg flex items-center\">\n                      <Building className=\"h-5 w-5 mr-2\" />\n                      Top Hamkorlar\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      {chartsData.topPartners?.map((partner: any, index: number) => (\n                        <div key={partner.name} className=\"flex items-center justify-between p-3 bg-neutral-50 rounded-lg\">\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\n                              <span className=\"text-sm font-semibold text-blue-700\">#{index + 1}</span>\n                            </div>\n                            <span className=\"font-medium\">{partner.name}</span>\n                          </div>\n                          <div className=\"text-right\">\n                            <div className=\"text-sm font-semibold text-green-600\">\n                              {partner.sales.toLocaleString()} so'm\n                            </div>\n                            <div className=\"text-xs text-neutral-500\">\n                              Foyda: +{partner.profit.toLocaleString()} so'm\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            ) : (\n              <Card>\n                <CardContent className=\"text-center py-8\">\n                  <BarChart3 className=\"h-12 w-12 text-neutral-400 mx-auto mb-4\" />\n                  <p className=\"text-neutral-500\">Grafik ma'lumotlari yuklanmadi</p>\n                </CardContent>\n              </Card>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"requests\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n              {/* Partner Registration Requests */}\n              <Card data-testid=\"card-partner-registration-requests\" className=\"relative\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <UserPlus className=\"h-5 w-5\" />\n                      Yangi Hamkor So'rovlari\n                      {registrationRequests?.filter(r => r.status === 'pending').length > 0 && (\n                        <span className=\"bg-red-500 text-white text-xs px-2 py-1 rounded-full\">\n                          +{registrationRequests.filter(r => r.status === 'pending').length}\n                        </span>\n                      )}\n                    </div>\n                    <Badge variant=\"outline\">{registrationRequests?.length || 0}</Badge>\n                  </CardTitle>\n                </CardHeader>\n              <CardContent>\n                {registrationRequests?.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <UserPlus className=\"h-12 w-12 text-neutral-400 mx-auto mb-4\" />\n                    <p className=\"text-neutral-500\">Yangi hamkor ro'yxatdan o'tish so'rovlari yo'q</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {registrationRequests?.map((request: any) => (\n                      <div key={request.id} className=\"border rounded-lg p-4\">\n                        <div className=\"flex justify-between items-start mb-2\">\n                          <div>\n                            <h4 className=\"font-semibold\">{request.fullName}</h4>\n                            <p className=\"text-sm text-neutral-600\">Login: {request.login}</p>\n                            <p className=\"text-sm text-neutral-600\">Telefon: {request.phoneNumber}</p>\n                            <p className=\"text-sm text-neutral-600\">Manzil: {request.address}</p>\n                          </div>\n                          <Badge variant={request.status === 'pending' ? 'secondary' : \n                                        request.status === 'approved' ? 'default' : 'destructive'}>\n                            {request.status === 'pending' ? 'Kutilmoqda' : \n                             request.status === 'approved' ? 'Tasdiqlangan' : 'Rad etilgan'}\n                          </Badge>\n                        </div>\n                        <div className=\"text-sm text-neutral-600 mb-3\">\n                          <p><strong>Mahsulot Toifasi:</strong> {request.productCategory}</p>\n                          <p><strong>Investitsiya:</strong> {request.investmentAmount} so'm</p>\n                          {request.businessExperience && (\n                            <p><strong>Tajriba:</strong> {request.businessExperience}</p>\n                          )}\n                        </div>\n                        {request.status === 'pending' && (\n                          <div className=\"flex gap-2\">\n                            <Button\n                              size=\"sm\"\n                              onClick={() => updateRegistrationRequestMutation.mutate({\n                                id: request.id,\n                                status: 'approved'\n                              })}\n                              disabled={updateRegistrationRequestMutation.isPending}\n                            >\n                              <CheckCircle className=\"h-4 w-4 mr-1\" />\n                              Tasdiqlash\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => updateRegistrationRequestMutation.mutate({\n                                id: request.id,\n                                status: 'rejected',\n                                rejectionReason: 'Talablar bajarilmagan'\n                              })}\n                              disabled={updateRegistrationRequestMutation.isPending}\n                            >\n                              <X className=\"h-4 w-4 mr-1\" />\n                              Rad etish\n                            </Button>\n                          </div>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n              {/* Partner Legal Info & Activation Requests */}\n              <Card data-testid=\"card-partner-activation-requests\" className=\"relative\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <FileText className=\"h-5 w-5\" />\n                      Aktivatsiya So'rovlari\n                      {activationRequests?.filter(r => r.activationStatus === 'pending').length > 0 && (\n                        <span className=\"bg-red-500 text-white text-xs px-2 py-1 rounded-full\">\n                          +{activationRequests.filter(r => r.activationStatus === 'pending').length}\n                        </span>\n                      )}\n                    </div>\n                    <Badge variant=\"outline\">{activationRequests?.length || 0}</Badge>\n                  </CardTitle>\n                </CardHeader>\n              <CardContent>\n                {activationRequests?.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <FileText className=\"h-12 w-12 text-neutral-400 mx-auto mb-4\" />\n                    <p className=\"text-neutral-500\">Hamkor aktivatsiya so'rovlari yo'q</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {activationRequests?.map((request: any) => (\n                      <div key={request.id} className=\"border rounded-lg p-4\">\n                        <div className=\"flex justify-between items-start mb-2\">\n                          <div>\n                            <h4 className=\"font-semibold\">{request.companyName}</h4>\n                            <p className=\"text-sm text-neutral-600\">INN: {request.inn}</p>\n                            <p className=\"text-sm text-neutral-600\">Bank: {request.bankName}</p>\n                            <p className=\"text-sm text-neutral-600\">Hisob: {request.bankAccount}</p>\n                          </div>\n                          <Badge variant={request.activationStatus === 'pending' ? 'secondary' : \n                                        request.activationStatus === 'approved' ? 'default' : 'destructive'}>\n                            {request.activationStatus === 'pending' ? 'Kutilmoqda' : \n                             request.activationStatus === 'approved' ? 'Faollashtirilgan' : 'Rad etilgan'}\n                          </Badge>\n                        </div>\n                        <div className=\"text-sm text-neutral-600 mb-3\">\n                          <p><strong>Obuna Tarifi:</strong> {request.subscriptionTier}</p>\n                          <p><strong>Yuridik Manzil:</strong> {request.legalAddress}</p>\n                          {request.additionalInfo && (\n                            <p><strong>Qo'shimcha Ma'lumot:</strong> {request.additionalInfo}</p>\n                          )}\n                        </div>\n                        {request.activationStatus === 'pending' && (\n                          <div className=\"flex gap-2\">\n                            <Button\n                              size=\"sm\"\n                              onClick={() => updateActivationRequestMutation.mutate({\n                                id: request.id,\n                                status: 'approved'\n                              })}\n                              disabled={updateActivationRequestMutation.isPending}\n                            >\n                              <CheckCircle className=\"h-4 w-4 mr-1\" />\n                              Faollashtirish\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => updateActivationRequestMutation.mutate({\n                                id: request.id,\n                                status: 'rejected',\n                                rejectionReason: 'Hujjatlar noto\\'g\\'ri'\n                              })}\n                              disabled={updateActivationRequestMutation.isPending}\n                            >\n                              <X className=\"h-4 w-4 mr-1\" />\n                              Rad etish\n                            </Button>\n                          </div>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n              {/* Product Supply Requests */}\n              <Card data-testid=\"card-product-requests\" className=\"relative\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <Package className=\"h-5 w-5\" />\n                      Mahsulot Taminoti So'rovlari\n                      {productRequests?.filter(r => r.status === 'pending').length > 0 && (\n                        <span className=\"bg-red-500 text-white text-xs px-2 py-1 rounded-full\">\n                          +{productRequests.filter(r => r.status === 'pending').length}\n                        </span>\n                      )}\n                    </div>\n                    <Badge variant=\"outline\">{productRequests?.length || 0}</Badge>\n                  </CardTitle>\n                </CardHeader>\n              <CardContent>\n                {requestsLoading ? (\n                  <div className=\"space-y-4\">\n                    {[...Array(3)].map((_, i) => (\n                      <div key={i} className=\"animate-pulse\">\n                        <div className=\"h-6 bg-neutral-200 rounded w-3/4 mb-2\"></div>\n                        <div className=\"h-4 bg-neutral-200 rounded w-1/2\"></div>\n                      </div>\n                    ))}\n                  </div>\n                ) : productRequests.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <Package className=\"h-12 w-12 text-neutral-400 mx-auto mb-4\" />\n                    <p className=\"text-neutral-500\">Mahsulot so'rovlari yo'q</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {productRequests.map((request: ProductRequestWithDetails) => (\n                      <div key={request.id} className=\"border rounded-lg p-4\">\n                        <div className=\"flex justify-between items-start mb-2\">\n                          <div>\n                            <h4 className=\"font-semibold\">{request.productName}</h4>\n                            <p className=\"text-sm text-neutral-600\">\n                              Hamkor: {request.partner.user.firstName || request.partner.user.email}\n                            </p>\n                            <p className=\"text-sm text-neutral-600\">Miqdor: {request.expectedQuantity}</p>\n                          </div>\n                          <Badge variant={request.status === 'pending' ? 'secondary' : \n                                        request.status === 'approved' ? 'default' : 'destructive'}>\n                            {request.status === 'pending' ? 'Kutilmoqda' : \n                             request.status === 'approved' ? 'Tasdiqlangan' : 'Rad etilgan'}\n                          </Badge>\n                        </div>\n                        {request.description && (\n                          <p className=\"text-sm text-neutral-600 mb-3\">\n                            <strong>Tavsif:</strong> {request.description}\n                          </p>\n                        )}\n                        {request.status === 'pending' && (\n                          <div className=\"flex gap-2\">\n                            <Button\n                              size=\"sm\"\n                              onClick={() => handleUpdateRequestStatus(request.id, 'approved')}\n                              disabled={updateRequestMutation.isPending}\n                            >\n                              <CheckCircle className=\"h-4 w-4 mr-1\" />\n                              Tasdiqlash\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => handleUpdateRequestStatus(request.id, 'rejected', 'Talablar bajarilmagan')}\n                              disabled={updateRequestMutation.isPending}\n                            >\n                              <X className=\"h-4 w-4 mr-1\" />\n                              Rad etish\n                            </Button>\n                          </div>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"partners\" className=\"space-y-6\">\n            <Card data-testid=\"card-partners\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  Hamkorlar Ro'yxati\n                  <Badge variant=\"outline\">{partners.length}</Badge>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {partnersLoading ? (\n                  <div className=\"space-y-4\">\n                    {[...Array(3)].map((_, i) => (\n                      <div key={i} className=\"animate-pulse\">\n                        <div className=\"h-6 bg-neutral-200 rounded w-3/4 mb-2\"></div>\n                        <div className=\"h-4 bg-neutral-200 rounded w-1/2\"></div>\n                      </div>\n                    ))}\n                  </div>\n                ) : partners.length === 0 ? (\n                  <p className=\"text-neutral-500 text-center py-8\">Hamkorlar mavjud emas</p>\n                ) : (\n                  <div className=\"overflow-x-auto\">\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Hamkor</TableHead>\n                          <TableHead>Email</TableHead>\n                          <TableHead>Biznes Nomi</TableHead>\n                          <TableHead>Status</TableHead>\n                          <TableHead>Profil</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {partners.map((partner: PartnerWithUser) => (\n                          <TableRow key={partner.id}>\n                            <TableCell>\n                              <div className=\"flex items-center space-x-3\">\n                                <Avatar className=\"h-8 w-8\">\n                                  <AvatarImage src={partner.user.profileImageUrl || \"\"} />\n                                  <AvatarFallback>\n                                    {(partner.user.firstName?.[0] || partner.user.email[0]).toUpperCase()}\n                                  </AvatarFallback>\n                                </Avatar>\n                                <span className=\"font-medium\" data-testid={`text-partner-name-${partner.id}`}>\n                                  {partner.user.firstName || partner.user.email}\n                                </span>\n                              </div>\n                            </TableCell>\n                            <TableCell data-testid={`text-partner-email-${partner.id}`}>\n                              {partner.user.email}\n                            </TableCell>\n                            <TableCell data-testid={`text-business-name-${partner.id}`}>\n                              {partner.businessName || \"-\"}\n                            </TableCell>\n                            <TableCell>\n                              {partner.user.isApproved ? (\n                                <Badge className=\"bg-green-100 text-green-800\">\n                                  <CheckCircle className=\"w-3 h-3 mr-1\" />\n                                  Tasdiqlangan\n                                </Badge>\n                              ) : (\n                                <Badge variant=\"secondary\" className=\"bg-yellow-100 text-yellow-800\">\n                                  <Clock className=\"w-3 h-3 mr-1\" />\n                                  Kutilmoqda\n                                </Badge>\n                              )}\n                            </TableCell>\n                            <TableCell>\n                              <div className=\"flex space-x-2\">\n                                {!partner.user.isApproved && (\n                                  <Button\n                                    size=\"sm\"\n                                    onClick={() => handleApprovePartner(partner.user.id)}\n                                    className=\"bg-accent hover:bg-green-600\"\n                                    data-testid={`button-approve-partner-${partner.id}`}\n                                  >\n                                    <UserCheck className=\"w-4 h-4 mr-1\" />\n                                    Tasdiqlash\n                                  </Button>\n                                )}\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  onClick={() => {\n                                    setSelectedPartner(partner);\n                                    setPartnerProfileModalOpen(true);\n                                  }}\n                                  className=\"text-xs\"\n                                  data-testid={`button-profile-${partner.id}`}\n                                >\n                                  <User className=\"h-3 w-3 mr-1\" />\n                                  Profil\n                                </Button>\n                              </div>\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"products\" className=\"space-y-6\">\n            {/* Workflow Warning */}\n            <div className=\"bg-amber-50 border border-amber-200 rounded-lg p-4 mb-6\">\n              <div className=\"flex items-start space-x-3\">\n                <div className=\"flex-shrink-0 w-6 h-6 bg-amber-100 rounded-full flex items-center justify-center mt-0.5\">\n                  <div className=\"w-2 h-2 bg-amber-600 rounded-full\"></div>\n                </div>\n                <div>\n                  <h4 className=\"font-medium text-amber-900\">To'g'ri Workflow: MySklad Mahsulotlar Boshqaruvi</h4>\n                  <p className=\"text-amber-700 text-sm mt-1\">\n                    🔄 Hamkor so'rov yuboradi → 👨‍💼 Admin ko'rib chiqadi → ✏️ Kerak bo'lsa tahrirlaydi → ✅ Tasdiqlaydi → 📦 MySklad'ga qo'shiladi\n                  </p>\n                  <p className=\"text-amber-600 text-xs mt-2\">\n                    MySklad - bizning ichki inventar tizimi. Uzum/Yandex Market API orqali avtomatik savdo.\n                  </p>\n                </div>\n              </div>\n            </div>\n            \n            {/* Product Requests Management */}\n            <Card data-testid=\"card-product-requests-management\">\n              <CardHeader>\n                <CardTitle>Hamkor So'rovlarini Boshqarish</CardTitle>\n                <CardDescription>\n                  Hamkorlardan keladigan mahsulot qo'shish so'rovlarini ko'rib chiqing, tahrirlay va tasdiqlang\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {productRequests.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <Package className=\"w-12 h-12 text-neutral-400 mx-auto mb-4\" />\n                    <p className=\"text-neutral-500\">Hamkorlardan so'rovlar kelishi kutilmoqda</p>\n                    <p className=\"text-sm text-neutral-400 mt-2\">Hamkorlar mahsulot so'rovi yuborishi bilan bu yerda ko'rinadi</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {productRequests.map((request: ProductRequest) => (\n                      <Card key={request.id} className=\"border border-neutral-200\">\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-start justify-between\">\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center gap-2 mb-2\">\n                                <h4 className=\"font-semibold text-neutral-900\">{request.productName}</h4>\n                                <Badge \n                                  variant={request.status === 'pending' ? 'secondary' : \n                                          request.status === 'approved' ? 'default' : 'destructive'}\n                                  className={request.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :\n                                           request.status === 'approved' ? 'bg-green-100 text-green-800' : \n                                           'bg-red-100 text-red-800'}\n                                >\n                                  {request.status === 'pending' ? 'Kutilmoqda' :\n                                   request.status === 'approved' ? 'Tasdiqlangan' : \n                                   request.status === 'rejected' ? 'Rad etilgan' : request.status}\n                                </Badge>\n                              </div>\n                              <p className=\"text-sm text-neutral-600 mb-2\">\n                                Miqdor: {request.expectedQuantity || request.quantity} • \n                                Narx: {request.estimatedPrice ? `${Number(request.estimatedPrice).toLocaleString()} so'm` : 'Ko\\'rsatilmagan'}\n                              </p>\n                              {request.description && (\n                                <p className=\"text-xs text-neutral-500 mb-2\">{request.description}</p>\n                              )}\n                              {request.supplierInfo && (\n                                <p className=\"text-xs text-neutral-500 mb-2\">Ta'minotchi: {request.supplierInfo}</p>\n                              )}\n                              <p className=\"text-xs text-neutral-400\">\n                                So'rov vaqti: {new Date(request.createdAt).toLocaleDateString('uz-UZ')}\n                              </p>\n                            </div>\n                            <div className=\"flex gap-2\">\n                              {request.status === 'pending' && (\n                                <>\n                                  <Button size=\"sm\" variant=\"outline\" className=\"text-green-600 hover:bg-green-50\">\n                                    <CheckCircle className=\"w-4 h-4 mr-1\" />\n                                    Tasdiqlash\n                                  </Button>\n                                  <Button size=\"sm\" variant=\"outline\" className=\"text-blue-600 hover:bg-blue-50\">\n                                    <Edit className=\"w-4 h-4 mr-1\" />\n                                    Tahrirlash\n                                  </Button>\n                                  <Button size=\"sm\" variant=\"outline\" className=\"text-red-600 hover:bg-red-50\">\n                                    <X className=\"w-4 h-4 mr-1\" />\n                                    Rad etish\n                                  </Button>\n                                </>\n                              )}\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n          </TabsContent>\n\n          {/* MySklad Fulfillment Center */}\n          <TabsContent value=\"fulfillment\" className=\"space-y-6\">\n            <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-6 mb-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                    <Warehouse className=\"h-6 w-6 text-blue-600\" />\n                  </div>\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-blue-900\">MySklad Fulfilment Markazi</h3>\n                    <p className=\"text-blue-700\">Markazlashtirilgan inventar va hamkorlarning mahsulotlari</p>\n                  </div>\n                </div>\n                <Badge className=\"bg-green-100 text-green-800\">\n                  Umumiy Sklad\n                </Badge>\n              </div>\n            </div>\n\n            {/* Overall MySklad Inventory */}\n            <Card data-testid=\"card-mysklad-inventory\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    <Boxes className=\"w-5 h-5\" />\n                    Umumiy MySklad Inventari\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Badge variant=\"outline\">{products.length} tur mahsulot</Badge>\n                    <Button \n                      size=\"sm\" \n                      variant=\"outline\"\n                      onClick={() => exportInventoryToExcel(products)}\n                    >\n                      <Download className=\"w-4 h-4 mr-2\" />\n                      Excel\n                    </Button>\n                  </div>\n                </CardTitle>\n                <CardDescription>\n                  Barcha hamkorlarning tasdiqlangan mahsulotlari. Uzum/Yandex Market API orqali avtomatik yangilanadi.\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {productsLoading ? (\n                  <div className=\"space-y-4\">\n                    {[...Array(3)].map((_, i) => (\n                      <div key={i} className=\"animate-pulse\">\n                        <div className=\"h-6 bg-neutral-200 rounded w-3/4 mb-2\"></div>\n                        <div className=\"h-4 bg-neutral-200 rounded w-1/2\"></div>\n                      </div>\n                    ))}\n                  </div>\n                ) : products.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <Boxes className=\"w-12 h-12 text-neutral-400 mx-auto mb-4\" />\n                    <p className=\"text-neutral-500\">Hozircha tasdiqlangan mahsulotlar yo'q</p>\n                    <p className=\"text-sm text-neutral-400\">Hamkor so'rovlari tasdiqlangandan keyin bu yerda paydo bo'ladi</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {/* Stock Status Summary */}\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 p-4 bg-neutral-50 rounded-lg\">\n                      <div className=\"text-center\">\n                        <div className=\"text-2xl font-bold text-green-600\">\n                          {products.filter(p => (p.stockQuantity || 0) > 10).length}\n                        </div>\n                        <div className=\"text-sm text-neutral-600\">Yaxshi Zaxira</div>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"text-2xl font-bold text-orange-600\">\n                          {products.filter(p => (p.stockQuantity || 0) <= 10 && (p.stockQuantity || 0) > 5).length}\n                        </div>\n                        <div className=\"text-sm text-neutral-600\">Kam Qolgan</div>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"text-2xl font-bold text-red-600\">\n                          {products.filter(p => (p.stockQuantity || 0) <= 5).length}\n                        </div>\n                        <div className=\"text-sm text-neutral-600\">Kritik</div>\n                      </div>\n                    </div>\n\n                    {/* Products Table */}\n                    <div className=\"overflow-x-auto\">\n                      <Table>\n                        <TableHeader>\n                          <TableRow>\n                            <TableHead>Mahsulot</TableHead>\n                            <TableHead>SKU</TableHead>\n                            <TableHead>Narx</TableHead>\n                            <TableHead>Zaxira</TableHead>\n                            <TableHead>Status</TableHead>\n                            <TableHead>Hamkor</TableHead>\n                          </TableRow>\n                        </TableHeader>\n                        <TableBody>\n                          {products.map((product: Product) => (\n                            <TableRow key={product.id}>\n                              <TableCell className=\"font-medium\">{product.name}</TableCell>\n                              <TableCell className=\"text-sm text-neutral-600\">{product.sku}</TableCell>\n                              <TableCell>{Number(product.price).toLocaleString()} so'm</TableCell>\n                              <TableCell>\n                                <div className=\"flex items-center space-x-2\">\n                                  <span className={`font-semibold ${\n                                    (product.stockQuantity || 0) <= 5 ? 'text-red-600' :\n                                    (product.stockQuantity || 0) <= 10 ? 'text-orange-600' : 'text-green-600'\n                                  }`}>\n                                    {product.stockQuantity || 0}\n                                  </span>\n                                  {(product.stockQuantity || 0) <= 5 && (\n                                    <AlertTriangle className=\"w-4 h-4 text-red-600\" />\n                                  )}\n                                </div>\n                              </TableCell>\n                              <TableCell>\n                                <Badge \n                                  className={`${\n                                    (product.stockQuantity || 0) <= 5 ? 'bg-red-100 text-red-800' :\n                                    (product.stockQuantity || 0) <= 10 ? 'bg-orange-100 text-orange-800' : \n                                    'bg-green-100 text-green-800'\n                                  }`}\n                                >\n                                  {(product.stockQuantity || 0) <= 5 ? 'Kritik' :\n                                   (product.stockQuantity || 0) <= 10 ? 'Kam' : 'Yaxshi'}\n                                </Badge>\n                              </TableCell>\n                              <TableCell>\n                                <div className=\"flex items-center space-x-2\">\n                                  <Avatar className=\"h-6 w-6\">\n                                    <AvatarImage src=\"\" />\n                                    <AvatarFallback className=\"text-xs bg-blue-100 text-blue-700\">\n                                      H{Math.floor(Math.random() * 9) + 1}\n                                    </AvatarFallback>\n                                  </Avatar>\n                                  <span className=\"text-sm text-neutral-700\">\n                                    {`Hamkor ${Math.floor(Math.random() * 10) + 1}`}\n                                  </span>\n                                </div>\n                              </TableCell>\n                            </TableRow>\n                          ))}\n                        </TableBody>\n                      </Table>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Professional Reports Section */}\n          <TabsContent value=\"reports\" className=\"space-y-6\">\n            <div className=\"bg-green-50 border border-green-200 rounded-lg p-6 mb-6\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                  <FileText className=\"h-6 w-6 text-green-600\" />\n                </div>\n                <div>\n                  <h3 className=\"text-lg font-semibold text-green-900\">Professional Hisobotlar</h3>\n                  <p className=\"text-green-700\">Excel, PDF ko'rinishida detalli statistik hisobotlar</p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {/* Partner Performance Report */}\n              <Card className=\"border-l-4 border-l-blue-500\">\n                <CardHeader>\n                  <CardTitle className=\"text-sm font-medium flex items-center\">\n                    <Users className=\"w-4 h-4 mr-2 text-blue-600\" />\n                    Hamkor Statistikasi\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <p className=\"text-sm text-neutral-600\">\n                    Har bir hamkorning sotish statistikasi, foydasi va reytingi\n                  </p>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-xs\">\n                      <span>Jami hamkorlar:</span>\n                      <span className=\"font-semibold\">{partners.length}</span>\n                    </div>\n                    <div className=\"flex justify-between text-xs\">\n                      <span>Faol hamkorlar:</span>\n                      <span className=\"font-semibold text-green-600\">{partners.filter(p => p.status === 'active').length}</span>\n                    </div>\n                  </div>\n                  <Button \n                    size=\"sm\" \n                    className=\"w-full\" \n                    variant=\"outline\"\n                    onClick={() => exportPartnersToExcel(partners)}\n                  >\n                    <Download className=\"w-4 h-4 mr-2\" />\n                    Excel Yuklab Olish\n                  </Button>\n                </CardContent>\n              </Card>\n\n              {/* Inventory Report */}\n              <Card className=\"border-l-4 border-l-orange-500\">\n                <CardHeader>\n                  <CardTitle className=\"text-sm font-medium flex items-center\">\n                    <Boxes className=\"w-4 h-4 mr-2 text-orange-600\" />\n                    Inventar Hisoboti\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <p className=\"text-sm text-neutral-600\">\n                    MySklad inventari, kam qolgan mahsulotlar va ta'minot kerakligi\n                  </p>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-xs\">\n                      <span>Jami mahsulotlar:</span>\n                      <span className=\"font-semibold\">{products.length}</span>\n                    </div>\n                    <div className=\"flex justify-between text-xs\">\n                      <span>Kam qolgan:</span>\n                      <span className=\"font-semibold text-orange-600\">\n                        {products.filter(p => (p.stockQuantity || 0) <= 10).length}\n                      </span>\n                    </div>\n                  </div>\n                  <Button \n                    size=\"sm\" \n                    className=\"w-full\" \n                    variant=\"outline\"\n                    onClick={() => exportInventoryToExcel(products)}\n                  >\n                    <Download className=\"w-4 h-4 mr-2\" />\n                    Excel Yuklab Olish\n                  </Button>\n                </CardContent>\n              </Card>\n\n              {/* Sales Report */}\n              <Card className=\"border-l-4 border-l-green-500\">\n                <CardHeader>\n                  <CardTitle className=\"text-sm font-medium flex items-center\">\n                    <TrendingUp className=\"w-4 h-4 mr-2 text-green-600\" />\n                    Savdo Hisoboti\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <p className=\"text-sm text-neutral-600\">\n                    Uzum/Yandex Market orqali savdo hajmi va daromad statistikasi\n                  </p>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-xs\">\n                      <span>Jami buyurtmalar:</span>\n                      <span className=\"font-semibold\">{orders.length}</span>\n                    </div>\n                    <div className=\"flex justify-between text-xs\">\n                      <span>Bugungi savdo:</span>\n                      <span className=\"font-semibold text-green-600\">\n                        {orders.filter(o => new Date(o.createdAt).toDateString() === new Date().toDateString()).length}\n                      </span>\n                    </div>\n                  </div>\n                  <Button \n                    size=\"sm\" \n                    className=\"w-full\" \n                    variant=\"outline\"\n                    onClick={() => exportOrdersToExcel(orders)}\n                  >\n                    <Download className=\"w-4 h-4 mr-2\" />\n                    Excel Yuklab Olish\n                  </Button>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"orders\" className=\"space-y-6\">\n            <Card data-testid=\"card-orders-admin\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  Barcha Buyurtmalar\n                  <Badge variant=\"outline\">{orders.length}</Badge>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {ordersLoading ? (\n                  <div className=\"space-y-4\">\n                    {[...Array(5)].map((_, i) => (\n                      <div key={i} className=\"animate-pulse\">\n                        <div className=\"h-6 bg-neutral-200 rounded w-3/4 mb-2\"></div>\n                        <div className=\"h-4 bg-neutral-200 rounded w-1/2\"></div>\n                      </div>\n                    ))}\n                  </div>\n                ) : orders.length === 0 ? (\n                  <p className=\"text-neutral-500 text-center py-8\">Buyurtmalar mavjud emas</p>\n                ) : (\n                  <div className=\"overflow-x-auto\">\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Hamkor</TableHead>\n                          <TableHead>Mijoz</TableHead>\n                          <TableHead>Mahsulot</TableHead>\n                          <TableHead>Miqdor</TableHead>\n                          <TableHead>Summa</TableHead>\n                          <TableHead>Status</TableHead>\n                          <TableHead>Sana</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {orders.map((order: OrderWithDetails) => (\n                          <TableRow key={order.id}>\n                            <TableCell>\n                              <div className=\"flex items-center space-x-2\">\n                                <Avatar className=\"h-6 w-6\">\n                                  <AvatarImage src={order.partner.user.profileImageUrl || \"\"} />\n                                  <AvatarFallback className=\"text-xs\">\n                                    {(order.partner.user.firstName?.[0] || order.partner.user.email[0]).toUpperCase()}\n                                  </AvatarFallback>\n                                </Avatar>\n                                <span className=\"text-sm\" data-testid={`text-order-partner-${order.id}`}>\n                                  {order.partner.user.firstName || order.partner.user.email}\n                                </span>\n                              </div>\n                            </TableCell>\n                            <TableCell data-testid={`text-order-customer-${order.id}`}>\n                              {order.customerName}\n                            </TableCell>\n                            <TableCell data-testid={`text-order-product-${order.id}`}>\n                              {order.product.name}\n                            </TableCell>\n                            <TableCell data-testid={`text-order-quantity-${order.id}`}>\n                              {order.quantity}\n                            </TableCell>\n                            <TableCell data-testid={`text-order-amount-${order.id}`}>\n                              {Number(order.totalAmount).toLocaleString()} so'm\n                            </TableCell>\n                            <TableCell>\n                              {getStatusBadge(order.status)}\n                            </TableCell>\n                            <TableCell data-testid={`text-order-date-${order.id}`}>\n                              {new Date(order.createdAt).toLocaleDateString('uz-UZ')}\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"chat\">\n            <ChatSystem />\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      {/* Mini Warehouse Modal */}\n      <Dialog open={warehouseModalOpen} onOpenChange={setWarehouseModalOpen}>\n        <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center space-x-2\">\n              <Warehouse className=\"h-5 w-5\" />\n              <span>{selectedPartner?.businessName} - Mini Sklad</span>\n            </DialogTitle>\n          </DialogHeader>\n          \n          {warehouseLoading ? (\n            <div className=\"flex items-center justify-center py-12\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n              <span className=\"ml-2\">Sklad ma'lumotlari yuklanmoqda...</span>\n            </div>\n          ) : warehouseData ? (\n            <div className=\"space-y-6\">\n              {/* Products Table */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Mahsulotlar Ro'yxati</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"overflow-x-auto\">\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Nomi</TableHead>\n                          <TableHead>Rasm</TableHead>\n                          <TableHead>Qoldiq</TableHead>\n                          <TableHead>Sebestoimost</TableHead>\n                          <TableHead>Jami Qiymat</TableHead>\n                          <TableHead>Daromad</TableHead>\n                          <TableHead>Foyda</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {warehouseData.products.map((product: any) => (\n                          <TableRow key={product.id}>\n                            <TableCell className=\"font-medium\">\n                              {product.name}\n                            </TableCell>\n                            <TableCell>\n                              <div className=\"w-12 h-12 bg-neutral-100 rounded-lg flex items-center justify-center\">\n                                {product.imageUrl ? (\n                                  <img \n                                    src={product.imageUrl} \n                                    alt={product.name}\n                                    className=\"w-10 h-10 object-cover rounded\"\n                                  />\n                                ) : (\n                                  <Package className=\"w-6 h-6 text-neutral-400\" />\n                                )}\n                              </div>\n                            </TableCell>\n                            <TableCell>\n                              <Badge variant={product.currentStock <= 5 ? \"destructive\" : \"secondary\"}>\n                                {product.currentStock}\n                              </Badge>\n                            </TableCell>\n                            <TableCell>\n                              {product.costPrice.toLocaleString()} so'm\n                            </TableCell>\n                            <TableCell>\n                              {product.stockValue.toLocaleString()} so'm\n                            </TableCell>\n                            <TableCell className=\"text-green-600 font-medium\">\n                              {product.revenue.toLocaleString()} so'm\n                            </TableCell>\n                            <TableCell className=\"text-blue-600 font-medium\">\n                              {product.profit.toLocaleString()} so'm\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          ) : (\n            <div className=\"text-center py-8\">\n              <p className=\"text-neutral-500\">Sklad ma'lumotlari topilmadi</p>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Partner Profile Modal - Comprehensive view */}\n      <Dialog open={partnerProfileModalOpen} onOpenChange={setPartnerProfileModalOpen}>\n        <DialogContent className=\"max-w-6xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center space-x-2\">\n              <User className=\"h-5 w-5\" />\n              <span>{selectedPartner?.businessName || selectedPartner?.user.email} - Hamkor Profili</span>\n            </DialogTitle>\n          </DialogHeader>\n          \n          {selectedPartner && (\n            <div className=\"space-y-6\">\n              {/* Partner Information */}\n              <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                <Card className=\"lg:col-span-1\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <User className=\"h-4 w-4\" />\n                      <span>Hamkor Ma'lumotlari</span>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center space-x-3\">\n                        <Avatar className=\"h-12 w-12\">\n                          <AvatarImage src={selectedPartner.user.profileImageUrl || \"\"} />\n                          <AvatarFallback>\n                            {(selectedPartner.user.firstName?.[0] || selectedPartner.user.email?.[0] || 'H').toUpperCase()}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div>\n                          <h3 className=\"font-semibold\">{selectedPartner.user.firstName || selectedPartner.user.email || 'Hamkor'}</h3>\n                          <p className=\"text-sm text-neutral-600\">{selectedPartner.user.email || ''}</p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-sm text-neutral-600\">Biznes Nomi:</span>\n                          <span className=\"text-sm font-medium\">{selectedPartner.businessName || \"-\"}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-sm text-neutral-600\">Status:</span>\n                          <Badge variant={selectedPartner.user.isApproved ? 'default' : 'secondary'}>\n                            {selectedPartner.user.isApproved ? 'Tasdiqlangan' : 'Kutilmoqda'}\n                          </Badge>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-sm text-neutral-600\">Qo'shilgan sana:</span>\n                          <span className=\"text-sm\">{selectedPartner.createdAt ? new Date(selectedPartner.createdAt).toLocaleDateString() : '-'}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-sm text-neutral-600\">Obuna Tarifi:</span>\n                          <span className=\"text-sm font-medium\">\n                            {selectedPartner.pricingTier === 'basic' ? 'Basic (2.5M so\\'m/oy)' :\n                             selectedPartner.pricingTier === 'professional' ? 'Professional (4.5M so\\'m/oy)' :\n                             selectedPartner.pricingTier === 'enterprise' ? 'Enterprise (6.5M so\\'m/oy)' :\n                             'Basic (2.5M so\\'m/oy)'}\n                          </span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-sm text-neutral-600\">Komissiya:</span>\n                          <span className=\"text-sm font-medium\">\n                            {selectedPartner.pricingTier === 'basic' ? '12%' :\n                             selectedPartner.pricingTier === 'professional' ? '15%' :\n                             selectedPartner.pricingTier === 'enterprise' ? '18%' : '12%'}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Partner Statistics */}\n                <Card className=\"lg:col-span-2\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <BarChart3 className=\"h-4 w-4\" />\n                      <span>Hamkor Statistikalari</span>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4\">\n                      <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                        <ShoppingCart className=\"h-6 w-6 text-blue-600 mx-auto mb-2\" />\n                        <div className=\"text-2xl font-bold text-blue-700\">0</div>\n                        <div className=\"text-xs text-blue-600\">Buyurtmalar</div>\n                      </div>\n                      <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n                        <DollarSign className=\"h-6 w-6 text-green-600 mx-auto mb-2\" />\n                        <div className=\"text-2xl font-bold text-green-700\">0</div>\n                        <div className=\"text-xs text-green-600\">Daromad (so'm)</div>\n                      </div>\n                      <div className=\"text-center p-4 bg-purple-50 rounded-lg\">\n                        <Package className=\"h-6 w-6 text-purple-600 mx-auto mb-2\" />\n                        <div className=\"text-2xl font-bold text-purple-700\">0</div>\n                        <div className=\"text-xs text-purple-600\">Mahsulotlar</div>\n                      </div>\n                      <div className=\"text-center p-4 bg-orange-50 rounded-lg\">\n                        <TrendingUp className=\"h-6 w-6 text-orange-600 mx-auto mb-2\" />\n                        <div className=\"text-2xl font-bold text-orange-700\">0%</div>\n                        <div className=\"text-xs text-orange-600\">O'sish</div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Tabs for different sections */}\n              <Tabs defaultValue=\"warehouse\" className=\"space-y-4\">\n                <TabsList className=\"grid w-full grid-cols-3\">\n                  <TabsTrigger value=\"warehouse\" className=\"flex items-center space-x-2\">\n                    <Warehouse className=\"h-4 w-4\" />\n                    <span>Mini Sklad</span>\n                  </TabsTrigger>\n                  <TabsTrigger value=\"marketplace\" className=\"flex items-center space-x-2\">\n                    <Store className=\"h-4 w-4\" />\n                    <span>Marketplace</span>\n                  </TabsTrigger>\n                  <TabsTrigger value=\"analytics\" className=\"flex items-center space-x-2\">\n                    <BarChart3 className=\"h-4 w-4\" />\n                    <span>Tahlil</span>\n                  </TabsTrigger>\n                </TabsList>\n\n                {/* Mini Sklad Tab */}\n                <TabsContent value=\"warehouse\" className=\"space-y-4\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Sklad Holati</CardTitle>\n                      <CardDescription>Hamkor skladidagi mahsulotlar va ularning holati</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      {warehouseLoading ? (\n                        <div className=\"flex items-center justify-center py-8\">\n                          <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600\"></div>\n                          <span className=\"ml-2\">Yuklanmoqda...</span>\n                        </div>\n                      ) : warehouseData ? (\n                        <div className=\"overflow-x-auto\">\n                          <Table>\n                            <TableHeader>\n                              <TableRow>\n                                <TableHead>Mahsulot</TableHead>\n                                <TableHead>Rasm</TableHead>\n                                <TableHead>Qoldiq</TableHead>\n                                <TableHead>Narx</TableHead>\n                                <TableHead>Jami Qiymat</TableHead>\n                                <TableHead>Status</TableHead>\n                              </TableRow>\n                            </TableHeader>\n                            <TableBody>\n                              {warehouseData.products.slice(0, 5).map((product: any) => (\n                                <TableRow key={product.id}>\n                                  <TableCell className=\"font-medium\">{product.name}</TableCell>\n                                  <TableCell>\n                                    <div className=\"w-10 h-10 bg-neutral-100 rounded flex items-center justify-center\">\n                                      {product.imageUrl ? (\n                                        <img src={product.imageUrl} alt={product.name} className=\"w-8 h-8 object-cover rounded\" />\n                                      ) : (\n                                        <Package className=\"w-5 h-5 text-neutral-400\" />\n                                      )}\n                                    </div>\n                                  </TableCell>\n                                  <TableCell>{product.stockQuantity}</TableCell>\n                                  <TableCell>{product.costPrice.toLocaleString()} so'm</TableCell>\n                                  <TableCell>{product.stockValue.toLocaleString()} so'm</TableCell>\n                                  <TableCell>\n                                    <Badge variant={product.stockQuantity > 0 ? 'default' : 'destructive'}>\n                                      {product.stockQuantity > 0 ? 'Mavjud' : 'Tugagan'}\n                                    </Badge>\n                                  </TableCell>\n                                </TableRow>\n                              ))}\n                            </TableBody>\n                          </Table>\n                        </div>\n                      ) : (\n                        <div className=\"text-center py-8 text-neutral-500\">\n                          Sklad ma'lumotlari topilmadi\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n\n                {/* Marketplace Tab */}\n                <TabsContent value=\"marketplace\" className=\"space-y-4\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Marketplace Integratsiyalari</CardTitle>\n                      <CardDescription>Hamkor ulangan marketplace'lar va ularning holati</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                        {/* Uzum Market Integration */}\n                        <div className=\"border rounded-lg p-4\">\n                          <div className=\"flex items-center justify-between mb-4\">\n                            <div className=\"flex items-center space-x-2\">\n                              <div className=\"w-8 h-8 bg-gradient-to-r from-purple-500 to-pink-500 rounded-lg flex items-center justify-center\">\n                                <Store className=\"h-4 w-4 text-white\" />\n                              </div>\n                              <span className=\"font-medium\">Uzum Market</span>\n                            </div>\n                            {selectedPartner?.marketplaceIntegrations?.find(int => int.marketplace === 'uzum_market') ? (\n                              <div className=\"flex items-center space-x-2\">\n                                <Badge variant=\"default\">Ulangan</Badge>\n                                <div className=\"flex space-x-1\">\n                                  <Button \n                                    size=\"sm\" \n                                    variant=\"outline\"\n                                    onClick={() => {\n                                      const integration = selectedPartner?.marketplaceIntegrations?.find(int => int.marketplace === 'uzum_market');\n                                      if (integration) syncUzumMarketData(integration.id, 'products');\n                                    }}\n                                    disabled={syncingData}\n                                  >\n                                    {syncingData ? <Loader2 className=\"w-3 h-3 animate-spin\" /> : 'Mahsulot'}\n                                  </Button>\n                                  <Button \n                                    size=\"sm\" \n                                    variant=\"outline\"\n                                    onClick={() => {\n                                      const integration = selectedPartner?.marketplaceIntegrations?.find(int => int.marketplace === 'uzum_market');\n                                      if (integration) syncUzumMarketData(integration.id, 'orders');\n                                    }}\n                                    disabled={syncingData}\n                                  >\n                                    {syncingData ? <Loader2 className=\"w-3 h-3 animate-spin\" /> : 'Buyurtma'}\n                                  </Button>\n                                </div>\n                              </div>\n                            ) : (\n                              <Badge variant=\"destructive\">Ulanmagan</Badge>\n                            )}\n                          </div>\n                          \n                          <div className=\"space-y-3\">\n                            <div>\n                              <Label htmlFor=\"uzum-api-key\" className=\"text-sm\">API Key</Label>\n                              <Input\n                                id=\"uzum-api-key\"\n                                type=\"password\"\n                                placeholder=\"API kalitini kiriting\"\n                                value={uzumCredentials.apiKey}\n                                onChange={(e) => setUzumCredentials({...uzumCredentials, apiKey: e.target.value})}\n                                className=\"mt-1\"\n                              />\n                            </div>\n                            <div>\n                              <Label htmlFor=\"uzum-secret-key\" className=\"text-sm\">Secret Key</Label>\n                              <Input\n                                id=\"uzum-secret-key\"\n                                type=\"password\"\n                                placeholder=\"Maxfiy kalitni kiriting\"\n                                value={uzumCredentials.secretKey}\n                                onChange={(e) => setUzumCredentials({...uzumCredentials, secretKey: e.target.value})}\n                                className=\"mt-1\"\n                              />\n                            </div>\n                            <div>\n                              <Label htmlFor=\"uzum-shop-id\" className=\"text-sm\">Shop ID</Label>\n                              <Input\n                                id=\"uzum-shop-id\"\n                                placeholder=\"Do'kon ID raqamini kiriting\"\n                                value={uzumCredentials.shopId}\n                                onChange={(e) => setUzumCredentials({...uzumCredentials, shopId: e.target.value})}\n                                className=\"mt-1\"\n                              />\n                            </div>\n                            <Button \n                              size=\"sm\" \n                              className=\"w-full\"\n                              onClick={() => handleMarketplaceConnect('uzum')}\n                              disabled={connectingMarketplace === 'uzum'}\n                            >\n                              {connectingMarketplace === 'uzum' ? (\n                                <>\n                                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                                  Ulanmoqda...\n                                </>\n                              ) : (\n                                'Saqlash va Ulash'\n                              )}\n                            </Button>\n                          </div>\n                        </div>\n\n                        {/* Yandex Market Integration */}\n                        <div className=\"border rounded-lg p-4\">\n                          <div className=\"flex items-center justify-between mb-4\">\n                            <div className=\"flex items-center space-x-2\">\n                              <div className=\"w-8 h-8 bg-gradient-to-r from-yellow-500 to-red-500 rounded-lg flex items-center justify-center\">\n                                <Store className=\"h-4 w-4 text-white\" />\n                              </div>\n                              <span className=\"font-medium\">Yandex Market</span>\n                            </div>\n                            {selectedPartner?.marketplaceIntegrations?.find(int => int.marketplace === 'yandex_market') ? (\n                              <div className=\"flex items-center space-x-2\">\n                                <Badge variant=\"default\">Ulangan</Badge>\n                                <div className=\"flex space-x-1\">\n                                  <Button \n                                    size=\"sm\" \n                                    variant=\"outline\"\n                                    onClick={() => {\n                                      const integration = selectedPartner?.marketplaceIntegrations?.find(int => int.marketplace === 'yandex_market');\n                                      if (integration) syncYandexMarketData(integration.id, 'products');\n                                    }}\n                                    disabled={syncingData}\n                                  >\n                                    {syncingData ? <Loader2 className=\"w-3 h-3 animate-spin\" /> : 'Mahsulot'}\n                                  </Button>\n                                  <Button \n                                    size=\"sm\" \n                                    variant=\"outline\"\n                                    onClick={() => {\n                                      const integration = selectedPartner?.marketplaceIntegrations?.find(int => int.marketplace === 'yandex_market');\n                                      if (integration) syncYandexMarketData(integration.id, 'orders');\n                                    }}\n                                    disabled={syncingData}\n                                  >\n                                    {syncingData ? <Loader2 className=\"w-3 h-3 animate-spin\" /> : 'Buyurtma'}\n                                  </Button>\n                                </div>\n                              </div>\n                            ) : (\n                              <Badge variant=\"destructive\">Ulanmagan</Badge>\n                            )}\n                          </div>\n                          \n                          <div className=\"space-y-3\">\n                            <div>\n                              <Label htmlFor=\"yandex-api-key\" className=\"text-sm\">API Key</Label>\n                              <Input\n                                id=\"yandex-api-key\"\n                                type=\"password\"\n                                placeholder=\"API kalitini kiriting\"\n                                value={yandexCredentials.apiKey}\n                                onChange={(e) => setYandexCredentials({...yandexCredentials, apiKey: e.target.value})}\n                                className=\"mt-1\"\n                              />\n                            </div>\n                            <div>\n                              <Label htmlFor=\"yandex-campaign-id\" className=\"text-sm\">Campaign ID</Label>\n                              <Input\n                                id=\"yandex-campaign-id\"\n                                placeholder=\"Kampaniya ID raqamini kiriting\"\n                                value={yandexCredentials.campaignId}\n                                onChange={(e) => setYandexCredentials({...yandexCredentials, campaignId: e.target.value})}\n                                className=\"mt-1\"\n                              />\n                            </div>\n                            <div>\n                              <Label htmlFor=\"yandex-client-id\" className=\"text-sm\">Client ID</Label>\n                              <Input\n                                id=\"yandex-client-id\"\n                                placeholder=\"Mijoz ID raqamini kiriting\"\n                                value={yandexCredentials.clientId}\n                                onChange={(e) => setYandexCredentials({...yandexCredentials, clientId: e.target.value})}\n                                className=\"mt-1\"\n                              />\n                            </div>\n                            <Button \n                              size=\"sm\" \n                              className=\"w-full\"\n                              onClick={() => handleMarketplaceConnect('yandex')}\n                              disabled={connectingMarketplace === 'yandex'}\n                            >\n                              {connectingMarketplace === 'yandex' ? (\n                                <>\n                                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                                  Ulanmoqda...\n                                </>\n                              ) : (\n                                'Saqlash va Ulash'\n                              )}\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n\n                {/* Analytics Tab */}\n                <TabsContent value=\"analytics\" className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n                    <Card>\n                      <CardHeader>\n                        <CardTitle>Oylik Sotuv</CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"h-64 flex items-center justify-center text-neutral-500\">\n                          Sotuv ma'lumotlari mavjud emas\n                        </div>\n                      </CardContent>\n                    </Card>\n                    \n                    <Card>\n                      <CardHeader>\n                        <CardTitle>Foyda Dinamikasi</CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"h-64 flex items-center justify-center text-neutral-500\">\n                          Foyda ma'lumotlari mavjud emas\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </div>\n                </TabsContent>\n              </Tabs>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n    </div>\n  );\n}\n","size_bytes":102278},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { FulfillmentCalculator } from \"@/components/fulfillment-calculator\";\nimport heroImage from \"@assets/generated_images/Professional_marketplace_hero_image_6ea2fa47.png\";\nimport tierImage from \"@assets/generated_images/3-tier_commission_visualization_77d85af1.png\";\nimport dashboardImage from \"@assets/generated_images/Analytics_dashboard_preview_96ed3eb1.png\";\nimport { \n  TrendingUp, \n  Package, \n  BarChart3, \n  Users, \n  CheckCircle, \n  Rocket,\n  Play,\n  Phone,\n  Mail,\n  MessageCircle,\n  Calendar,\n  Store,\n  Truck,\n  Target\n} from \"lucide-react\";\n\nexport default function Landing() {\n  const handleLogin = () => {\n    window.location.href = \"/login\";\n  };\n\n  const handleAdminLogin = () => {\n    window.location.href = \"/admin-login\";\n  };\n\n  const handlePartnerRegistration = () => {\n    window.location.href = \"/partner-registration\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-neutral-50\">\n      {/* Navigation */}\n      <nav className=\"bg-white shadow-sm border-b border-neutral-200 fixed w-full top-0 z-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center\">\n              <h1 className=\"text-2xl font-bold text-primary\">MarketPlace Pro</h1>\n            </div>\n            <div className=\"hidden md:block\">\n              <div className=\"ml-10 flex items-baseline space-x-4\">\n                <a href=\"#services\" className=\"text-neutral-600 hover:text-primary px-3 py-2 text-sm font-medium transition-colors\">\n                  Xizmatlar\n                </a>\n                <a href=\"#dashboard\" className=\"text-neutral-600 hover:text-primary px-3 py-2 text-sm font-medium transition-colors\">\n                  Dashboard\n                </a>\n                <a href=\"#pricing\" className=\"text-neutral-600 hover:text-primary px-3 py-2 text-sm font-medium transition-colors\">\n                  Narxlar\n                </a>\n                <Button onClick={handleLogin} className=\"bg-primary hover:bg-secondary mr-2\">\n                  Partner Kirish\n                </Button>\n                <Button variant=\"outline\" onClick={handleAdminLogin} className=\"mr-2\">\n                  Admin Panel\n                </Button>\n                <Button variant=\"outline\" onClick={handlePartnerRegistration}>\n                  Hamkor Bo'lish\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </nav>\n\n      {/* Hero Section */}\n      <section className=\"pt-20 pb-16 bg-gradient-to-br from-primary/5 via-white to-accent/5 relative overflow-hidden\">\n        {/* Background decorative elements */}\n        <div className=\"absolute top-0 right-0 w-96 h-96 bg-gradient-to-br from-primary/10 to-secondary/10 rounded-full blur-3xl\"></div>\n        <div className=\"absolute bottom-0 left-0 w-96 h-96 bg-gradient-to-tr from-accent/10 to-primary/10 rounded-full blur-3xl\"></div>\n        \n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative\">\n          <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n            {/* Left Content */}\n            <div className=\"text-center lg:text-left\">\n              <div className=\"inline-flex items-center bg-white/80 backdrop-blur-sm border border-primary/20 rounded-full px-4 py-2 mb-6\">\n                <span className=\"text-sm font-medium text-primary\">🚀 #1 Marketplace Management Platform</span>\n              </div>\n              \n              <h1 className=\"text-4xl md:text-6xl font-bold text-neutral-900 mb-6 leading-tight\">\n                Professional\n                <span className=\"text-transparent bg-clip-text bg-gradient-to-r from-primary to-secondary block\">\n                  Marketplace Management\n                </span>\n                <span className=\"text-neutral-700\">Services</span>\n              </h1>\n              \n              <p className=\"text-xl text-neutral-600 mb-8 max-w-2xl mx-auto lg:mx-0\">\n                Marketplace savdolaringizni professional darajada boshqaring. \n                <strong>Uzum Market, Wildberries, Yandex Market</strong> va <strong>MySklad</strong> bilan to'liq integratsiya.\n                Mahsulot tayyorlashdan logistikagacha to'liq xizmat kompleksi.\n              </p>\n              \n              <div className=\"flex flex-col sm:flex-row gap-4 justify-center lg:justify-start mb-12\">\n                <Button \n                  onClick={handleLogin}\n                  size=\"lg\"\n                  className=\"bg-gradient-to-r from-primary to-secondary hover:from-secondary hover:to-primary text-white transform hover:scale-105 transition-all shadow-lg hover:shadow-xl\"\n                  data-testid=\"button-start\"\n                >\n                  <Rocket className=\"mr-2 h-5 w-5\" />\n                  Admin Paneli\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  size=\"lg\"\n                  onClick={() => window.location.href = '/partner-registration'}\n                  className=\"border-2 border-green-600 text-green-600 hover:bg-green-600 hover:text-white transform hover:scale-105 transition-all bg-white/80 backdrop-blur-sm\"\n                  data-testid=\"button-partner\"\n                >\n                  <Users className=\"mr-2 h-5 w-5\" />\n                  Hamkor Bo'lish\n                </Button>\n              </div>\n            </div>\n            \n            {/* Right Image */}\n            <div className=\"relative\">\n              <div className=\"relative bg-white/20 backdrop-blur-sm rounded-3xl p-6 shadow-2xl border border-white/30\">\n                <img \n                  src={heroImage} \n                  alt=\"Professional Marketplace Platform Dashboard\"\n                  className=\"w-full h-auto rounded-2xl shadow-lg\"\n                />\n                \n                {/* Floating elements */}\n                <div className=\"absolute -top-4 -right-4 bg-accent text-white p-3 rounded-xl shadow-lg animate-bounce\">\n                  <TrendingUp className=\"h-5 w-5\" />\n                </div>\n                <div className=\"absolute -bottom-4 -left-4 bg-primary text-white p-3 rounded-xl shadow-lg animate-pulse\">\n                  <Target className=\"h-5 w-5\" />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Stats Section */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n            <div className=\"text-center\" data-testid=\"stat-revenue\">\n              <div className=\"text-4xl font-bold text-primary mb-2\">150M+</div>\n              <div className=\"text-neutral-600\">Oylik Aylanma</div>\n            </div>\n            <div className=\"text-center\" data-testid=\"stat-profit\">\n              <div className=\"text-4xl font-bold text-accent mb-2\">25%</div>\n              <div className=\"text-neutral-600\">Foyda Ulushi</div>\n            </div>\n            <div className=\"text-center\" data-testid=\"stat-products\">\n              <div className=\"text-4xl font-bold text-primary mb-2\">500+</div>\n              <div className=\"text-neutral-600\">Mahsulot Turi</div>\n            </div>\n            <div className=\"text-center\" data-testid=\"stat-satisfaction\">\n              <div className=\"text-4xl font-bold text-accent mb-2\">99.8%</div>\n              <div className=\"text-neutral-600\">Mijoz Qoniqishi</div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Services Section */}\n      <section id=\"services\" className=\"py-20 bg-gradient-to-br from-neutral-50 via-white to-blue-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-20\">\n            <h2 className=\"text-4xl md:text-5xl font-bold text-neutral-900 mb-6\">Professional Xizmatlar</h2>\n            <p className=\"text-xl text-neutral-600 max-w-3xl mx-auto mb-8\">\n              Marketplace savdolaringiz uchun to'liq professional yechim. Uzum Market, Wildberries, Yandex Market bilan integratsiya.\n            </p>\n            <div className=\"inline-flex items-center bg-primary/10 border border-primary/20 rounded-full px-6 py-3\">\n              <span className=\"text-primary font-semibold\">🚀 To'liq Fulfillment Xizmati</span>\n            </div>\n          </div>\n          \n          {/* Main Services Grid */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-10 mb-16\">\n            {/* Marketplace Management - Enhanced */}\n            <Card className=\"hover:shadow-2xl transition-all duration-300 transform hover:-translate-y-2 border-2 border-primary/10\" data-testid=\"card-marketplace\">\n              <CardContent className=\"p-8\">\n                <div className=\"w-20 h-20 bg-gradient-to-br from-primary/20 to-primary/10 rounded-2xl flex items-center justify-center mb-6\">\n                  <Store className=\"h-10 w-10 text-primary\" />\n                </div>\n                <h3 className=\"text-2xl font-bold text-neutral-900 mb-4\">Marketplace Boshqaruvi</h3>\n                <p className=\"text-neutral-600 mb-6 leading-relaxed\">\n                  Professional mahsulot kartochkalari yaratish, SEO optimizatsiya, raqobat tahlili va savdo strategiyalari\n                </p>\n                <div className=\"space-y-3 mb-6\">\n                  <div className=\"flex items-center\">\n                    <CheckCircle className=\"h-5 w-5 text-accent mr-3 flex-shrink-0\" />\n                    <span className=\"text-sm text-neutral-700\">Professional kartochka dizayni va kontent</span>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <CheckCircle className=\"h-5 w-5 text-accent mr-3 flex-shrink-0\" />\n                    <span className=\"text-sm text-neutral-700\">SEO optimizatsiya va kalit so'zlar tahlili</span>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <CheckCircle className=\"h-5 w-5 text-accent mr-3 flex-shrink-0\" />\n                    <span className=\"text-sm text-neutral-700\">Raqobat tahlili va bozor tadqiqoti</span>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <CheckCircle className=\"h-5 w-5 text-accent mr-3 flex-shrink-0\" />\n                    <span className=\"text-sm text-neutral-700\">Narx strategiyasi va pozitsiyalash</span>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <CheckCircle className=\"h-5 w-5 text-accent mr-3 flex-shrink-0\" />\n                    <span className=\"text-sm text-neutral-700\">A/B test va optimizatsiya</span>\n                  </div>\n                </div>\n                <div className=\"bg-primary/5 rounded-lg p-4\">\n                  <p className=\"text-sm text-primary font-medium\">\n                    💡 Uzum, Wildberries, Yandex Market uchun optimizatsiya\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Logistics & Fulfillment - Enhanced */}\n            <Card className=\"hover:shadow-2xl transition-all duration-300 transform hover:-translate-y-2 border-2 border-accent/10\" data-testid=\"card-logistics\">\n              <CardContent className=\"p-8\">\n                <div className=\"w-20 h-20 bg-gradient-to-br from-accent/20 to-accent/10 rounded-2xl flex items-center justify-center mb-6\">\n                  <Truck className=\"h-10 w-10 text-accent\" />\n                </div>\n                <h3 className=\"text-2xl font-bold text-neutral-900 mb-4\">Logistika va Fulfillment</h3>\n                <p className=\"text-neutral-600 mb-6 leading-relaxed\">\n                  To'liq logistik yechim: qabul qilish, saqlash, qadoqlash, yetkazib berish va qaytarish jarayonlari\n                </p>\n                <div className=\"space-y-3 mb-6\">\n                  <div className=\"flex items-center\">\n                    <CheckCircle className=\"h-5 w-5 text-accent mr-3 flex-shrink-0\" />\n                    <span className=\"text-sm text-neutral-700\">Professional qadoqlash va brending</span>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <CheckCircle className=\"h-5 w-5 text-accent mr-3 flex-shrink-0\" />\n                    <span className=\"text-sm text-neutral-700\">24-48 soat ichida yetkazib berish</span>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <CheckCircle className=\"h-5 w-5 text-accent mr-3 flex-shrink-0\" />\n                    <span className=\"text-sm text-neutral-700\">MySklad inventar boshqaruvi</span>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <CheckCircle className=\"h-5 w-5 text-accent mr-3 flex-shrink-0\" />\n                    <span className=\"text-sm text-neutral-700\">Qaytarish va almashtirish xizmati</span>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <CheckCircle className=\"h-5 w-5 text-accent mr-3 flex-shrink-0\" />\n                    <span className=\"text-sm text-neutral-700\">Mijozlar bilan aloqa va qo'llab-quvvatlash</span>\n                  </div>\n                </div>\n                <div className=\"bg-accent/5 rounded-lg p-4\">\n                  <p className=\"text-sm text-accent font-medium\">\n                    📦 SPT: 2,000 so'm/dona (transparent narxlar)\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Partner Dashboard & Analytics - Enhanced */}\n            <Card className=\"hover:shadow-2xl transition-all duration-300 transform hover:-translate-y-2 border-2 border-secondary/10\" data-testid=\"card-partner-analytics\">\n              <CardContent className=\"p-8\">\n                <div className=\"w-20 h-20 bg-gradient-to-br from-secondary/20 to-secondary/10 rounded-2xl flex items-center justify-center mb-6\">\n                  <BarChart3 className=\"h-10 w-10 text-secondary\" />\n                </div>\n                <h3 className=\"text-2xl font-bold text-neutral-900 mb-4\">Hamkor Dashboard va Analitika</h3>\n                <p className=\"text-neutral-600 mb-6 leading-relaxed\">\n                  Hamkorlar uchun maxsus dashboard: savdo tahlili, ombor qoldiqlar, mahsulot harakati va foyda hisoboti\n                </p>\n                \n                {/* Dashboard Description */}\n                <div className=\"mb-6 bg-secondary/5 rounded-xl p-6 border border-secondary/10\">\n                  <div className=\"flex items-center mb-4\">\n                    <div className=\"w-12 h-12 bg-secondary/20 rounded-lg flex items-center justify-center mr-4\">\n                      <BarChart3 className=\"h-6 w-6 text-secondary\" />\n                    </div>\n                    <div>\n                      <h4 className=\"font-semibold text-neutral-900\">Shaxsiy Analytics Dashboard</h4>\n                      <p className=\"text-sm text-neutral-600\">Hamkorlar uchun maxsus tayyorlangan</p>\n                    </div>\n                  </div>\n                  <p className=\"text-sm text-neutral-700\">\n                    Har bir hamkor o'zining shaxsiy dashboardiga ega bo'lib, u orqali real vaqtda o'z savdo ko'rsatkichlarini kuzatib boradi.\n                  </p>\n                </div>\n                \n                <div className=\"space-y-3 mb-6\">\n                  <div className=\"flex items-center\">\n                    <CheckCircle className=\"h-5 w-5 text-accent mr-3 flex-shrink-0\" />\n                    <span className=\"text-sm text-neutral-700\">Ombor qoldiqlar real-time monitoring</span>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <CheckCircle className=\"h-5 w-5 text-accent mr-3 flex-shrink-0\" />\n                    <span className=\"text-sm text-neutral-700\">Mahsulot harakati va savdo tahlili</span>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <CheckCircle className=\"h-5 w-5 text-accent mr-3 flex-shrink-0\" />\n                    <span className=\"text-sm text-neutral-700\">MySklad inventar integratsiya</span>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <CheckCircle className=\"h-5 w-5 text-accent mr-3 flex-shrink-0\" />\n                    <span className=\"text-sm text-neutral-700\">Kunlik/oylik foyda hisoboti</span>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <CheckCircle className=\"h-5 w-5 text-accent mr-3 flex-shrink-0\" />\n                    <span className=\"text-sm text-neutral-700\">Marketplace performance ko'rsatkichlari</span>\n                  </div>\n                </div>\n                <div className=\"bg-secondary/5 rounded-lg p-4\">\n                  <p className=\"text-sm text-secondary font-medium\">\n                    📊 Dashboard hamkorlar ro'yxatdan o'tgandan keyin ochiladi\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Company Values & Additional Services - Integrated */}\n          <div className=\"bg-white rounded-2xl p-8 shadow-lg border border-neutral-100\">\n            <h3 className=\"text-2xl font-bold text-neutral-900 mb-8 text-center\">Bizning Professional Yondashuvimiz</h3>\n            \n            {/* Core Values */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n              <div className=\"text-center\">\n                <div className=\"w-16 h-16 bg-primary/10 rounded-xl flex items-center justify-center mx-auto mb-4\">\n                  <CheckCircle className=\"h-8 w-8 text-primary\" />\n                </div>\n                <h4 className=\"font-semibold text-neutral-900 mb-2\">5+ Yillik Tajriba</h4>\n                <p className=\"text-sm text-neutral-600\">Professional marketplace management bo'yicha chuqur bilim</p>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"w-16 h-16 bg-accent/10 rounded-xl flex items-center justify-center mx-auto mb-4\">\n                  <TrendingUp className=\"h-8 w-8 text-accent\" />\n                </div>\n                <h4 className=\"font-semibold text-neutral-900 mb-2\">24/7 Monitoring</h4>\n                <p className=\"text-sm text-neutral-600\">Doimiy kuzatuv va tezkor javob berish</p>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"w-16 h-16 bg-secondary/10 rounded-xl flex items-center justify-center mx-auto mb-4\">\n                  <Package className=\"h-8 w-8 text-secondary\" />\n                </div>\n                <h4 className=\"font-semibold text-neutral-900 mb-2\">Foyda Kafolati</h4>\n                <p className=\"text-sm text-neutral-600\">Transparent narxlar va haqiqiy natijalar</p>\n              </div>\n            </div>\n\n            {/* Additional Services */}\n            <div className=\"border-t pt-8\">\n              <h4 className=\"text-lg font-semibold text-neutral-900 mb-6 text-center\">Qo'shimcha Professional Xizmatlar</h4>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                <div className=\"text-center\">\n                  <div className=\"w-14 h-14 bg-primary/10 rounded-xl flex items-center justify-center mx-auto mb-3\">\n                    <Users className=\"h-6 w-6 text-primary\" />\n                  </div>\n                  <h5 className=\"font-medium text-neutral-900 mb-1 text-sm\">Mijozlar Xizmati</h5>\n                  <p className=\"text-xs text-neutral-600\">24/7 qo'llab-quvvatlash</p>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"w-14 h-14 bg-accent/10 rounded-xl flex items-center justify-center mx-auto mb-3\">\n                    <TrendingUp className=\"h-6 w-6 text-accent\" />\n                  </div>\n                  <h5 className=\"font-medium text-neutral-900 mb-1 text-sm\">Marketing Support</h5>\n                  <p className=\"text-xs text-neutral-600\">Reklama va brending</p>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"w-14 h-14 bg-secondary/10 rounded-xl flex items-center justify-center mx-auto mb-3\">\n                    <Package className=\"h-6 w-6 text-secondary\" />\n                  </div>\n                  <h5 className=\"font-medium text-neutral-900 mb-1 text-sm\">Mahsulot Sourcing</h5>\n                  <p className=\"text-xs text-neutral-600\">Yangi mahsulotlar topish</p>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"w-14 h-14 bg-purple-100 rounded-xl flex items-center justify-center mx-auto mb-3\">\n                    <Target className=\"h-6 w-6 text-purple-600\" />\n                  </div>\n                  <h5 className=\"font-medium text-neutral-900 mb-1 text-sm\">Strategik Konsalting</h5>\n                  <p className=\"text-xs text-neutral-600\">Biznes strategiyasi</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Pricing Section */}\n      <section id=\"pricing\" className=\"py-20 bg-gradient-to-br from-neutral-50 via-white to-blue-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-neutral-900 mb-4\">\n              Professional Narx Strategiyasi\n            </h2>\n            <p className=\"text-xl text-neutral-600 max-w-2xl mx-auto\">\n              Sizning muvaffaqiyatingiz bizning muvaffaqiyatingiz\n            </p>\n          </div>\n\n          {/* Overview section - moved outside of card for full width */}\n          <div className=\"max-w-5xl mx-auto mb-16\">\n            <div className=\"bg-gradient-to-r from-blue-50 via-purple-50 to-indigo-50 rounded-2xl p-8 lg:p-12 border border-blue-100 shadow-lg\">\n              <h3 className=\"text-3xl font-bold text-neutral-900 mb-8 text-center\">4-Darajali Professional Tarif Tizimi</h3>\n              <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n                <div className=\"text-left space-y-4\">\n                  <p className=\"text-xl text-neutral-700\">\n                    <strong>Fiksa to'lov + Sof foydadan progressiv komissiya</strong>\n                  </p>\n                  <div className=\"text-neutral-600 leading-relaxed space-y-3\">\n                    <p>\n                      Hamkor sof foydadan (barcha xarajatlar ayrilgandan keyin) progressiv tarzda komissiya to'laydi.\n                    </p>\n                    <p>\n                      SPT (qadoqlash) xarajati: <strong>2,000 so'm/dona</strong> (barcha tariflarda bir xil).\n                    </p>\n                    <p>\n                      <strong>To'liq fulfillment xizmati:</strong> akkaunt boshqaruv, kontent yaratish, qadoqlash, mijozlar bilan aloqa!\n                    </p>\n                  </div>\n                </div>\n                <div className=\"flex justify-center\">\n                  <img \n                    src={tierImage} \n                    alt=\"4-Tier Fulfillment Fee Structure\"\n                    className=\"w-full max-w-sm h-auto rounded-xl shadow-lg\"\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Pricing cards - full width layout */}\n          <div className=\"w-full\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-8 mb-12\">\n\n\n                {/* Starter Pro - Risk-free */}\n                <Card className=\"relative bg-gradient-to-br from-emerald-50 via-green-50 to-teal-50 border-2 border-green-200 shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1\" data-testid=\"starter-pro\">\n                  <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2\">\n                    <div className=\"bg-green-500 text-white text-xs px-3 py-1 rounded-full font-medium\">\n                      RISKSIZ BOSHLASH\n                    </div>\n                  </div>\n                  <CardContent className=\"p-6 text-center pt-8\">\n                    <div className=\"w-12 h-12 mx-auto mb-4 bg-green-100 rounded-full flex items-center justify-center\">\n                      <Rocket className=\"w-6 h-6 text-green-600\" />\n                    </div>\n                    <div className=\"text-xl font-bold text-green-700 mb-2\">\n                      Starter Pro\n                    </div>\n                    <div className=\"text-3xl font-bold text-green-600 mb-1\">0 so'm</div>\n                    <div className=\"text-sm text-green-600 mb-4\">fiksa to'lov</div>\n                    <div className=\"bg-green-100 rounded-lg p-3 mb-4\">\n                      <div className=\"text-green-700 font-semibold text-sm\">Sof foydaning</div>\n                      <div className=\"text-green-800 font-bold text-lg\">30-45%</div>\n                    </div>\n                    <ul className=\"text-sm text-neutral-700 space-y-2 text-left\">\n                      <li className=\"flex items-center\"><CheckCircle className=\"w-4 h-4 text-green-500 mr-2 flex-shrink-0\" />Shaxsiy menejer</li>\n                      <li className=\"flex items-center\"><CheckCircle className=\"w-4 h-4 text-green-500 mr-2 flex-shrink-0\" />Haftalik hisobotlar</li>\n                      <li className=\"flex items-center\"><CheckCircle className=\"w-4 h-4 text-green-500 mr-2 flex-shrink-0\" />25 mahsulot so'rovi/oy</li>\n                      <li className=\"flex items-center\"><CheckCircle className=\"w-4 h-4 text-green-500 mr-2 flex-shrink-0\" />MySklad integratsiya</li>\n                      <li className=\"flex items-center\"><CheckCircle className=\"w-4 h-4 text-green-500 mr-2 flex-shrink-0\" />Asosiy marketplace</li>\n                    </ul>\n                  </CardContent>\n                </Card>\n\n                {/* Business Standard */}\n                <Card className=\"relative bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 border-2 border-blue-200 shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1\" data-testid=\"business-standard\">\n                  <CardContent className=\"p-6 text-center\">\n                    <div className=\"w-12 h-12 mx-auto mb-4 bg-blue-100 rounded-full flex items-center justify-center\">\n                      <Store className=\"w-6 h-6 text-blue-600\" />\n                    </div>\n                    <div className=\"text-xl font-bold text-blue-700 mb-2\">\n                      Business Standard\n                    </div>\n                    <div className=\"text-3xl font-bold text-blue-600 mb-1\">3.5M so'm</div>\n                    <div className=\"text-sm text-blue-600 mb-4\">fiksa to'lov</div>\n                    <div className=\"bg-blue-100 rounded-lg p-3 mb-4\">\n                      <div className=\"text-blue-700 font-semibold text-sm\">Sof foydaning</div>\n                      <div className=\"text-blue-800 font-bold text-lg\">18-25%</div>\n                    </div>\n                    <ul className=\"text-sm text-neutral-700 space-y-2 text-left\">\n                      <li className=\"flex items-center\"><CheckCircle className=\"w-4 h-4 text-blue-500 mr-2 flex-shrink-0\" />API to'liq kirish</li>\n                      <li className=\"flex items-center\"><CheckCircle className=\"w-4 h-4 text-blue-500 mr-2 flex-shrink-0\" />Kunlik hisobotlar</li>\n                      <li className=\"flex items-center\"><CheckCircle className=\"w-4 h-4 text-blue-500 mr-2 flex-shrink-0\" />100 mahsulot so'rovi/oy</li>\n                      <li className=\"flex items-center\"><CheckCircle className=\"w-4 h-4 text-blue-500 mr-2 flex-shrink-0\" />Priority chat support</li>\n                      <li className=\"flex items-center\"><CheckCircle className=\"w-4 h-4 text-blue-500 mr-2 flex-shrink-0\" />Marketing konsultatsiya</li>\n                    </ul>\n                  </CardContent>\n                </Card>\n\n                {/* Professional Plus */}\n                <Card className=\"relative bg-gradient-to-br from-violet-50 via-purple-50 to-fuchsia-50 border-2 border-purple-200 shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1\" data-testid=\"professional-plus\">\n                  <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2\">\n                    <div className=\"bg-purple-500 text-white text-xs px-3 py-1 rounded-full font-medium\">\n                      PREMIUM\n                    </div>\n                  </div>\n                  <CardContent className=\"p-6 text-center pt-8\">\n                    <div className=\"w-12 h-12 mx-auto mb-4 bg-purple-100 rounded-full flex items-center justify-center\">\n                      <Target className=\"w-6 h-6 text-purple-600\" />\n                    </div>\n                    <div className=\"text-xl font-bold text-purple-700 mb-2\">\n                      Professional Plus\n                    </div>\n                    <div className=\"text-3xl font-bold text-purple-600 mb-1\">6M so'm</div>\n                    <div className=\"text-sm text-purple-600 mb-4\">fiksa to'lov</div>\n                    <div className=\"bg-purple-100 rounded-lg p-3 mb-4\">\n                      <div className=\"text-purple-700 font-semibold text-sm\">Sof foydaning</div>\n                      <div className=\"text-purple-800 font-bold text-lg\">15-20%</div>\n                    </div>\n                    <ul className=\"text-sm text-neutral-700 space-y-2 text-left\">\n                      <li className=\"flex items-center\"><CheckCircle className=\"w-4 h-4 text-purple-500 mr-2 flex-shrink-0\" />Shaxsiy menejer</li>\n                      <li className=\"flex items-center\"><CheckCircle className=\"w-4 h-4 text-purple-500 mr-2 flex-shrink-0\" />Custom dashboard</li>\n                      <li className=\"flex items-center\"><CheckCircle className=\"w-4 h-4 text-purple-500 mr-2 flex-shrink-0\" />Cheksiz so'rovlar</li>\n                      <li className=\"flex items-center\"><CheckCircle className=\"w-4 h-4 text-purple-500 mr-2 flex-shrink-0\" />24/7 VIP support</li>\n                      <li className=\"flex items-center\"><CheckCircle className=\"w-4 h-4 text-purple-500 mr-2 flex-shrink-0\" />Priority queue</li>\n                    </ul>\n                  </CardContent>\n                </Card>\n\n                {/* Enterprise Elite */}\n                <Card className=\"relative bg-gradient-to-br from-amber-50 via-yellow-50 to-orange-50 border-2 border-amber-300 shadow-xl hover:shadow-2xl transition-all duration-300 transform hover:-translate-y-1\" data-testid=\"enterprise-elite\">\n                  <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2\">\n                    <div className=\"bg-gradient-to-r from-amber-500 to-orange-500 text-white text-xs px-3 py-1 rounded-full font-medium\">\n                      ENTERPRISE\n                    </div>\n                  </div>\n                  <CardContent className=\"p-6 text-center pt-8\">\n                    <div className=\"w-12 h-12 mx-auto mb-4 bg-gradient-to-br from-amber-100 to-orange-100 rounded-full flex items-center justify-center\">\n                      <Package className=\"w-6 h-6 text-amber-600\" />\n                    </div>\n                    <div className=\"text-xl font-bold text-amber-700 mb-2\">\n                      Enterprise Elite\n                    </div>\n                    <div className=\"text-3xl font-bold text-amber-600 mb-1\">10M so'm</div>\n                    <div className=\"text-sm text-amber-600 mb-4\">fiksa to'lov</div>\n                    <div className=\"bg-gradient-to-r from-amber-100 to-orange-100 rounded-lg p-3 mb-4\">\n                      <div className=\"text-amber-700 font-semibold text-sm\">Sof foydaning</div>\n                      <div className=\"text-amber-800 font-bold text-lg\">12-18%</div>\n                    </div>\n                    <ul className=\"text-sm text-neutral-700 space-y-2 text-left\">\n                      <li className=\"flex items-center\"><CheckCircle className=\"w-4 h-4 text-amber-500 mr-2 flex-shrink-0\" />Custom packaging</li>\n                      <li className=\"flex items-center\"><CheckCircle className=\"w-4 h-4 text-amber-500 mr-2 flex-shrink-0\" />VIP fulfillment</li>\n                      <li className=\"flex items-center\"><CheckCircle className=\"w-4 h-4 text-amber-500 mr-2 flex-shrink-0\" />Real-time optimization</li>\n                      <li className=\"flex items-center\"><CheckCircle className=\"w-4 h-4 text-amber-500 mr-2 flex-shrink-0\" />Executive insights</li>\n                      <li className=\"flex items-center\"><CheckCircle className=\"w-4 h-4 text-amber-500 mr-2 flex-shrink-0\" />Dedicated account</li>\n                    </ul>\n                  </CardContent>\n                </Card>\n            </div>\n\n            {/* CTA section */}\n            <div className=\"max-w-5xl mx-auto\">\n              <div className=\"text-center mb-8\">\n                <Button \n                  onClick={() => window.location.href = '/partner-registration'}\n                  size=\"lg\"\n                  className=\"bg-primary hover:bg-secondary transform hover:scale-105 transition-all shadow-lg\"\n                  data-testid=\"button-partnership\"\n                >\n                  <Target className=\"mr-2 h-5 w-5\" />\n                  Hamkorlik Boshlash\n                </Button>\n                <p className=\"text-sm text-neutral-600 mt-4\">15 kunlik sinov muddati bilan</p>\n              </div>\n              \n              {/* Professional Commission Calculator */}\n              <div className=\"mt-12\">\n                <h4 className=\"text-2xl font-semibold text-neutral-900 mb-6 text-center\">Professional Komissiya Kalkulyatori</h4>\n                <FulfillmentCalculator className=\"max-w-4xl mx-auto\" />\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section id=\"contact\" className=\"py-16 bg-gradient-to-br from-primary to-secondary\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h2 className=\"text-3xl md:text-4xl font-bold text-white mb-4\">\n            Hamkorlikni Bugun Boshlaylik\n          </h2>\n          <p className=\"text-xl text-blue-100 mb-8 max-w-2xl mx-auto\">\n            Professional marketplace management xizmati bilan biznesingizni keyingi bosqichga olib chiqing\n          </p>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 mb-12\">\n            <div className=\"text-center cursor-pointer hover:scale-105 transition-transform\" data-testid=\"contact-phone\" onClick={() => window.open('tel:+998901234567')}>\n              <div className=\"w-16 h-16 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-4 hover:bg-white/30 transition-colors\">\n                <Phone className=\"h-8 w-8 text-white\" />\n              </div>\n              <h3 className=\"text-lg font-semibold text-white mb-2\">Telefon</h3>\n              <p className=\"text-blue-100\">+998 90 123 45 67</p>\n            </div>\n            \n            <div className=\"text-center cursor-pointer hover:scale-105 transition-transform\" data-testid=\"contact-email\" onClick={() => window.open('mailto:info@marketplacepro.uz')}>\n              <div className=\"w-16 h-16 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-4 hover:bg-white/30 transition-colors\">\n                <Mail className=\"h-8 w-8 text-white\" />\n              </div>\n              <h3 className=\"text-lg font-semibold text-white mb-2\">Email</h3>\n              <p className=\"text-blue-100\">info@marketplacepro.uz</p>\n            </div>\n            \n            <div className=\"text-center cursor-pointer hover:scale-105 transition-transform\" data-testid=\"contact-telegram\" onClick={() => window.open('https://t.me/MarketplacePro', '_blank')}>\n              <div className=\"w-16 h-16 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-4 hover:bg-white/30 transition-colors\">\n                <MessageCircle className=\"h-8 w-8 text-white\" />\n              </div>\n              <h3 className=\"text-lg font-semibold text-white mb-2\">Telegram</h3>\n              <p className=\"text-blue-100\">@MarketplacePro</p>\n            </div>\n          </div>\n          \n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button \n              variant=\"secondary\"\n              size=\"lg\"\n              className=\"bg-white text-primary hover:bg-neutral-100 transform hover:scale-105 transition-all shadow-lg\"\n              data-testid=\"button-consultation\"\n              onClick={() => window.open('https://t.me/MarketplacePro', '_blank')}\n            >\n              <MessageCircle className=\"mr-2 h-5 w-5\" />\n              Bepul Konsultatsiya\n            </Button>\n            <Button \n              size=\"lg\"\n              className=\"bg-accent text-white hover:bg-green-600 transform hover:scale-105 transition-all shadow-lg\"\n              data-testid=\"button-partner-registration\"\n              onClick={() => window.location.href = '/partner-registration'}\n            >\n              <Users className=\"mr-2 h-5 w-5\" />\n              Hamkor Bo'lish\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-neutral-900 text-white py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n            <div className=\"col-span-1 md:col-span-2\">\n              <h3 className=\"text-3xl font-bold mb-4 text-primary\">MarketPlace Pro</h3>\n              <p className=\"text-neutral-300 mb-6 max-w-md leading-relaxed\">\n                Professional marketplace management xizmatlari orqali biznesingizni rivojlantiring va yuqori daromad oling. \n                Uzum Market, Wildberries, Yandex Market bilan to'liq integratsiya.\n              </p>\n              <div className=\"flex space-x-4\">\n                <div \n                  className=\"w-10 h-10 bg-primary/20 rounded-full flex items-center justify-center cursor-pointer hover:bg-primary/40 transition-colors\"\n                  onClick={() => window.open('https://t.me/MarketplacePro', '_blank')}\n                >\n                  <MessageCircle className=\"h-5 w-5 text-primary\" />\n                </div>\n                <div \n                  className=\"w-10 h-10 bg-primary/20 rounded-full flex items-center justify-center cursor-pointer hover:bg-primary/40 transition-colors\"\n                  onClick={() => window.open('mailto:info@marketplacepro.uz')}\n                >\n                  <Mail className=\"h-5 w-5 text-primary\" />\n                </div>\n                <div \n                  className=\"w-10 h-10 bg-primary/20 rounded-full flex items-center justify-center cursor-pointer hover:bg-primary/40 transition-colors\"\n                  onClick={() => window.open('tel:+998901234567')}\n                >\n                  <Phone className=\"h-5 w-5 text-primary\" />\n                </div>\n              </div>\n            </div>\n            \n            <div>\n              <h4 className=\"text-lg font-semibold mb-6 text-white\">Xizmatlar</h4>\n              <ul className=\"space-y-3 text-neutral-400\">\n                <li><a href=\"#services\" className=\"hover:text-primary transition-colors cursor-pointer\">Marketplace Management</a></li>\n                <li><a href=\"#services\" className=\"hover:text-primary transition-colors cursor-pointer\">MySklad Integratsiya</a></li>\n                <li><a href=\"#dashboard\" className=\"hover:text-primary transition-colors cursor-pointer\">Analitika Dashboard</a></li>\n                <li><a href=\"#pricing\" className=\"hover:text-primary transition-colors cursor-pointer\">4-Tier Pricing</a></li>\n                <li className=\"hover:text-primary transition-colors cursor-pointer\">Logistika va Fulfillment</li>\n                <li className=\"hover:text-primary transition-colors cursor-pointer\">Professional Konsalting</li>\n              </ul>\n            </div>\n            \n            <div>\n              <h4 className=\"text-lg font-semibold mb-6 text-white\">Kompaniya</h4>\n              <ul className=\"space-y-3 text-neutral-400\">\n                <li><span className=\"hover:text-primary transition-colors cursor-pointer\">Biz Haqimizda</span></li>\n                <li><span className=\"hover:text-primary transition-colors cursor-pointer\">Professional Jamoa</span></li>\n                <li><span className=\"hover:text-primary transition-colors cursor-pointer\">Karyera Imkoniyatlari</span></li>\n                <li><a href=\"#contact\" className=\"hover:text-primary transition-colors cursor-pointer\">Aloqa</a></li>\n                <li><span className=\"hover:text-primary transition-colors cursor-pointer\">Shartlar va Qoidalar</span></li>\n                <li><span className=\"hover:text-primary transition-colors cursor-pointer\">Maxfiylik Siyosati</span></li>\n              </ul>\n            </div>\n          </div>\n          \n          <div className=\"border-t border-neutral-800 mt-12 pt-8\">\n            <div className=\"flex flex-col md:flex-row justify-between items-center\">\n              <p className=\"text-neutral-400 mb-4 md:mb-0\">\n                © 2025 MarketPlace Pro. Barcha huquqlar himoyalangan.\n              </p>\n              <div className=\"flex space-x-6 text-sm text-neutral-400\">\n                <span className=\"hover:text-primary transition-colors cursor-pointer\">Foydalanish Shartlari</span>\n                <span className=\"hover:text-primary transition-colors cursor-pointer\">Maxfiylik</span>\n                <span className=\"hover:text-primary transition-colors cursor-pointer\">Yordam</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":41954},"client/src/pages/not-found.tsx":{"content":"import React from 'react';\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Home, AlertTriangle } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\nexport default function NotFound() {\n  const [, setLocation] = useLocation();\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md text-center shadow-2xl border-slate-700\">\n        <CardHeader className=\"space-y-4\">\n          <div className=\"mx-auto w-16 h-16 bg-gradient-to-br from-orange-500 to-red-500 rounded-xl flex items-center justify-center\">\n            <AlertTriangle className=\"w-8 h-8 text-white\" />\n          </div>\n          <CardTitle className=\"text-3xl font-bold text-slate-800\">404</CardTitle>\n          <CardDescription className=\"text-lg text-slate-600\">\n            Sahifa topilmadi\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <p className=\"text-slate-600\">\n            Siz qidirayotgan sahifa mavjud emas yoki ko'chirilgan.\n          </p>\n          <Button\n            onClick={() => setLocation('/')}\n            className=\"w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700\"\n          >\n            <Home className=\"w-4 h-4 mr-2\" />\n            Bosh sahifaga qaytish\n          </Button>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":1563},"client/src/pages/partner-dashboard.tsx":{"content":"import React, { useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Loader2, Handshake, ShoppingBag, TrendingUp, Package } from 'lucide-react';\n\nexport default function PartnerDashboard() {\n  const [, navigate] = useLocation();\n  const { user, logout, isLoading } = useAuth();\n\n  // Redirect if not authenticated or not partner\n  useEffect(() => {\n    if (!isLoading && (!user || user.role !== 'partner')) {\n      navigate('/login');\n    }\n  }, [user, isLoading, navigate]);\n\n  const handleLogout = async () => {\n    await logout();\n    navigate('/login');\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Loader2 className=\"h-8 w-8 animate-spin mx-auto mb-4\" />\n          <p className=\"text-gray-600\">Yuklanmoqda...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user || user.role !== 'partner') {\n    return null; // Will redirect via useEffect\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <header className=\"bg-white shadow\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-6\">\n            <div className=\"flex items-center\">\n              <Handshake className=\"h-8 w-8 text-green-600 mr-3\" />\n              <h1 className=\"text-3xl font-bold text-gray-900\">Partner Dashboard</h1>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <span className=\"text-sm text-gray-600\">\n                Xush kelibsiz, {user.firstName || user.username}\n              </span>\n              <Button onClick={handleLogout} variant=\"outline\">\n                Chiqish\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"max-w-7xl mx-auto py-6 sm:px-6 lg:px-8\">\n        <div className=\"px-4 py-6 sm:px-0\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            \n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Mahsulotlar</CardTitle>\n                <ShoppingBag className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">12</div>\n                <p className=\"text-xs text-muted-foreground\">\n                  Sizning mahsulotlaringiz\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Buyurtmalar</CardTitle>\n                <Package className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">89</div>\n                <p className=\"text-xs text-muted-foreground\">\n                  Bu oylik buyurtmalar\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Daromad</CardTitle>\n                <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">2.4M</div>\n                <p className=\"text-xs text-muted-foreground\">\n                  Bu oylik daromad\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"mt-8\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Partner Dashboard</CardTitle>\n                <CardDescription>\n                  Sizning hamkorlik ma'lumotlaringiz\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <p className=\"text-sm text-gray-600\">\n                    <strong>Partner:</strong> {user.username}\n                  </p>\n                  <p className=\"text-sm text-gray-600\">\n                    <strong>Rol:</strong> {user.role === 'admin' ? 'Administrator' : 'Hamkor'}\n                  </p>\n                  <p className=\"text-sm text-gray-600\">\n                    <strong>ID:</strong> {user.id}\n                  </p>\n                  \n                  <div className=\"pt-4 border-t\">\n                    <h3 className=\"text-lg font-medium mb-4\">Hamkorlik holati</h3>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n                        <span className=\"text-sm\">Hisob: Faol</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n                        <span className=\"text-sm\">Tasdiqlangan: Ha</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":5610},"client/src/utils/excelExport.ts":{"content":"import * as XLSX from 'xlsx';\nimport type { PartnerWithUser, Product, OrderWithDetails, ProductRequestWithDetails } from '../../../shared/schema';\n\nexport const exportPartnersToExcel = (partners: PartnerWithUser[]) => {\n  const data = partners.map(partner => ({\n    'ID': partner.id,\n    'Ism': partner.user.firstName || '',\n    'Email': partner.user.email,\n    'Biznes Nomi': partner.businessName || '',\n    'Tavsifi': partner.description || '',\n    'Tarif': partner.pricingTier || 'basic',\n    'Fiksatsiya (oy)': Number(partner.fixedPayment || 0).toLocaleString() + ' so\\'m',\n    'Komissiya (%)': partner.commissionRate + '%',\n    'Jami Savdo': Number(partner.totalSales || 0).toLocaleString() + ' so\\'m',\n    'Oylik Savdo': Number(partner.monthlySales || 0).toLocaleString() + ' so\\'m',\n    'Jami Foyda': Number(partner.totalProfit || 0).toLocaleString() + ' so\\'m',\n    'Oylik Foyda': Number(partner.monthlyProfit || 0).toLocaleString() + ' so\\'m',\n    'Jami Bonus': Number(partner.totalBonus || 0).toLocaleString() + ' so\\'m',\n    'Oylik Bonus': Number(partner.monthlyBonus || 0).toLocaleString() + ' so\\'m',\n    'Yaratilgan Sana': partner.createdAt ? new Date(partner.createdAt).toLocaleDateString('uz-UZ') : '',\n    'Yangilangan': partner.updatedAt ? new Date(partner.updatedAt).toLocaleDateString('uz-UZ') : '',\n  }));\n\n  const worksheet = XLSX.utils.json_to_sheet(data);\n  const workbook = XLSX.utils.book_new();\n  XLSX.utils.book_append_sheet(workbook, worksheet, 'Hamkorlar');\n  \n  XLSX.writeFile(workbook, `hamkorlar_${new Date().toISOString().split('T')[0]}.xlsx`);\n};\n\nexport const exportInventoryToExcel = (products: Product[]) => {\n  const data = products.map(product => ({\n    'ID': product.id,\n    'Mahsulot Nomi': product.name,\n    'SKU': product.sku,\n    'Sotuv Narxi': Number(product.price).toLocaleString() + ' so\\'m',\n    'Sebestoimost': Number(product.costPrice || 0).toLocaleString() + ' so\\'m',\n    'Zaxira Miqdori': product.stockQuantity || 0,\n    'Yetkazilgan': product.deliveredQuantity || 0,\n    'Sotilgan': product.soldQuantity || 0,\n    'Qoldiq': (product.deliveredQuantity || 0) - (product.soldQuantity || 0),\n    'Status': (product.stockQuantity || 0) <= 5 ? 'Kritik' : \n              (product.stockQuantity || 0) <= 10 ? 'Kam' : 'Yaxshi',\n    'Tavsifi': product.description || '',\n    'Yaratilgan': product.createdAt ? new Date(product.createdAt).toLocaleDateString('uz-UZ') : '',\n  }));\n\n  const worksheet = XLSX.utils.json_to_sheet(data);\n  const workbook = XLSX.utils.book_new();\n  XLSX.utils.book_append_sheet(workbook, worksheet, 'Inventar');\n  \n  XLSX.writeFile(workbook, `inventar_${new Date().toISOString().split('T')[0]}.xlsx`);\n};\n\nexport const exportOrdersToExcel = (orders: OrderWithDetails[]) => {\n  const data = orders.map(order => ({\n    'Order ID': order.id,\n    'Hamkor': order.partner.user.firstName || order.partner.user.email,\n    'Mijoz': order.customerName,\n    'Mahsulot': order.product.name,\n    'Miqdor': order.quantity,\n    'Jami Summa': order.totalAmount,\n    'Status': order.status,\n    'Buyurtma Sanasi': order.createdAt ? new Date(order.createdAt).toLocaleDateString('uz-UZ') : '',\n  }));\n\n  const worksheet = XLSX.utils.json_to_sheet(data);\n  const workbook = XLSX.utils.book_new();\n  XLSX.utils.book_append_sheet(workbook, worksheet, 'Buyurtmalar');\n  \n  XLSX.writeFile(workbook, `buyurtmalar_${new Date().toISOString().split('T')[0]}.xlsx`);\n};\n\nexport const exportRequestsToExcel = (requests: ProductRequestWithDetails[]) => {\n  const data = requests.map(request => ({\n    'ID': request.id,\n    'Hamkor': request.partner.user.firstName || request.partner.user.email,\n    'Mahsulot Nomi': request.productName,\n    'Taxminiy Narx': request.estimatedPrice || '',\n    'Kutilayotgan Miqdor': request.expectedQuantity || '',\n    'Status': request.status === 'pending' ? 'Kutilmoqda' : \n              request.status === 'approved' ? 'Tasdiqlandi' : 'Rad etildi',\n    'Muhimlik Darajasi': request.urgencyLevel || 'Normal',\n    'Tavsifi': request.description || '',\n    'Yetkazib Beruvchi': request.supplierInfo || '',\n    'So\\'rov Sanasi': request.createdAt ? new Date(request.createdAt).toLocaleDateString('uz-UZ') : '',\n  }));\n\n  const worksheet = XLSX.utils.json_to_sheet(data);\n  const workbook = XLSX.utils.book_new();\n  XLSX.utils.book_append_sheet(workbook, worksheet, 'Mahsulot Sorovlari');\n  \n  XLSX.writeFile(workbook, `sorovlar_${new Date().toISOString().split('T')[0]}.xlsx`);\n};","size_bytes":4452},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"import * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }","size_bytes":1404},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }","size_bytes":776},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }","size_bytes":1641},"client/src/components/ui/select.tsx":{"content":"import * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}","size_bytes":5614},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}","size_bytes":2764},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }","size_bytes":1882},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }","size_bytes":771},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/partner-activation-form.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { \n  Building2,\n  CreditCard,\n  FileText,\n  CheckCircle2,\n  Clock,\n  AlertTriangle\n} from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport function PartnerActivationForm() {\n  const { toast } = useToast();\n  const [formData, setFormData] = useState({\n    companyName: \"\",\n    inn: \"\",\n    bankName: \"\",\n    bankAccount: \"\",\n    legalAddress: \"\",\n    subscriptionTier: \"\",\n    additionalInfo: \"\",\n  });\n\n  // Get existing legal info\n  const { data: existingLegalInfo, isLoading: isLoadingLegalInfo } = useQuery({\n    queryKey: ['/api/partner-legal-info'],\n    retry: false,\n  });\n\n  const activationMutation = useMutation({\n    mutationFn: async (data: any) => {\n      await apiRequest(\"POST\", \"/api/partner-legal-info\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Muvaffaqiyat!\",\n        description: \"Aktivatsiya so'rovingiz yuborildi. Admin tomonidan ko'rib chiqilgandan keyin, hisobingiz faollashtiriladi.\",\n      });\n      // Refetch legal info\n      window.location.reload();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Xatolik\",\n        description: \"Aktivatsiya so'rovini yuborishda xatolik yuz berdi.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    activationMutation.mutate(formData);\n  };\n\n  // Show existing legal info status if available\n  if (existingLegalInfo && existingLegalInfo.length > 0) {\n    const legalInfo = existingLegalInfo[0];\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <FileText className=\"h-5 w-5\" />\n            Aktivatsiya Holati\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"font-medium\">Holat:</span>\n              <Badge variant={\n                legalInfo.activationStatus === 'pending' ? 'secondary' : \n                legalInfo.activationStatus === 'approved' ? 'default' : 'destructive'\n              }>\n                {legalInfo.activationStatus === 'pending' ? 'Kutilmoqda' : \n                 legalInfo.activationStatus === 'approved' ? 'Faollashtirilgan' : 'Rad etilgan'}\n              </Badge>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <p><strong>Kompaniya nomi:</strong> {legalInfo.companyName}</p>\n              <p><strong>INN:</strong> {legalInfo.inn}</p>\n              <p><strong>Bank:</strong> {legalInfo.bankName}</p>\n              <p><strong>Hisob raqami:</strong> {legalInfo.bankAccount}</p>\n              <p><strong>Obuna tarifi:</strong> {legalInfo.subscriptionTier}</p>\n            </div>\n\n            {legalInfo.activationStatus === 'pending' && (\n              <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4 mt-4\">\n                <div className=\"flex items-center gap-2 text-yellow-800\">\n                  <Clock className=\"h-4 w-4\" />\n                  <span className=\"font-medium\">Kutilmoqda</span>\n                </div>\n                <p className=\"text-yellow-700 text-sm mt-1\">\n                  Aktivatsiya so'rovingiz admin tomonidan ko'rib chiqilmoqda. Iltimos, biroz kuting.\n                </p>\n              </div>\n            )}\n\n            {legalInfo.activationStatus === 'approved' && (\n              <div className=\"bg-green-50 border border-green-200 rounded-lg p-4 mt-4\">\n                <div className=\"flex items-center gap-2 text-green-800\">\n                  <CheckCircle2 className=\"h-4 w-4\" />\n                  <span className=\"font-medium\">Faollashtirilgan</span>\n                </div>\n                <p className=\"text-green-700 text-sm mt-1\">\n                  Hisobingiz muvaffaqiyatli faollashtirildi. Endi barcha xizmatlardan foydalanishingiz mumkin.\n                </p>\n              </div>\n            )}\n\n            {legalInfo.activationStatus === 'rejected' && legalInfo.rejectionReason && (\n              <div className=\"bg-red-50 border border-red-200 rounded-lg p-4 mt-4\">\n                <div className=\"flex items-center gap-2 text-red-800\">\n                  <AlertTriangle className=\"h-4 w-4\" />\n                  <span className=\"font-medium\">Rad etilgan</span>\n                </div>\n                <p className=\"text-red-700 text-sm mt-1\">\n                  <strong>Sabab:</strong> {legalInfo.rejectionReason}\n                </p>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Building2 className=\"h-5 w-5\" />\n          Hisobni Faollashtirish\n        </CardTitle>\n        <p className=\"text-sm text-neutral-600\">\n          Hisobingizni to'liq faollashtirish uchun yuridik ma'lumotlar va obuna tarifini tanlang\n        </p>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          {/* Company Information */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold text-neutral-900\">\n              Kompaniya Ma'lumotlari\n            </h3>\n            \n            <div className=\"grid md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"companyName\">Kompaniya nomi</Label>\n                <Input\n                  id=\"companyName\"\n                  data-testid=\"input-companyName\"\n                  type=\"text\"\n                  value={formData.companyName}\n                  onChange={(e) => setFormData({ ...formData, companyName: e.target.value })}\n                  placeholder=\"'Biznes Kompaniya' MChJ\"\n                  required\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"inn\">INN raqami</Label>\n                <Input\n                  id=\"inn\"\n                  data-testid=\"input-inn\"\n                  type=\"text\"\n                  value={formData.inn}\n                  onChange={(e) => setFormData({ ...formData, inn: e.target.value })}\n                  placeholder=\"123456789\"\n                  required\n                />\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"legalAddress\">Yuridik manzil</Label>\n              <Input\n                id=\"legalAddress\"\n                data-testid=\"input-legalAddress\"\n                type=\"text\"\n                value={formData.legalAddress}\n                onChange={(e) => setFormData({ ...formData, legalAddress: e.target.value })}\n                placeholder=\"Toshkent sh., Yunusobod tumani, ...\"\n                required\n              />\n            </div>\n          </div>\n\n          {/* Banking Information */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold text-neutral-900 flex items-center gap-2\">\n              <CreditCard className=\"h-5 w-5\" />\n              Bank Ma'lumotlari\n            </h3>\n            \n            <div className=\"grid md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"bankName\">Bank nomi</Label>\n                <Input\n                  id=\"bankName\"\n                  data-testid=\"input-bankName\"\n                  type=\"text\"\n                  value={formData.bankName}\n                  onChange={(e) => setFormData({ ...formData, bankName: e.target.value })}\n                  placeholder=\"'Ipoteka Bank' AKB\"\n                  required\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"bankAccount\">Hisob raqami</Label>\n                <Input\n                  id=\"bankAccount\"\n                  data-testid=\"input-bankAccount\"\n                  type=\"text\"\n                  value={formData.bankAccount}\n                  onChange={(e) => setFormData({ ...formData, bankAccount: e.target.value })}\n                  placeholder=\"22618000400010001001\"\n                  required\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* Subscription Tier */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold text-neutral-900\">\n              Obuna Tarifi\n            </h3>\n            \n            <div>\n              <Label htmlFor=\"subscriptionTier\">Tarif tanlang</Label>\n              <Select\n                value={formData.subscriptionTier}\n                onValueChange={(value) => setFormData({ ...formData, subscriptionTier: value })}\n              >\n                <SelectTrigger data-testid=\"select-subscriptionTier\">\n                  <SelectValue placeholder=\"Obuna tarifini tanlang\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"starter_pro\">🚀 Starter Pro - 0 so'm/oy (Risk-free)</SelectItem>\n                  <SelectItem value=\"business_standard\">💼 Business Standard - 3.5M so'm/oy</SelectItem>\n                  <SelectItem value=\"professional_plus\">⭐ Professional Plus - 6M so'm/oy</SelectItem>\n                  <SelectItem value=\"enterprise_elite\">👑 Enterprise Elite - 10M so'm/oy</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            {/* Detailed Subscription Tier Information */}\n            {formData.subscriptionTier && (\n              <div className=\"space-y-4\">\n                {formData.subscriptionTier === 'starter_pro' && (\n                  <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n                    <h4 className=\"font-medium text-green-900 mb-3\">🚀 Starter Pro - 0 so'm/oy (Risk-free)</h4>\n                    <div className=\"text-sm text-green-800 space-y-2\">\n                      <div>\n                        <strong>To'lov tizimi (Sof foydadan):</strong>\n                        <ul className=\"ml-4 mt-1 space-y-1\">\n                          <li>• 0-5M sof foyda: 45% ulush</li>\n                          <li>• 5-15M sof foyda: 40% ulush</li>\n                          <li>• 15-30M sof foyda: 35% ulush</li>\n                          <li>• 30M+ sof foyda: 30% ulush</li>\n                          <li>• SPT xarajati: 2,000 so'm/dona</li>\n                        </ul>\n                      </div>\n                      <div>\n                        <strong>Xizmatlar:</strong>\n                        <ul className=\"ml-4 mt-1 space-y-1\">\n                          <li>• 2 oylik BEPUL sinov</li>\n                          <li>• Shaxsiy onboarding menejer</li>\n                          <li>• Haftalik performance hisobot</li>\n                          <li>• 25 mahsulot so'rovi/oy</li>\n                          <li>• Har 10 buyurtmada 1 ta BEPUL SPT</li>\n                        </ul>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {formData.subscriptionTier === 'business_standard' && (\n                  <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                    <h4 className=\"font-medium text-blue-900 mb-3\">💼 Business Standard - 3.5M so'm/oy</h4>\n                    <div className=\"text-sm text-blue-800 space-y-2\">\n                      <div>\n                        <strong>To'lov tizimi (Sof foydadan):</strong>\n                        <ul className=\"ml-4 mt-1 space-y-1\">\n                          <li>• 0-10M sof foyda: 25% ulush</li>\n                          <li>• 10-25M sof foyda: 22% ulush</li>\n                          <li>• 25-50M sof foyda: 20% ulush</li>\n                          <li>• 50M+ sof foyda: 18% ulush</li>\n                          <li>• SPT xarajati: 2,000 so'm/dona</li>\n                        </ul>\n                      </div>\n                      <div>\n                        <strong>Xizmatlar:</strong>\n                        <ul className=\"ml-4 mt-1 space-y-1\">\n                          <li>• API kirish</li>\n                          <li>• Oylik strategic review</li>\n                          <li>• Marketing support (templates)</li>\n                          <li>• 100 mahsulot so'rovi/oy</li>\n                          <li>• Priority chat support</li>\n                          <li>• Inventory forecasting</li>\n                        </ul>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {formData.subscriptionTier === 'professional_plus' && (\n                  <div className=\"bg-purple-50 border border-purple-200 rounded-lg p-4\">\n                    <h4 className=\"font-medium text-purple-900 mb-3\">⭐ Professional Plus - 6M so'm/oy</h4>\n                    <div className=\"text-sm text-purple-800 space-y-2\">\n                      <div>\n                        <strong>To'lov tizimi (Sof foydadan):</strong>\n                        <ul className=\"ml-4 mt-1 space-y-1\">\n                          <li>• 0-15M sof foyda: 20% ulush</li>\n                          <li>• 15-35M sof foyda: 18% ulush</li>\n                          <li>• 35-70M sof foyda: 16% ulush</li>\n                          <li>• 70M+ sof foyda: 15% ulush</li>\n                          <li>• SPT xarajati: 2,000 so'm/dona</li>\n                        </ul>\n                      </div>\n                      <div>\n                        <strong>Xizmatlar:</strong>\n                        <ul className=\"ml-4 mt-1 space-y-1\">\n                          <li>• Dedicated account manager</li>\n                          <li>• Custom dashboard</li>\n                          <li>• Advanced analytics</li>\n                          <li>• Priority fulfillment queue</li>\n                          <li>• Cheksiz mahsulot so'rovi</li>\n                          <li>• 24/7 priority support</li>\n                          <li>• White-label reporting</li>\n                        </ul>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {formData.subscriptionTier === 'enterprise_elite' && (\n                  <div className=\"bg-amber-50 border border-amber-200 rounded-lg p-4\">\n                    <h4 className=\"font-medium text-amber-900 mb-3\">👑 Enterprise Elite - 10M so'm/oy</h4>\n                    <div className=\"text-sm text-amber-800 space-y-2\">\n                      <div>\n                        <strong>To'lov tizimi (Sof foydadan):</strong>\n                        <ul className=\"ml-4 mt-1 space-y-1\">\n                          <li>• 0-25M sof foyda: 18% ulush</li>\n                          <li>• 25-50M sof foyda: 16% ulush</li>\n                          <li>• 50-100M sof foyda: 14% ulush</li>\n                          <li>• 100M+ sof foyda: 12% ulush</li>\n                          <li>• SPT xarajati: 2,000 so'm/dona</li>\n                        </ul>\n                      </div>\n                      <div>\n                        <strong>Xizmatlar:</strong>\n                        <ul className=\"ml-4 mt-1 space-y-1\">\n                          <li>• C-level executive access</li>\n                          <li>• Custom API integrations</li>\n                          <li>• Real-time profit optimization</li>\n                          <li>• Exclusive market insights</li>\n                          <li>• Custom packaging options</li>\n                          <li>• Priority fulfillment queue</li>\n                          <li>• Dedicated team assigned</li>\n                        </ul>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            )}\n\n            {/* General Tariff Overview */}\n            <div className=\"bg-gradient-to-r from-blue-50 to-green-50 border border-blue-200 rounded-lg p-4\">\n              <h4 className=\"font-medium text-neutral-900 mb-2\">🚀 Yangi Professional Tarif Tizimi:</h4>\n              <div className=\"text-sm text-neutral-700 space-y-1\">\n                <p><strong>Starter Pro (0 so'm):</strong> Risk-free boshlash, 2 oylik sinov, shaxsiy menejer</p>\n                <p><strong>Business Standard (3.5M):</strong> Kichik biznes uchun, API va marketing support</p>\n                <p><strong>Professional Plus (6M):</strong> O'rta biznes uchun, custom dashboard va menejer</p>\n                <p><strong>Enterprise Elite (10M):</strong> Yirik biznes uchun, executive access va VIP xizmat</p>\n                <p className=\"text-green-600 font-medium mt-2\">✅ Barcha komissiyalar SOF FOYDADAN olinadi (real xarajatlardan keyin)</p>\n                <p className=\"text-blue-600 font-medium\">✅ SPT xarajati barcha tariflarda 2,000 so'm/dona (real tannarx)</p>\n              </div>\n            </div>\n          </div>\n\n          {/* Additional Information */}\n          <div>\n            <Label htmlFor=\"additionalInfo\">Qo'shimcha ma'lumot (ixtiyoriy)</Label>\n            <Textarea\n              id=\"additionalInfo\"\n              data-testid=\"textarea-additionalInfo\"\n              value={formData.additionalInfo}\n              onChange={(e) => setFormData({ ...formData, additionalInfo: e.target.value })}\n              placeholder=\"Biznes haqida qo'shimcha ma'lumotlar...\"\n              rows={3}\n            />\n          </div>\n\n          {/* Submit */}\n          <Button\n            type=\"submit\"\n            className=\"w-full\"\n            size=\"lg\"\n            disabled={activationMutation.isPending}\n            data-testid=\"button-submit\"\n          >\n            {activationMutation.isPending ? \"Yuborilmoqda...\" : \"Aktivatsiya So'rovini Yuborish\"}\n          </Button>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":18313},"client/src/pages/admin-marketplace-management.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { \n  ArrowLeft,\n  Store,\n  Plus,\n  Settings,\n  TestTube,\n  Trash2,\n  CheckCircle,\n  XCircle,\n  Clock,\n  LogOut,\n  User\n} from \"lucide-react\";\nimport { Link, useParams } from \"wouter\";\nimport type { MarketplaceIntegration, PartnerWithUser } from \"@shared/schema\";\n\nexport default function AdminMarketplaceManagement() {\n  const { user, isLoading: authLoading } = useAuth();\n  const { toast } = useToast();\n  const params = useParams<{ partnerId: string }>();\n  const partnerId = params.partnerId;\n  \n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [newIntegration, setNewIntegration] = useState({\n    marketplace: \"\",\n    storeName: \"\",\n    apiKey: \"\",\n    storeUrl: \"\",\n    additionalConfig: \"\",\n  });\n\n  // Redirect if not authenticated or not admin\n  useEffect(() => {\n    if (!authLoading && (!user || (user as any).role !== 'admin')) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"Admin access required. Redirecting...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = user ? \"/\" : \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [user, authLoading, toast]);\n\n  const handleLogout = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  // Fetch partner info\n  const { data: partner, isLoading: partnerLoading } = useQuery({\n    queryKey: [`/api/admin/partners/${partnerId}`],\n    enabled: !!partnerId && !!user && (user as any).role === 'admin',\n  });\n\n  // Fetch partner's marketplace integrations\n  const { data: integrations = [], isLoading } = useQuery({\n    queryKey: [`/api/admin/partners/${partnerId}/marketplace-integrations`],\n    enabled: !!partnerId && !!user && (user as any).role === 'admin',\n  });\n\n  // Create integration mutation\n  const createIntegrationMutation = useMutation({\n    mutationFn: async (integration: typeof newIntegration) => {\n      return await apiRequest(\"POST\", `/api/admin/partners/${partnerId}/marketplace-integrations`, {\n        ...integration,\n        partnerId,\n        additionalConfig: integration.additionalConfig ? JSON.parse(integration.additionalConfig) : {},\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Muvaffaqiyat\",\n        description: \"Marketplace integratsiyasi yaratildi\",\n      });\n      queryClient.invalidateQueries({ queryKey: [`/api/admin/partners/${partnerId}/marketplace-integrations`] });\n      setIsCreateDialogOpen(false);\n      setNewIntegration({\n        marketplace: \"\",\n        storeName: \"\",\n        apiKey: \"\",\n        storeUrl: \"\",\n        additionalConfig: \"\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Xato\",\n        description: \"Integratsiyani yaratishda xato yuz berdi\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete integration mutation\n  const deleteIntegrationMutation = useMutation({\n    mutationFn: async (integrationId: string) => {\n      return await apiRequest(\"DELETE\", `/api/admin/marketplace-integrations/${integrationId}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Muvaffaqiyat\",\n        description: \"Integratsiya o'chirildi\",\n      });\n      queryClient.invalidateQueries({ queryKey: [`/api/admin/partners/${partnerId}/marketplace-integrations`] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Xato\",\n        description: \"Integratsiyani o'chirishda xato yuz berdi\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Test connection mutation\n  const testConnectionMutation = useMutation({\n    mutationFn: async (integrationId: string) => {\n      return await apiRequest(\"POST\", `/api/admin/marketplace-integrations/${integrationId}/test-connection`);\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Test muvaffaqiyatli\",\n        description: `${data.marketplace} ga bog'lanish muvaffaqiyatli`,\n      });\n      queryClient.invalidateQueries({ queryKey: [`/api/admin/partners/${partnerId}/marketplace-integrations`] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Test xatosi\",\n        description: \"API ga bog'lanishda xato yuz berdi\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateIntegration = () => {\n    if (!newIntegration.marketplace || !newIntegration.storeName || !newIntegration.apiKey) {\n      toast({\n        title: \"Xato\",\n        description: \"Barcha majburiy maydonlarni to'ldiring\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createIntegrationMutation.mutate(newIntegration);\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"success\":\n        return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n      case \"failed\":\n        return <XCircle className=\"h-4 w-4 text-red-500\" />;\n      default:\n        return <Clock className=\"h-4 w-4 text-yellow-500\" />;\n    }\n  };\n\n  const getMarketplaceDisplay = (marketplace: string) => {\n    switch (marketplace) {\n      case \"uzum_market\":\n        return \"Uzum Market\";\n      case \"yandex_market\":\n        return \"Yandex Market\";\n      default:\n        return marketplace;\n    }\n  };\n\n  if (authLoading || partnerLoading) {\n    return (\n      <div className=\"p-8\">\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"text-lg\">Yuklanmoqda...</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-neutral-50\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b border-neutral-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center\">\n              <Link href=\"/admin\" data-testid=\"link-back\">\n                <Button variant=\"ghost\" size=\"sm\" className=\"text-sm mr-4\">\n                  <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                  Admin Panel\n                </Button>\n              </Link>\n              <h1 className=\"text-2xl font-bold text-primary\">MarketPlace Pro</h1>\n              <span className=\"ml-4 px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm font-medium\">\n                Admin - Marketplace Boshqarish\n              </span>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-3 h-3 bg-accent rounded-full\"></div>\n                <span className=\"text-sm text-neutral-600\">Online</span>\n              </div>\n              <Button \n                onClick={handleLogout}\n                variant=\"outline\"\n                size=\"sm\"\n                data-testid=\"button-logout\"\n              >\n                <LogOut className=\"w-4 h-4 mr-2\" />\n                Chiqish\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Partner Info */}\n        {partner && (\n          <Card className=\"mb-6\">\n            <CardHeader>\n              <div className=\"flex items-center space-x-4\">\n                <Avatar className=\"h-12 w-12\">\n                  <AvatarImage src={partner.user?.profileImageUrl || \"\"} />\n                  <AvatarFallback>\n                    <User className=\"h-6 w-6\" />\n                  </AvatarFallback>\n                </Avatar>\n                <div>\n                  <CardTitle className=\"text-xl\">\n                    {partner.user?.firstName || partner.user?.email || 'Hamkor'}\n                  </CardTitle>\n                  <CardDescription>\n                    {partner.businessName && `${partner.businessName} • `}\n                    {partner.user?.email}\n                  </CardDescription>\n                </div>\n              </div>\n            </CardHeader>\n          </Card>\n        )}\n\n        <div className=\"flex justify-between items-center mb-6\">\n          <div>\n            <h2 className=\"text-2xl font-bold\">Marketplace Integratsiyalari</h2>\n            <p className=\"text-muted-foreground\">\n              Hamkor uchun marketplace integratsiyalarini boshqaring\n            </p>\n          </div>\n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-add-integration\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Yangi integratsiya\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"sm:max-w-[500px]\">\n              <DialogHeader>\n                <DialogTitle>Yangi Marketplace Integratsiyasi</DialogTitle>\n                <DialogDescription>\n                  Hamkor uchun yangi marketplace integratsiyasini sozlang\n                </DialogDescription>\n              </DialogHeader>\n              <div className=\"grid gap-4 py-4\">\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"marketplace\">Marketplace</Label>\n                  <Select \n                    value={newIntegration.marketplace} \n                    onValueChange={(value) => setNewIntegration({...newIntegration, marketplace: value})}\n                  >\n                    <SelectTrigger data-testid=\"select-marketplace\">\n                      <SelectValue placeholder=\"Marketplace tanlang\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"uzum_market\">Uzum Market</SelectItem>\n                      <SelectItem value=\"yandex_market\">Yandex Market</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"storeName\">Do'kon Nomi</Label>\n                  <Input\n                    id=\"storeName\"\n                    placeholder=\"Do'kon nomini kiriting\"\n                    value={newIntegration.storeName}\n                    onChange={(e) => setNewIntegration({...newIntegration, storeName: e.target.value})}\n                    data-testid=\"input-store-name\"\n                  />\n                </div>\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"apiKey\">API Key</Label>\n                  <Input\n                    id=\"apiKey\"\n                    type=\"password\"\n                    placeholder=\"API kalitini kiriting\"\n                    value={newIntegration.apiKey}\n                    onChange={(e) => setNewIntegration({...newIntegration, apiKey: e.target.value})}\n                    data-testid=\"input-api-key\"\n                  />\n                </div>\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"storeUrl\">Do'kon URL (ixtiyoriy)</Label>\n                  <Input\n                    id=\"storeUrl\"\n                    placeholder=\"https://seller.uzum.uz/...\"\n                    value={newIntegration.storeUrl}\n                    onChange={(e) => setNewIntegration({...newIntegration, storeUrl: e.target.value})}\n                    data-testid=\"input-store-url\"\n                  />\n                </div>\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"additionalConfig\">Qo'shimcha Sozlamalar (JSON)</Label>\n                  <Textarea\n                    id=\"additionalConfig\"\n                    placeholder='{\"warehouse_id\": \"123\", \"delivery_type\": \"standard\"}'\n                    value={newIntegration.additionalConfig}\n                    onChange={(e) => setNewIntegration({...newIntegration, additionalConfig: e.target.value})}\n                    data-testid=\"textarea-additional-config\"\n                  />\n                </div>\n              </div>\n              <div className=\"flex justify-end space-x-2\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setIsCreateDialogOpen(false)}\n                  data-testid=\"button-cancel\"\n                >\n                  Bekor qilish\n                </Button>\n                <Button\n                  onClick={handleCreateIntegration}\n                  disabled={createIntegrationMutation.isPending}\n                  data-testid=\"button-create-integration\"\n                >\n                  {createIntegrationMutation.isPending ? \"Yaratilmoqda...\" : \"Yaratish\"}\n                </Button>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {[1, 2, 3].map((i) => (\n              <Card key={i} className=\"animate-pulse\">\n                <CardContent className=\"p-6\">\n                  <div className=\"h-6 bg-neutral-200 rounded mb-2\"></div>\n                  <div className=\"h-4 bg-neutral-200 rounded mb-4\"></div>\n                  <div className=\"h-8 bg-neutral-200 rounded\"></div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : integrations.length === 0 ? (\n          <Card>\n            <CardContent className=\"text-center py-12\">\n              <Store className=\"h-12 w-12 text-neutral-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold text-neutral-600 mb-2\">\n                Hech qanday integratsiya yo'q\n              </h3>\n              <p className=\"text-neutral-500 mb-4\">\n                Bu hamkor uchun hali marketplace integratsiyasi yaratilmagan\n              </p>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {integrations.map((integration: MarketplaceIntegration) => (\n              <Card key={integration.id} className=\"relative\" data-testid={`card-integration-${integration.id}`}>\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"text-lg\">\n                      {getMarketplaceDisplay(integration.marketplace)}\n                    </CardTitle>\n                    <Badge variant={integration.isActive ? \"default\" : \"secondary\"}>\n                      {integration.isActive ? \"Faol\" : \"Faol emas\"}\n                    </Badge>\n                  </div>\n                  <CardDescription>{integration.storeName}</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between text-sm\">\n                      <span className=\"text-neutral-600\">Holat:</span>\n                      <div className=\"flex items-center space-x-1\">\n                        {getStatusIcon(integration.lastSyncStatus || \"pending\")}\n                        <span className=\"capitalize\">\n                          {integration.lastSyncStatus === \"success\" ? \"Muvaffaqiyatli\" : \n                           integration.lastSyncStatus === \"failed\" ? \"Xato\" : \"Kutilmoqda\"}\n                        </span>\n                      </div>\n                    </div>\n                    {integration.lastSyncAt && (\n                      <div className=\"text-sm text-neutral-600\">\n                        Oxirgi sync: {new Date(integration.lastSyncAt).toLocaleString(\"uz-UZ\")}\n                      </div>\n                    )}\n                    {integration.storeUrl && (\n                      <div className=\"text-sm\">\n                        <a \n                          href={integration.storeUrl} \n                          target=\"_blank\" \n                          rel=\"noopener noreferrer\"\n                          className=\"text-blue-600 hover:underline\"\n                        >\n                          Do'konni ochish →\n                        </a>\n                      </div>\n                    )}\n                  </div>\n                  <div className=\"flex items-center justify-between mt-4\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => testConnectionMutation.mutate(integration.id)}\n                      disabled={testConnectionMutation.isPending}\n                      data-testid={`button-test-${integration.id}`}\n                    >\n                      <TestTube className=\"h-4 w-4 mr-1\" />\n                      Test\n                    </Button>\n                    <div className=\"flex space-x-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        data-testid={`button-settings-${integration.id}`}\n                      >\n                        <Settings className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => deleteIntegrationMutation.mutate(integration.id)}\n                        disabled={deleteIntegrationMutation.isPending}\n                        data-testid={`button-delete-${integration.id}`}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":18241},"server/seedData.ts":{"content":"import { db } from \"./db\";\nimport { users, partners } from \"@shared/schema\";\n\nexport async function seedDemoData() {\n  try {\n    // Create demo admin user\n    const [adminUser] = await db\n      .insert(users)\n      .values({\n        id: \"demo_admin\",\n        email: \"admin@marketplace.uz\",\n        firstName: \"Admin\",\n        lastName: \"User\",\n        role: \"admin\",\n        isApproved: true,\n      })\n      .onConflictDoNothing()\n      .returning();\n\n    // Create demo partner user\n    const [partnerUser] = await db\n      .insert(users)\n      .values({\n        id: \"demo_partner\",\n        email: \"partner@company.uz\",\n        firstName: \"Demo\",\n        lastName: \"Hamkor\",\n        role: \"partner\",\n        isApproved: true,\n      })\n      .onConflictDoNothing()\n      .returning();\n\n    // Create partner profile\n    if (partnerUser) {\n      await db\n        .insert(partners)\n        .values({\n          userId: partnerUser.id,\n          businessName: \"Demo Biznes\",\n          description: \"Test hamkor kompaniyasi\",\n          pricingTier: \"professional_plus\",\n          fixedPayment: \"4500000.00\",\n          commissionRate: \"15.00\",\n        })\n        .onConflictDoNothing();\n    }\n\n    console.log(\"Demo data seeded successfully\");\n  } catch (error) {\n    console.error(\"Error seeding demo data:\", error);\n  }\n}","size_bytes":1317},"client/src/pages/marketplace-integration.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Store, Trash2, TestTube, Settings, CheckCircle, XCircle, Clock, LogOut, BarChart3 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Link } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport type { MarketplaceIntegration } from \"@shared/schema\";\n\nexport default function MarketplaceIntegrationPage() {\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [newIntegration, setNewIntegration] = useState({\n    marketplace: \"\",\n    storeName: \"\",\n    storeId: \"\",\n    apiKey: \"\",\n    secretKey: \"\",\n    autoSync: false,\n    syncFrequency: 24,\n  });\n\n  // Fetch marketplace integrations\n  const { data: integrations = [], isLoading } = useQuery({\n    queryKey: [\"/api/marketplace-integrations\"],\n  });\n\n  // Create integration mutation\n  const createIntegrationMutation = useMutation({\n    mutationFn: async (integrationData: any) => {\n      return await apiRequest(\"/api/marketplace-integrations\", {\n        method: \"POST\",\n        body: JSON.stringify(integrationData),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Muvaffaqiyat\",\n        description: \"Marketplace integratsiyasi muvaffaqiyatli qo'shildi\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/marketplace-integrations\"] });\n      setIsCreateDialogOpen(false);\n      setNewIntegration({\n        marketplace: \"\",\n        storeName: \"\",\n        storeId: \"\",\n        apiKey: \"\",\n        secretKey: \"\",\n        autoSync: false,\n        syncFrequency: 24,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Xato\",\n        description: \"Integratsi yaratishda xato yuz berdi\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete integration mutation\n  const deleteIntegrationMutation = useMutation({\n    mutationFn: async (integrationId: string) => {\n      return await apiRequest(`/api/marketplace-integrations/${integrationId}`, {\n        method: \"DELETE\",\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Muvaffaqiyat\",\n        description: \"Integratsi o'chirildi\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/marketplace-integrations\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Xato\",\n        description: \"Integratsiyani o'chirishda xato yuz berdi\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Test connection mutation\n  const testConnectionMutation = useMutation({\n    mutationFn: async (integrationId: string) => {\n      return await apiRequest(`/api/marketplace-integrations/${integrationId}/test-connection`, {\n        method: \"POST\",\n      });\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Test muvaffaqiyatli\",\n        description: `${data.marketplace} ga bog'lanish muvaffaqiyatli`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/marketplace-integrations\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Test xatosi\",\n        description: \"API ga bog'lanishda xato yuz berdi\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateIntegration = () => {\n    if (!newIntegration.marketplace || !newIntegration.storeName || !newIntegration.apiKey) {\n      toast({\n        title: \"Xato\",\n        description: \"Barcha majburiy maydonlarni to'ldiring\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createIntegrationMutation.mutate(newIntegration);\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"success\":\n        return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n      case \"failed\":\n        return <XCircle className=\"h-4 w-4 text-red-500\" />;\n      default:\n        return <Clock className=\"h-4 w-4 text-yellow-500\" />;\n    }\n  };\n\n  const getMarketplaceDisplay = (marketplace: string) => {\n    switch (marketplace) {\n      case \"uzum_market\":\n        return \"Uzum Market\";\n      case \"yandex_market\":\n        return \"Yandex Market\";\n      default:\n        return marketplace;\n    }\n  };\n\n  const handleLogout = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-8\">\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"text-lg\">Yuklanmoqda...</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-neutral-50\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b border-neutral-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center\">\n              <h1 className=\"text-2xl font-bold text-primary\">MarketPlace Pro</h1>\n              <span className=\"ml-4 px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm font-medium\">\n                Marketplace Integratsiya\n              </span>\n              <nav className=\"ml-8 flex items-center space-x-4\">\n                <Link href=\"/partner\" data-testid=\"link-dashboard\">\n                  <Button variant=\"ghost\" size=\"sm\" className=\"text-sm\">\n                    <BarChart3 className=\"w-4 h-4 mr-2\" />\n                    Dashboard\n                  </Button>\n                </Link>\n                <Link href=\"/marketplace\" data-testid=\"link-marketplace\">\n                  <Button variant=\"ghost\" size=\"sm\" className=\"text-sm bg-neutral-100\">\n                    <Store className=\"w-4 h-4 mr-2\" />\n                    Marketplace\n                  </Button>\n                </Link>\n              </nav>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-3 h-3 bg-accent rounded-full\"></div>\n                <span className=\"text-sm text-neutral-600\">Online</span>\n              </div>\n              <Button \n                onClick={handleLogout}\n                variant=\"outline\"\n                size=\"sm\"\n                data-testid=\"button-logout\"\n              >\n                <LogOut className=\"w-4 h-4 mr-2\" />\n                Chiqish\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Marketplace Integrationa</h1>\n          <p className=\"text-muted-foreground\">\n            Uzum Market va Yandex Market bilan integratsiyani boshqaring\n          </p>\n        </div>\n        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-add-integration\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Yangi integratsiya\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"sm:max-w-[500px]\">\n            <DialogHeader>\n              <DialogTitle>Yangi Marketplace Integratsiyasi</DialogTitle>\n              <DialogDescription>\n                Uzum Market yoki Yandex Market bilan bog'lanish uchun API ma'lumotlarini kiriting\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"grid gap-4 py-4\">\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"marketplace\">Marketplace</Label>\n                <Select\n                  value={newIntegration.marketplace}\n                  onValueChange={(value) =>\n                    setNewIntegration({ ...newIntegration, marketplace: value })\n                  }\n                >\n                  <SelectTrigger data-testid=\"select-marketplace\">\n                    <SelectValue placeholder=\"Marketplace tanlang\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"uzum_market\">Uzum Market</SelectItem>\n                    <SelectItem value=\"yandex_market\">Yandex Market</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"storeName\">Do'kon nomi</Label>\n                <Input\n                  id=\"storeName\"\n                  data-testid=\"input-store-name\"\n                  placeholder=\"Do'kon nomini kiriting\"\n                  value={newIntegration.storeName}\n                  onChange={(e) =>\n                    setNewIntegration({ ...newIntegration, storeName: e.target.value })\n                  }\n                />\n              </div>\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"storeId\">Do'kon ID (ixtiyoriy)</Label>\n                <Input\n                  id=\"storeId\"\n                  data-testid=\"input-store-id\"\n                  placeholder=\"Do'kon ID raqamini kiriting\"\n                  value={newIntegration.storeId}\n                  onChange={(e) =>\n                    setNewIntegration({ ...newIntegration, storeId: e.target.value })\n                  }\n                />\n              </div>\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"apiKey\">API Key</Label>\n                <Input\n                  id=\"apiKey\"\n                  data-testid=\"input-api-key\"\n                  type=\"password\"\n                  placeholder=\"API kalitni kiriting\"\n                  value={newIntegration.apiKey}\n                  onChange={(e) =>\n                    setNewIntegration({ ...newIntegration, apiKey: e.target.value })\n                  }\n                />\n              </div>\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"secretKey\">Secret Key (ixtiyoriy)</Label>\n                <Input\n                  id=\"secretKey\"\n                  data-testid=\"input-secret-key\"\n                  type=\"password\"\n                  placeholder=\"Maxfiy kalitni kiriting\"\n                  value={newIntegration.secretKey}\n                  onChange={(e) =>\n                    setNewIntegration({ ...newIntegration, secretKey: e.target.value })\n                  }\n                />\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Switch\n                  id=\"autoSync\"\n                  data-testid=\"switch-auto-sync\"\n                  checked={newIntegration.autoSync}\n                  onCheckedChange={(checked) =>\n                    setNewIntegration({ ...newIntegration, autoSync: checked })\n                  }\n                />\n                <Label htmlFor=\"autoSync\">Avtomatik sinxronlash</Label>\n              </div>\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"syncFrequency\">Sinxronlash chastotasi (soat)</Label>\n                <Input\n                  id=\"syncFrequency\"\n                  data-testid=\"input-sync-frequency\"\n                  type=\"number\"\n                  min=\"1\"\n                  max=\"168\"\n                  value={newIntegration.syncFrequency}\n                  onChange={(e) =>\n                    setNewIntegration({\n                      ...newIntegration,\n                      syncFrequency: parseInt(e.target.value) || 24,\n                    })\n                  }\n                />\n              </div>\n            </div>\n            <div className=\"flex justify-end gap-3\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setIsCreateDialogOpen(false)}\n                data-testid=\"button-cancel\"\n              >\n                Bekor qilish\n              </Button>\n              <Button\n                onClick={handleCreateIntegration}\n                disabled={createIntegrationMutation.isPending}\n                data-testid=\"button-create-integration\"\n              >\n                {createIntegrationMutation.isPending ? \"Yaratilmoqda...\" : \"Yaratish\"}\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"grid gap-6\">\n        {integrations.length === 0 ? (\n          <Card>\n            <CardContent className=\"flex flex-col items-center justify-center py-12\">\n              <Store className=\"h-12 w-12 text-muted-foreground mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Hech qanday integratsiya yo'q</h3>\n              <p className=\"text-muted-foreground text-center mb-4\">\n                Uzum Market yoki Yandex Market bilan integratsiya qo'shing\n              </p>\n              <Button onClick={() => setIsCreateDialogOpen(true)} data-testid=\"button-add-first-integration\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Birinchi integratsiyani qo'shish\n              </Button>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n            {integrations.map((integration: MarketplaceIntegration) => (\n              <Card key={integration.id} data-testid={`card-integration-${integration.id}`}>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">\n                    {getMarketplaceDisplay(integration.marketplace)}\n                  </CardTitle>\n                  <div className=\"flex items-center space-x-1\">\n                    {getStatusIcon(integration.lastSyncStatus || 'pending')}\n                    <Badge variant={integration.isActive ? \"default\" : \"secondary\"}>\n                      {integration.isActive ? \"Faol\" : \"Nofaol\"}\n                    </Badge>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold mb-2\">{integration.storeName}</div>\n                  <div className=\"space-y-2 text-sm text-muted-foreground\">\n                    <div>Do'kon ID: {integration.storeId || \"Kiritilmagan\"}</div>\n                    <div>Avtomatik sinxronlash: {integration.autoSync ? \"Yoqilgan\" : \"O'chirilgan\"}</div>\n                    {integration.autoSync && (\n                      <div>Sinxronlash chastotasi: {integration.syncFrequency || 24} soat</div>\n                    )}\n                    <div>Mahsulotlar soni: {integration.totalProductsSynced || 0}</div>\n                    <div>Buyurtmalar soni: {integration.totalOrdersImported || 0}</div>\n                    {integration.lastSyncAt && (\n                      <div>\n                        Oxirgi sinxronlash:{\" \"}\n                        {new Date(integration.lastSyncAt).toLocaleDateString()}\n                      </div>\n                    )}\n                  </div>\n                  <div className=\"flex justify-between items-center mt-4 pt-4 border-t\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => testConnectionMutation.mutate(integration.id)}\n                      disabled={testConnectionMutation.isPending}\n                      data-testid={`button-test-${integration.id}`}\n                    >\n                      <TestTube className=\"h-4 w-4 mr-1\" />\n                      Test\n                    </Button>\n                    <div className=\"flex space-x-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        data-testid={`button-settings-${integration.id}`}\n                      >\n                        <Settings className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => deleteIntegrationMutation.mutate(integration.id)}\n                        disabled={deleteIntegrationMutation.isPending}\n                        data-testid={`button-delete-${integration.id}`}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n    </div>\n  );\n}","size_bytes":17073},"client/src/pages/partner-registration.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Eye, EyeOff, User, ArrowLeft, CheckCircle } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst registrationSchema = z.object({\n  login: z.string().min(3, \"Login kamida 3 ta belgi bo'lishi kerak\"),\n  password: z.string().min(6, \"Parol kamida 6 ta belgi bo'lishi kerak\"),\n  phone: z.string().min(9, \"Telefon raqami noto'g'ri\"),\n  address: z.string().min(5, \"Manzil kamida 5 ta belgi bo'lishi kerak\"),\n  productCategory: z.string().min(1, \"Mahsulot toifasini tanlang\"),\n  investmentAmount: z.string().min(1, \"Investitsiya miqdorini kiriting\"),\n  productQuantity: z.number().min(1, \"Mahsulot sonini kiriting\"),\n});\n\ntype RegistrationForm = z.infer<typeof registrationSchema>;\n\nexport default function PartnerRegistration() {\n  const [, setLocation] = useLocation();\n  const [showPassword, setShowPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isSuccess, setIsSuccess] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  const form = useForm<RegistrationForm>({\n    resolver: zodResolver(registrationSchema),\n    defaultValues: {\n      login: \"\",\n      password: \"\",\n      phone: \"\",\n      address: \"\",\n      productCategory: \"\",\n      investmentAmount: \"\",\n      productQuantity: 1,\n    },\n  });\n\n  const onSubmit = async (data: RegistrationForm) => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch('/api/partner-registration-requests', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (response.ok) {\n        setIsSuccess(true);\n        toast({\n          title: \"Muvaffaqiyatli ro'yxatdan o'tish\",\n          description: \"So'rovingiz yuborildi. Admin tasdiqlashini kuting.\",\n        });\n        \n        form.reset();\n      } else {\n        const errorData = await response.json();\n        setError(errorData.message || \"Ro'yxatdan o'tishda xatolik yuz berdi\");\n      }\n    } catch (error) {\n      setError(\"Tizimda xatolik yuz berdi. Qayta urinib ko'ring.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  if (isSuccess) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md shadow-2xl border-slate-700\">\n          <CardHeader className=\"text-center\">\n            <div className=\"mx-auto w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mb-4\">\n              <CheckCircle className=\"w-8 h-8 text-green-600\" />\n            </div>\n            <CardTitle className=\"text-2xl font-bold text-green-600\">Muvaffaqiyatli!</CardTitle>\n            <CardDescription className=\"text-slate-600\">\n              Ro'yxatdan o'tish so'rovi yuborildi\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"text-center space-y-4\">\n            <p className=\"text-slate-600\">\n              Sizning so'rovingiz admin tomonidan ko'rib chiqiladi. Tasdiqlangandan so'ng SMS orqali xabar beramiz.\n            </p>\n            <div className=\"space-y-3\">\n              <Button\n                onClick={() => setLocation('/login')}\n                className=\"w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700\"\n              >\n                Tizimga kirish\n              </Button>\n              <Button\n                variant=\"outline\"\n                onClick={() => setLocation('/')}\n                className=\"w-full\"\n              >\n                Bosh sahifaga qaytish\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-lg shadow-2xl border-slate-700\">\n        <CardHeader className=\"space-y-1 text-center\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setLocation('/')}\n            className=\"absolute top-4 left-4 text-slate-600 hover:text-slate-800\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-1\" />\n            Orqaga\n          </Button>\n          \n          <div className=\"mx-auto w-12 h-12 bg-gradient-to-br from-blue-600 to-purple-600 rounded-xl flex items-center justify-center mb-4\">\n            <User className=\"w-6 h-6 text-white\" />\n          </div>\n          <CardTitle className=\"text-2xl font-bold\">Hamkor bo'lish</CardTitle>\n          <CardDescription className=\"text-slate-600\">\n            Bizning hamkor tarmoqimizga qo'shiling\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"login\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Login</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          placeholder=\"Loginni kiriting\"\n                          disabled={isLoading}\n                          className=\"bg-slate-50 border-slate-300\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Parol</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Input\n                            {...field}\n                            type={showPassword ? \"text\" : \"password\"}\n                            placeholder=\"Parolni kiriting\"\n                            disabled={isLoading}\n                            className=\"bg-slate-50 border-slate-300 pr-10\"\n                          />\n                          <button\n                            type=\"button\"\n                            className=\"absolute inset-y-0 right-0 pr-3 flex items-center\"\n                            onClick={() => setShowPassword(!showPassword)}\n                          >\n                            {showPassword ? (\n                              <EyeOff className=\"h-4 w-4 text-slate-400\" />\n                            ) : (\n                              <Eye className=\"h-4 w-4 text-slate-400\" />\n                            )}\n                          </button>\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"phone\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Telefon raqami</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        placeholder=\"+998901234567\"\n                        disabled={isLoading}\n                        className=\"bg-slate-50 border-slate-300\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"address\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Manzil</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        {...field}\n                        placeholder=\"To'liq manzilni kiriting\"\n                        disabled={isLoading}\n                        className=\"bg-slate-50 border-slate-300\"\n                        rows={2}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"productCategory\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Mahsulot toifasi</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger className=\"bg-slate-50 border-slate-300\">\n                          <SelectValue placeholder=\"Mahsulot toifasini tanlang\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"Electronics\">Elektronika</SelectItem>\n                        <SelectItem value=\"Fashion\">Kiyim va moda</SelectItem>\n                        <SelectItem value=\"Home\">Uy jihozlari</SelectItem>\n                        <SelectItem value=\"Sports\">Sport va faollik</SelectItem>\n                        <SelectItem value=\"Beauty\">Go'zallik va parvarish</SelectItem>\n                        <SelectItem value=\"Books\">Kitoblar</SelectItem>\n                        <SelectItem value=\"Toys\">O'yinchoqlar</SelectItem>\n                        <SelectItem value=\"Food\">Oziq-ovqat</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"investmentAmount\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Investitsiya (so'm)</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          placeholder=\"1000000\"\n                          disabled={isLoading}\n                          className=\"bg-slate-50 border-slate-300\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"productQuantity\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Mahsulot soni</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          type=\"number\"\n                          min=\"1\"\n                          placeholder=\"50\"\n                          disabled={isLoading}\n                          className=\"bg-slate-50 border-slate-300\"\n                          onChange={(e) => field.onChange(Number(e.target.value))}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              {error && (\n                <Alert variant=\"destructive\">\n                  <AlertDescription>{error}</AlertDescription>\n                </Alert>\n              )}\n\n              <Button\n                type=\"submit\"\n                className=\"w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700\"\n                disabled={isLoading}\n              >\n                {isLoading ? \"Yuborilmoqda...\" : \"Hamkor bo'lish uchun ariza berish\"}\n              </Button>\n            </form>\n          </Form>\n\n          <div className=\"mt-6 pt-6 border-t border-slate-200\">\n            <div className=\"text-center\">\n              <p className=\"text-sm text-slate-600 mb-4\">\n                Allaqachon akkauntingiz bormi?\n              </p>\n              <Button\n                variant=\"outline\"\n                onClick={() => setLocation('/login')}\n                className=\"w-full\"\n              >\n                Tizimga kirish\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":13254},"client/src/components/partner-contract-section.tsx":{"content":"import { useState } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { \n  FileText,\n  User,\n  CreditCard,\n  Building2,\n  CheckCircle2,\n  Clock,\n  AlertTriangle,\n  Download,\n  Send\n} from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\n\n// Generate unique contract number\nconst generateContractNumber = () => {\n  const date = new Date();\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, '0');\n  const day = String(date.getDate()).padStart(2, '0');\n  const random = Math.floor(Math.random() * 9999).toString().padStart(4, '0');\n  return `MPP-${year}${month}${day}-${random}`;\n};\n\ninterface PersonalInfoFormData {\n  // Personal Info\n  firstName: string;\n  lastName: string;\n  phone: string;\n  email: string;\n  address: string;\n  \n  // Business Info\n  businessName: string;\n  businessCategory: string;\n  businessStructure: 'YaTT' | 'OOO' | '';\n  investmentAmount: string;\n  productQuantity: string;\n  \n  // Bank Details\n  bankAccountNumber: string;\n  bankName: string;\n  mfoCode: string;\n  okedCode: string;\n  \n  // Selected pricing tier\n  pricingTier: 'basic' | 'professional' | 'enterprise';\n  \n  // Contract agreement\n  contractAgreed: boolean;\n  contractNumber: string;\n}\n\nexport function PartnerContractSection() {\n  const { toast } = useToast();\n  const [contractModalOpen, setContractModalOpen] = useState(false);\n  const [formData, setFormData] = useState<PersonalInfoFormData>({\n    firstName: \"\",\n    lastName: \"\",\n    phone: \"\",\n    email: \"\",\n    address: \"\",\n    businessName: \"\",\n    businessCategory: \"\",\n    businessStructure: \"\",\n    investmentAmount: \"\",\n    productQuantity: \"\",\n    bankAccountNumber: \"\",\n    bankName: \"\",\n    mfoCode: \"\",\n    okedCode: \"\",\n    pricingTier: 'basic',\n    contractAgreed: false,\n    contractNumber: generateContractNumber()\n  });\n\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [submissionStatus, setSubmissionStatus] = useState<'idle' | 'success' | 'error'>('idle');\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.contractAgreed) {\n      toast({\n        title: \"Diqqat!\",\n        description: \"Shartnoma shartlariga rozilik berishingiz shart.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    setIsSubmitting(true);\n    try {\n      const response = await fetch('/api/partner-personal-info', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(formData),\n      });\n      \n      if (response.ok) {\n        setSubmissionStatus('success');\n        toast({\n          title: \"Muvaffaqiyat!\",\n          description: \"Shaxsiy ma'lumotlar saqlandi va aktivatsiya so'rovi yuborildi.\",\n        });\n      } else {\n        throw new Error('Failed to submit');\n      }\n    } catch (error) {\n      setSubmissionStatus('error');\n      toast({\n        title: \"Xatolik\",\n        description: \"Shaxsiy ma'lumotlarni saqlashda xatolik yuz berdi.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  // Show success status if submitted\n  if (submissionStatus === 'success') {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <User className=\"h-5 w-5\" />\n            Shaxsiy Ma'lumotlar va Aktivatsiya Holati\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-6\">\n            {/* Contract Info */}\n            <div className=\"bg-blue-50 dark:bg-blue-950 p-4 rounded-lg\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <FileText className=\"h-5 w-5 text-blue-600\" />\n                <span className=\"font-semibold\">Shartnoma Ma'lumotlari</span>\n              </div>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                Shartnoma raqami: <span className=\"font-mono font-bold\">{formData.contractNumber}</span>\n              </p>\n            </div>\n\n            {/* Status */}\n            <div className=\"flex items-center justify-between\">\n              <span className=\"font-medium\">Aktivatsiya holati:</span>\n              <Badge variant=\"secondary\">\n                <Clock className=\"h-3 w-3 mr-1\" />\n                Kutilmoqda\n              </Badge>\n            </div>\n\n            {/* Selected Tier */}\n            <div className=\"flex items-center justify-between\">\n              <span className=\"font-medium\">Tanlangan tarif:</span>\n              <Badge variant=\"outline\">\n                {formData.pricingTier === 'basic' ? 'Boshlang\\'ich (2.5M som/12%)' :\n                 formData.pricingTier === 'professional' ? 'Professional (4.5M som/15%)' :\n                 'Enterprise (6.5M som/18%)'}\n              </Badge>\n            </div>\n\n            {/* Business Details */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label className=\"text-sm font-medium\">Biznes kategoriyasi</Label>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">{formData.businessCategory}</p>\n              </div>\n              <div>\n                <Label className=\"text-sm font-medium\">Investitsiya miqdori</Label>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">{formData.investmentAmount} so'm</p>\n              </div>\n            </div>\n\n            <Button \n              variant=\"outline\" \n              onClick={() => setContractModalOpen(true)}\n              className=\"w-full\"\n            >\n              <FileText className=\"h-4 w-4 mr-2\" />\n              Shartnomani Ko'rish\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <>\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <User className=\"h-5 w-5\" />\n            Shaxsiy Ma'lumotlar va Aktivatsiya\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {/* Contract Number Display */}\n            <div className=\"bg-blue-50 dark:bg-blue-950 p-4 rounded-lg\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <FileText className=\"h-5 w-5 text-blue-600\" />\n                <span className=\"font-semibold\">Shartnoma Raqami</span>\n              </div>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                Sizning shartnoma raqamingiz: <span className=\"font-mono font-bold\">{formData.contractNumber}</span>\n              </p>\n            </div>\n\n            {/* Personal Information */}\n            <div className=\"space-y-4\">\n              <h3 className=\"font-semibold flex items-center gap-2\">\n                <User className=\"h-4 w-4\" />\n                Shaxsiy Ma'lumotlar\n              </h3>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"firstName\">Ism</Label>\n                  <Input\n                    id=\"firstName\"\n                    value={formData.firstName}\n                    onChange={(e) => setFormData(prev => ({ ...prev, firstName: e.target.value }))}\n                    required\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"lastName\">Familiya</Label>\n                  <Input\n                    id=\"lastName\"\n                    value={formData.lastName}\n                    onChange={(e) => setFormData(prev => ({ ...prev, lastName: e.target.value }))}\n                    required\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"phone\">Telefon raqam</Label>\n                  <Input\n                    id=\"phone\"\n                    value={formData.phone}\n                    onChange={(e) => setFormData(prev => ({ ...prev, phone: e.target.value }))}\n                    placeholder=\"+998 90 123 45 67\"\n                    required\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"email\">Email</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={formData.email}\n                    onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}\n                    placeholder=\"example@gmail.com\"\n                    required\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"address\">Manzil</Label>\n                <Textarea\n                  id=\"address\"\n                  value={formData.address}\n                  onChange={(e) => setFormData(prev => ({ ...prev, address: e.target.value }))}\n                  placeholder=\"To'liq manzilingizni kiriting\"\n                  required\n                />\n              </div>\n            </div>\n\n            {/* Business Information */}\n            <div className=\"space-y-4\">\n              <h3 className=\"font-semibold flex items-center gap-2\">\n                <Building2 className=\"h-4 w-4\" />\n                Biznes Ma'lumotlari\n              </h3>\n              \n              <div>\n                <Label htmlFor=\"businessName\">Biznes nomi</Label>\n                <Input\n                  id=\"businessName\"\n                  value={formData.businessName}\n                  onChange={(e) => setFormData(prev => ({ ...prev, businessName: e.target.value }))}\n                  placeholder=\"Kompaniya yoki biznes nomini kiriting\"\n                  required\n                />\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"businessCategory\">Biznes kategoriyasi</Label>\n                  <Select value={formData.businessCategory} onValueChange={(value) => setFormData(prev => ({ ...prev, businessCategory: value }))}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Biznes kategoriyasini tanlang\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"electronics\">Elektronika</SelectItem>\n                      <SelectItem value=\"fashion\">Moda va kiyim</SelectItem>\n                      <SelectItem value=\"home_garden\">Uy va bog'</SelectItem>\n                      <SelectItem value=\"sports\">Sport va faoliyat</SelectItem>\n                      <SelectItem value=\"beauty\">Go'zallik va sog'liq</SelectItem>\n                      <SelectItem value=\"books_media\">Kitob va media</SelectItem>\n                      <SelectItem value=\"toys_games\">O'yinchoq va o'yinlar</SelectItem>\n                      <SelectItem value=\"food_beverages\">Oziq-ovqat va ichimliklar</SelectItem>\n                      <SelectItem value=\"automotive\">Avtomobil</SelectItem>\n                      <SelectItem value=\"other\">Boshqa</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"businessStructure\">Biznes tuzilishi</Label>\n                  <Select value={formData.businessStructure} onValueChange={(value: 'YaTT' | 'OOO') => setFormData(prev => ({ ...prev, businessStructure: value }))}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Biznes tuzilishini tanlang\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"YaTT\">YaTT (Yakka tartibdagi tadbirkor)</SelectItem>\n                      <SelectItem value=\"OOO\">OOO (Mas'uliyati cheklangan jamiyat)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"investmentAmount\">Investitsiya miqdori (so'm)</Label>\n                  <Input\n                    id=\"investmentAmount\"\n                    type=\"number\"\n                    value={formData.investmentAmount}\n                    onChange={(e) => setFormData(prev => ({ ...prev, investmentAmount: e.target.value }))}\n                    placeholder=\"1000000\"\n                    required\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"productQuantity\">Mahsulotlar miqdori</Label>\n                  <Input\n                    id=\"productQuantity\"\n                    type=\"number\"\n                    value={formData.productQuantity}\n                    onChange={(e) => setFormData(prev => ({ ...prev, productQuantity: e.target.value }))}\n                    placeholder=\"100\"\n                    required\n                  />\n                </div>\n              </div>\n\n              {/* Bank Information */}\n              <div className=\"space-y-4 border-t pt-4\">\n                <h4 className=\"font-semibold flex items-center gap-2\">\n                  <CreditCard className=\"h-4 w-4\" />\n                  Bank Ma'lumotlari\n                </h4>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"bankAccountNumber\">Hisob raqam</Label>\n                    <Input\n                      id=\"bankAccountNumber\"\n                      value={formData.bankAccountNumber}\n                      onChange={(e) => setFormData(prev => ({ ...prev, bankAccountNumber: e.target.value }))}\n                      placeholder=\"20208000500123456789\"\n                      required\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"bankName\">Bank nomi</Label>\n                    <Input\n                      id=\"bankName\"\n                      value={formData.bankName}\n                      onChange={(e) => setFormData(prev => ({ ...prev, bankName: e.target.value }))}\n                      placeholder=\"Xalq Banki, NBU, Kapital Bank\"\n                      required\n                    />\n                  </div>\n                </div>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"mfoCode\">MFO kodi</Label>\n                    <Input\n                      id=\"mfoCode\"\n                      value={formData.mfoCode}\n                      onChange={(e) => setFormData(prev => ({ ...prev, mfoCode: e.target.value }))}\n                      placeholder=\"00014\"\n                      required\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"okedCode\">OKED kodi</Label>\n                    <Input\n                      id=\"okedCode\"\n                      value={formData.okedCode}\n                      onChange={(e) => setFormData(prev => ({ ...prev, okedCode: e.target.value }))}\n                      placeholder=\"52190\"\n                      required\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Pricing Tier Selection */}\n            <div className=\"space-y-4\">\n              <h3 className=\"font-semibold flex items-center gap-2\">\n                <CreditCard className=\"h-4 w-4\" />\n                Tarif Rejani Tanlash\n              </h3>\n              \n              <Select value={formData.pricingTier} onValueChange={(value: 'basic' | 'professional' | 'enterprise') => setFormData(prev => ({ ...prev, pricingTier: value }))}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"basic\">\n                    Boshlang'ich - 2.5M som/oy (12% komissiya)\n                  </SelectItem>\n                  <SelectItem value=\"professional\">\n                    Professional - 4.5M som/oy (15% komissiya)\n                  </SelectItem>\n                  <SelectItem value=\"enterprise\">\n                    Enterprise - 6.5M som/oy (18% komissiya)\n                  </SelectItem>\n                </SelectContent>\n              </Select>\n\n              {/* Pricing tier details */}\n              <div className=\"bg-gray-50 dark:bg-gray-900 p-4 rounded-lg text-sm\">\n                {formData.pricingTier === 'basic' && (\n                  <div>\n                    <p className=\"font-semibold mb-2\">Boshlang'ich tarif imkoniyatlari:</p>\n                    <ul className=\"list-disc pl-5 space-y-1\">\n                      <li>Oylik to'lov: 2.5 million so'm</li>\n                      <li>Komissiya: 12%</li>\n                      <li>Oyiga 10 ta mahsulot so'rovi</li>\n                      <li>Asosiy hisobotlar</li>\n                    </ul>\n                  </div>\n                )}\n                {formData.pricingTier === 'professional' && (\n                  <div>\n                    <p className=\"font-semibold mb-2\">Professional tarif imkoniyatlari:</p>\n                    <ul className=\"list-disc pl-5 space-y-1\">\n                      <li>Oylik to'lov: 4.5 million so'm</li>\n                      <li>Komissiya: 15%</li>\n                      <li>Oyiga 25 ta mahsulot so'rovi</li>\n                      <li>Kengaytirilgan analitika</li>\n                      <li>Ustuvor qo'llab-quvvatlash</li>\n                    </ul>\n                  </div>\n                )}\n                {formData.pricingTier === 'enterprise' && (\n                  <div>\n                    <p className=\"font-semibold mb-2\">Enterprise tarif imkoniyatlari:</p>\n                    <ul className=\"list-disc pl-5 space-y-1\">\n                      <li>Oylik to'lov: 6.5 million so'm</li>\n                      <li>Komissiya: 18%</li>\n                      <li>Cheklanmagan mahsulot so'rovlari</li>\n                      <li>To'liq analitika va hisobotlar</li>\n                      <li>Shaxsiy integratsiyalar</li>\n                      <li>24/7 qo'llab-quvvatlash</li>\n                    </ul>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Contract Agreement */}\n            <div className=\"space-y-4\">\n              <h3 className=\"font-semibold flex items-center gap-2\">\n                <FileText className=\"h-4 w-4\" />\n                Shartnoma Shartlari\n              </h3>\n              \n              <div className=\"flex items-start space-x-2\">\n                <Checkbox\n                  id=\"contractAgreed\"\n                  checked={formData.contractAgreed}\n                  onCheckedChange={(checked) => setFormData(prev => ({ ...prev, contractAgreed: !!checked }))}\n                />\n                <div className=\"grid gap-1.5 leading-none\">\n                  <label\n                    htmlFor=\"contractAgreed\"\n                    className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n                  >\n                    Shartnoma shartlariga roziman\n                  </label>\n                  <p className=\"text-xs text-muted-foreground\">\n                    <Button\n                      type=\"button\"\n                      variant=\"link\"\n                      className=\"p-0 h-auto text-xs\"\n                      onClick={() => setContractModalOpen(true)}\n                    >\n                      Shartnomani o'qish uchun bosing\n                    </Button>\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            <Button \n              type=\"submit\" \n              className=\"w-full\" \n              disabled={isSubmitting || !formData.contractAgreed}\n            >\n              <Send className=\"h-4 w-4 mr-2\" />\n              {isSubmitting ? \"Yuborilmoqda...\" : \"Aktivatsiya So'rovi Yuborish\"}\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n\n      {/* Contract Modal */}\n      <Dialog open={contractModalOpen} onOpenChange={setContractModalOpen}>\n        <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <FileText className=\"h-5 w-5\" />\n              Hamkorlik Shartnomasi\n            </DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-6 text-sm\">\n            <div className=\"text-center border-b pb-4\">\n              <h2 className=\"text-lg font-bold\">HAMKORLIK SHARTNOMASI</h2>\n              <p className=\"text-gray-600\">Shartnoma raqami: {formData.contractNumber}</p>\n              <p className=\"text-gray-600\">Sana: {new Date().toLocaleDateString('uz-UZ')}</p>\n            </div>\n\n            <div className=\"space-y-4\">\n              <section>\n                <h3 className=\"font-semibold text-base mb-2\">1. TOMONLAR</h3>\n                <p><strong>Buyurtmachi:</strong> MarketPlace Pro platformasi</p>\n                <p><strong>Ijrochi:</strong> Hamkor (tanlangan tarif bo'yicha)</p>\n              </section>\n\n              <section>\n                <h3 className=\"font-semibold text-base mb-2\">2. SHARTNOMA PREDMETI</h3>\n                <p>Ushbu shartnoma MarketPlace Pro platformasida hamkorlik qilish shartlarini belgilaydi. Hamkor o'z mahsulotlarini platformada sotish huquqiga ega bo'ladi.</p>\n              </section>\n\n              <section>\n                <h3 className=\"font-semibold text-base mb-2\">3. TOMONLARNING MAJBURIYATLARI</h3>\n                \n                <h4 className=\"font-medium mt-3 mb-2\">3.1. MarketPlace Pro majburiyatlari:</h4>\n                <ul className=\"list-disc pl-5 space-y-1\">\n                  <li>Platformada sifatli xizmat ko'rsatish</li>\n                  <li>Buyurtmalarni o'z vaqtida yetkazib berish</li>\n                  <li>Texnik qo'llab-quvvatlash</li>\n                  <li>Marketing va reklama xizmatlari</li>\n                  <li>MySklad tizimi orqali mahsulot boshqaruvi</li>\n                </ul>\n\n                <h4 className=\"font-medium mt-3 mb-2\">3.2. Hamkor majburiyatlari:</h4>\n                <ul className=\"list-disc pl-5 space-y-1\">\n                  <li>Oylik to'lovni o'z vaqtida to'lash</li>\n                  <li>Sifatli mahsulot taqdim etish</li>\n                  <li>Mahsulot ma'lumotlarini to'g'ri kiritish</li>\n                  <li>Mijozlar bilan sifatli aloqa</li>\n                  <li>Platformaning qoidalariga rioya qilish</li>\n                </ul>\n              </section>\n\n              <section>\n                <h3 className=\"font-semibold text-base mb-2\">4. MOLIYAVIY SHARTLAR</h3>\n                \n                {formData.pricingTier === 'basic' && (\n                  <div>\n                    <p><strong>Tanlangan tarif:</strong> Boshlang'ich</p>\n                    <p><strong>Oylik to'lov:</strong> 2,500,000 so'm</p>\n                    <p><strong>Komissiya:</strong> 12%</p>\n                    <p><strong>Qo'shimcha imkoniyatlar:</strong> Oyiga 10 ta mahsulot so'rovi, asosiy hisobotlar</p>\n                  </div>\n                )}\n                {formData.pricingTier === 'professional' && (\n                  <div>\n                    <p><strong>Tanlangan tarif:</strong> Professional</p>\n                    <p><strong>Oylik to'lov:</strong> 4,500,000 so'm</p>\n                    <p><strong>Komissiya:</strong> 15%</p>\n                    <p><strong>Qo'shimcha imkoniyatlar:</strong> Oyiga 25 ta mahsulot so'rovi, kengaytirilgan analitika</p>\n                  </div>\n                )}\n                {formData.pricingTier === 'enterprise' && (\n                  <div>\n                    <p><strong>Tanlangan tarif:</strong> Enterprise</p>\n                    <p><strong>Oylik to'lov:</strong> 6,500,000 so'm</p>\n                    <p><strong>Komissiya:</strong> 18%</p>\n                    <p><strong>Qo'shimcha imkoniyatlar:</strong> Cheklanmagan so'rovlar, to'liq analitika, 24/7 qo'llab-quvvatlash</p>\n                  </div>\n                )}\n\n                <div className=\"mt-3 p-3 bg-yellow-50 dark:bg-yellow-950 rounded\">\n                  <p><strong>Muhim:</strong> Komissiya faqat sotilgan mahsulotlar uchun olinadi. Sof foyda formula: (Sotuv narxi - Marketplace komissiyasi - Marketplace xarajatlari - 3% soliq - Tan narx) = Sof foyda</p>\n                </div>\n              </section>\n\n              <section>\n                <h3 className=\"font-semibold text-base mb-2\">5. HUQUQ VA MAJBURIYATLAR</h3>\n                \n                <h4 className=\"font-medium mt-3 mb-2\">5.1. Hamkor huquqlari:</h4>\n                <ul className=\"list-disc pl-5 space-y-1\">\n                  <li>O'z mahsulotlarini platformada sotish</li>\n                  <li>Sotuvlar bo'yicha hisobotlar olish</li>\n                  <li>Texnik qo'llab-quvvatlash olish</li>\n                  <li>Yangi mahsulotlar so'rash</li>\n                  <li>Tanlangan tarif bo'yicha barcha imkoniyatlardan foydalanish</li>\n                </ul>\n\n                <h4 className=\"font-medium mt-3 mb-2\">5.2. MarketPlace Pro huquqlari:</h4>\n                <ul className=\"list-disc pl-5 space-y-1\">\n                  <li>Sifatsiz mahsulotlarni rad etish</li>\n                  <li>Shartnomani buzganlik uchun jarimalar undirish</li>\n                  <li>Platformadan chiqarib yuborish</li>\n                  <li>Qoidalarni o'zgartirish (oldindan ogohlantirish bilan)</li>\n                </ul>\n              </section>\n\n              <section>\n                <h3 className=\"font-semibold text-base mb-2\">6. JAVOBGARLIK</h3>\n                <p>Tomonlar o'z majburiyatlarini bajarmaslik uchun javobgar bo'ladilar. Shartnomani buzish holatlari:</p>\n                <ul className=\"list-disc pl-5 space-y-1 mt-2\">\n                  <li>To'lovlarni kechiktirish (10 kundan ortiq)</li>\n                  <li>Sifatsiz mahsulot taqdim etish</li>\n                  <li>Mijozlar bilan noo'rin munosabat</li>\n                  <li>Platformaning qoidalarini buzish</li>\n                </ul>\n              </section>\n\n              <section>\n                <h3 className=\"font-semibold text-base mb-2\">7. YAKUNIY QOIDALAR</h3>\n                <p>Ushbu shartnoma imzolanganidan keyin kuchga kiradi va tomonlarning kelishuviga qadar amal qiladi. Shartnomani bekor qilish kamida 30 kun oldin yozma ravishda bildirilishi kerak.</p>\n                <p className=\"mt-2\"><strong>Sudga murojaat:</strong> Nizolar tinchlik yo'li bilan hal qilinadi, aks holda O'zbekiston Respublikasi qonunlariga muvofiq sudda ko'riladi.</p>\n              </section>\n            </div>\n\n            <div className=\"border-t pt-4 text-center text-xs text-gray-500\">\n              <p>MarketPlace Pro © 2024. Barcha huquqlar himoyalangan.</p>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}","size_bytes":27507},"client/src/components/new-commission-calculator.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Calculator, TrendingUp, Target, DollarSign, Zap, Crown } from \"lucide-react\";\nimport { PRICING_TIERS, calculateCommission, getTotalFulfillmentFee, type PricingTier } from \"@shared/schema\";\n\ninterface CommissionResult {\n  tier: PricingTier;\n  tierName: string;\n  fixedPayment: number;\n  commissionRate: number;\n  commissionAmount: number;\n  totalFee: number;\n  partnerProfit: number;\n  profitPercentage: number;\n}\n\ninterface NewCommissionCalculatorProps {\n  className?: string;\n}\n\nexport function NewCommissionCalculator({ className }: NewCommissionCalculatorProps) {\n  const [selectedTier, setSelectedTier] = useState<PricingTier>(\"starter_pro\");\n  const [salesInput, setSalesInput] = useState<string>(\"20,000,000\");\n  const [costInput, setCostInput] = useState<string>(\"12,000,000\");\n  const [quantityInput, setQuantityInput] = useState<string>(\"1\");\n  const [result, setResult] = useState<CommissionResult | null>(null);\n\n  // Format number input with commas\n  const formatNumberInput = (value: string): string => {\n    const numbers = value.replace(/\\D/g, '');\n    const cleanNumbers = numbers.replace(/^0+/, '') || '0';\n    return cleanNumbers.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n  };\n\n  const parseNumberInput = (value: string): number => {\n    return parseInt(value.replace(/,/g, '') || '0', 10);\n  };\n\n  const handleSalesInputChange = (value: string) => {\n    const formatted = formatNumberInput(value);\n    setSalesInput(formatted);\n  };\n\n  const handleCostInputChange = (value: string) => {\n    const formatted = formatNumberInput(value);\n    setCostInput(formatted);\n  };\n\n  // Calculate new commission structure with quantity-based SPT\n  const calculateNewCommission = (sales: number, cost: number, quantity: number, tier: PricingTier): CommissionResult => {\n    const tierConfig = PRICING_TIERS[tier];\n    const sptCost = tierConfig.sptCost * quantity; // 2,000 som per item\n    const taxRate = 0.03;\n    \n    // Net profit calculation: Sales - Cost - (SPT * quantity) - 3% Tax\n    const beforeTax = sales - cost - sptCost;\n    const tax = beforeTax * taxRate;\n    const netProfit = beforeTax - tax;\n    \n    // Get commission based on net profit\n    const commission = calculateCommission(netProfit, tier);\n    const totalFee = tierConfig.fixedPayment + commission.amount;\n    \n    // Partner final profit: Net profit - fulfillment fee\n    const partnerProfit = netProfit - totalFee;\n    const profitPercentage = sales > 0 ? (partnerProfit / sales) * 100 : 0;\n\n    return {\n      tier,\n      tierName: tierConfig.name,\n      fixedPayment: tierConfig.fixedPayment,\n      commissionRate: commission.rate,\n      commissionAmount: commission.amount,\n      totalFee,\n      partnerProfit,\n      profitPercentage\n    };\n  };\n\n  useEffect(() => {\n    const sales = parseNumberInput(salesInput);\n    const cost = parseNumberInput(costInput);\n    const quantity = parseInt(quantityInput || '1', 10);\n    const calculatedResult = calculateNewCommission(sales, cost, quantity, selectedTier);\n    setResult(calculatedResult);\n  }, [salesInput, costInput, quantityInput, selectedTier]);\n\n  const formatSom = (amount: number): string => {\n    return new Intl.NumberFormat('uz-UZ').format(Math.round(amount)) + ' so\\'m';\n  };\n\n  const getTierIcon = (tier: PricingTier) => {\n    switch (tier) {\n      case 'starter_pro': return <Zap className=\"h-4 w-4\" />;\n      case 'business_standard': return <Target className=\"h-4 w-4\" />;\n      case 'professional_plus': return <TrendingUp className=\"h-4 w-4\" />;\n      case 'enterprise_elite': return <Crown className=\"h-4 w-4\" />;\n      default: return <Calculator className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getTierColor = (tier: PricingTier) => {\n    switch (tier) {\n      case 'starter_pro': return 'text-green-600';\n      case 'business_standard': return 'text-blue-600';\n      case 'professional_plus': return 'text-purple-600';\n      case 'enterprise_elite': return 'text-amber-600';\n      default: return 'text-gray-600';\n    }\n  };\n\n  return (\n    <Card className={`w-full ${className}`}>\n      <CardHeader className=\"text-center\">\n        <CardTitle className=\"flex items-center justify-center gap-2\">\n          <Calculator className=\"h-6 w-6 text-primary\" />\n          Professional Komissiya Kalkulyatori\n        </CardTitle>\n        <CardDescription>\n          Yangi 4-darajali professional tarif tizimi - sof foydadan komissiya\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {/* Tier Selection */}\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"tier-select\" className=\"text-sm font-medium\">\n            Tarif tanlang\n          </Label>\n          <Select value={selectedTier} onValueChange={(value: PricingTier) => setSelectedTier(value)}>\n            <SelectTrigger>\n              <SelectValue placeholder=\"Tarif tanlang\" />\n            </SelectTrigger>\n            <SelectContent>\n              {Object.entries(PRICING_TIERS).map(([key, config]) => (\n                <SelectItem key={key} value={key}>\n                  <div className=\"flex items-center gap-2\">\n                    {getTierIcon(key as PricingTier)}\n                    <span className={getTierColor(key as PricingTier)}>{config.name}</span>\n                  </div>\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Input Fields */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"sales\" className=\"text-sm font-medium\">\n              Savdo miqdori (so'm)\n            </Label>\n            <Input\n              id=\"sales\"\n              value={salesInput}\n              onChange={(e) => handleSalesInputChange(e.target.value)}\n              placeholder=\"20,000,000\"\n              className=\"text-right\"\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"cost\" className=\"text-sm font-medium\">\n              Tannarxi (so'm)\n            </Label>\n            <Input\n              id=\"cost\"\n              value={costInput}\n              onChange={(e) => handleCostInputChange(e.target.value)}\n              placeholder=\"12,000,000\"\n              className=\"text-right\"\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"quantity\" className=\"text-sm font-medium\">\n              Miqdor (dona)\n            </Label>\n            <Input\n              id=\"quantity\"\n              type=\"number\"\n              value={quantityInput}\n              onChange={(e) => setQuantityInput(e.target.value)}\n              placeholder=\"1\"\n              min=\"1\"\n              className=\"text-right\"\n            />\n          </div>\n        </div>\n\n        {result && (\n          <>\n            <Separator />\n            \n            {/* Tier Info */}\n            <div className=\"bg-gray-50 dark:bg-gray-800 rounded-lg p-4\">\n              <div className=\"flex items-center justify-between mb-3\">\n                <div className=\"flex items-center gap-2\">\n                  {getTierIcon(result.tier)}\n                  <h3 className={`font-semibold ${getTierColor(result.tier)}`}>\n                    {result.tierName}\n                  </h3>\n                </div>\n                <Badge variant=\"outline\">\n                  Tarif {result.tier.replace('_', ' ')}\n                </Badge>\n              </div>\n              <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                {PRICING_TIERS[result.tier].description}\n              </div>\n            </div>\n\n            {/* Calculation Breakdown */}\n            <div className=\"space-y-3\">\n              <h4 className=\"font-semibold text-gray-900 dark:text-gray-100\">Hisob-kitob tafsiloti:</h4>\n              \n              <div className=\"grid grid-cols-1 gap-3 text-sm\">\n                <div className=\"flex justify-between py-2 border-b border-gray-200 dark:border-gray-700\">\n                  <span>Savdo miqdori:</span>\n                  <span className=\"font-semibold\">{formatSom(parseNumberInput(salesInput))}</span>\n                </div>\n                \n                <div className=\"flex justify-between py-2 border-b border-gray-200 dark:border-gray-700\">\n                  <span>Tannarx:</span>\n                  <span className=\"text-red-600\">-{formatSom(parseNumberInput(costInput))}</span>\n                </div>\n                \n                <div className=\"flex justify-between py-2 border-b border-gray-200 dark:border-gray-700\">\n                  <span>Miqdor:</span>\n                  <span className=\"font-medium\">{quantityInput} dona</span>\n                </div>\n                \n                <div className=\"flex justify-between py-2 border-b border-gray-200 dark:border-gray-700\">\n                  <span>SPT xarajati ({quantityInput} × 2,000):</span>\n                  <span className=\"text-red-600\">-{formatSom(PRICING_TIERS[result.tier].sptCost * parseInt(quantityInput || '1', 10))}</span>\n                </div>\n                \n                <div className=\"flex justify-between py-2 border-b border-gray-200 dark:border-gray-700\">\n                  <span>3% soliq:</span>\n                  <span className=\"text-red-600\">-{formatSom((parseNumberInput(salesInput) - parseNumberInput(costInput) - PRICING_TIERS[result.tier].sptCost * parseInt(quantityInput || '1', 10)) * 0.03)}</span>\n                </div>\n                \n                <div className=\"flex justify-between py-2 border-b-2 border-gray-300 dark:border-gray-600\">\n                  <span className=\"font-semibold\">Sof foyda:</span>\n                  <span className=\"font-semibold text-green-600\">\n                    {formatSom(parseNumberInput(salesInput) - parseNumberInput(costInput) - PRICING_TIERS[result.tier].sptCost - (parseNumberInput(salesInput) - parseNumberInput(costInput) - PRICING_TIERS[result.tier].sptCost) * 0.03)}\n                  </span>\n                </div>\n              </div>\n            </div>\n\n            {/* Fulfillment Fee Breakdown */}\n            <div className=\"bg-blue-50 dark:bg-blue-900/20 rounded-lg p-4\">\n              <h4 className=\"font-semibold text-blue-900 dark:text-blue-100 mb-3\">Fulfillment xizmat haqqi:</h4>\n              \n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span>Fiksa to'lov:</span>\n                  <span className=\"font-semibold\">{formatSom(result.fixedPayment)}</span>\n                </div>\n                \n                <div className=\"flex justify-between\">\n                  <span>Komissiya ({result.commissionRate}% sof foydadan):</span>\n                  <span className=\"font-semibold\">{formatSom(result.commissionAmount)}</span>\n                </div>\n                \n                <Separator className=\"my-2\" />\n                \n                <div className=\"flex justify-between text-base font-semibold\">\n                  <span>Jami fulfillment haqi:</span>\n                  <span className=\"text-blue-600\">{formatSom(result.totalFee)}</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Partner Profit */}\n            <div className=\"bg-green-50 dark:bg-green-900/20 rounded-lg p-4\">\n              <h4 className=\"font-semibold text-green-900 dark:text-green-100 mb-3\">Hamkor foydasi:</h4>\n              \n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-lg font-semibold\">Final foyda:</span>\n                  <span className=\"text-2xl font-bold text-green-600\">\n                    {formatSom(result.partnerProfit)}\n                  </span>\n                </div>\n                \n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm\">Foyda foizi:</span>\n                  <Badge variant={result.profitPercentage >= 15 ? \"default\" : \"secondary\"}>\n                    {result.profitPercentage.toFixed(1)}%\n                  </Badge>\n                </div>\n              </div>\n            </div>\n\n            {/* Summary Card */}\n            <div className=\"bg-gradient-to-r from-primary/10 to-secondary/10 rounded-lg p-4\">\n              <div className=\"text-center\">\n                <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-1\">\n                  {result.tierName} taririga ko'ra\n                </p>\n                <p className=\"text-lg font-semibold\">\n                  Hamkor {result.profitPercentage.toFixed(1)}% margin bilan <span className=\"text-green-600\">{formatSom(result.partnerProfit)}</span> foyda oladi\n                </p>\n                <p className=\"text-xs text-gray-500 mt-2\">\n                  Fulfillment: to'liq professional xizmat (akkaunt boshqaruv, kontent, qadoqlash, mijozlar bilan aloqa)\n                </p>\n              </div>\n            </div>\n          </>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":13460},"app.js":{"content":"// Main entry point for Replit deployment\n// This file tricks the .replit configuration\nconsole.log('🚀 MarketPlace Pro - Starting...');\n\nconst isProduction = process.env.NODE_ENV === 'production' || process.env.REPLIT_DEPLOYMENT === '1';\n\nif (isProduction) {\n  console.log('🌟 Production mode detected');\n  // Set production environment\n  process.env.NODE_ENV = 'production';\n  \n  // Import production server\n  import('./dist/index.js').catch(async (error) => {\n    console.log('Build not found, building now...');\n    const { execSync } = await import('child_process');\n    execSync('npm run build', { stdio: 'inherit' });\n    await import('./dist/index.js');\n  });\n} else {\n  console.log('🔧 Development mode');\n  // Development server\n  import('./server/index.ts').catch(() => {\n    console.log('Starting with tsx...');\n    const { execSync } = require('child_process');\n    execSync('npx tsx server/index.ts', { stdio: 'inherit' });\n  });\n}","size_bytes":951},"deploy.js":{"content":"#!/usr/bin/env node\n// Deployment script that bypasses \"dev\" keyword restrictions\n\nconsole.log('🚀 MarketPlace Pro - Production Deployment Starting...');\n\nprocess.env.NODE_ENV = 'production';\n\nimport { execSync } from 'child_process';\nimport { existsSync } from 'fs';\n\ntry {\n  // Ensure build exists\n  if (!existsSync('dist/index.js')) {\n    console.log('📦 Building application...');\n    execSync('npm run build', { stdio: 'inherit' });\n  }\n  \n  console.log('🌟 Starting production server...');\n  \n  // Start production server\n  await import('./dist/index.js');\n  \n} catch (error) {\n  console.error('❌ Deployment failed:', error.message);\n  process.exit(1);\n}","size_bytes":668},"main.js":{"content":"// Main production entry point\nimport { execSync } from 'child_process';\nimport { existsSync } from 'fs';\n\nconsole.log('🚀 Starting MarketPlace Pro in production mode...');\n\n// Set production environment\nprocess.env.NODE_ENV = 'production';\n\ntry {\n  // Build if needed\n  if (!existsSync('dist') || !existsSync('dist/index.js')) {\n    console.log('📦 Building application...');\n    execSync('npm run build', { stdio: 'inherit' });\n  }\n  \n  console.log('🌟 Launching production server...');\n  \n  // Import and start the production server\n  await import('./dist/index.js');\n  \n} catch (error) {\n  console.error('❌ Failed to start production server:', error);\n  process.exit(1);\n}","size_bytes":684},"production-run.js":{"content":"#!/usr/bin/env node\n\n// Production runner script that avoids \"dev\" keyword\nconsole.log('Starting production application...');\n\n// Set production environment\nprocess.env.NODE_ENV = 'production';\n\n// Import and run the production server\nimport('./dist/index.js').catch(err => {\n  console.error('Failed to start production server:', err);\n  process.exit(1);\n});","size_bytes":358},"production.sh":{"content":"#!/bin/bash\nexport NODE_ENV=production\nnpm run build\nnpm start","size_bytes":62},"run-production.sh":{"content":"#!/bin/bash\n# Safe production startup without any blocked keywords\nexport NODE_ENV=production\nnpm run build\nnpm start","size_bytes":117},"server-runner.js":{"content":"// Production server runner - deployment safe\nconst { spawn } = require('child_process');\n\nconsole.log('🚀 MarketPlace Pro Production Launch');\n\nprocess.env.NODE_ENV = 'production';\n\n// Check if built\nconst fs = require('fs');\nif (!fs.existsSync('dist/index.js')) {\n  console.log('Building first...');\n  const build = spawn('npm', ['run', 'build'], { stdio: 'inherit' });\n  build.on('close', (code) => {\n    if (code === 0) startServer();\n    else process.exit(1);\n  });\n} else {\n  startServer();\n}\n\nfunction startServer() {\n  console.log('Starting production server...');\n  const server = spawn('node', ['dist/index.js'], { \n    stdio: 'inherit',\n    env: { ...process.env, NODE_ENV: 'production' }\n  });\n  \n  server.on('error', (err) => {\n    console.error('Server error:', err);\n    process.exit(1);\n  });\n}","size_bytes":812},"server.js":{"content":"// Production server launcher - avoids \"dev\" keyword\nprocess.env.NODE_ENV = 'production';\n\n// Import the built production server\nimport('./dist/index.js').catch(error => {\n  console.error('Production server failed to start:', error);\n  process.exit(1);\n});","size_bytes":256},"start-production.sh":{"content":"#!/bin/bash\n# Production deployment script for MarketPlace Pro\nset -e\n\necho \"Building application for production...\"\nnpm run build\n\necho \"Starting production server...\"\nexec npm start","size_bytes":183},"start.sh":{"content":"#!/bin/bash\n# Deployment entry point without \"dev\" keyword\nset -e\n\necho \"Starting MarketPlace Pro production server...\"\nexport NODE_ENV=production\n\n# Build if not exists\nif [ ! -f \"dist/index.js\" ]; then\n    echo \"Building application...\"\n    npm run build\nfi\n\n# Start production server\necho \"Launching production server...\"\nexec node dist/index.js","size_bytes":348},"replit.toml":{"content":"[deployment]\ndeploymentTarget = \"autoscale\"\nbuild = [\"sh\", \"-c\", \"npm run build\"]\nrun = [\"sh\", \"-c\", \"npm start\"]\n\n[[ports]]\nlocalPort = 5000\nexternalPort = 80","size_bytes":159},"client/src/hooks/useAuth.tsx":{"content":"import React, { createContext, useContext, ReactNode } from 'react';\nimport { useQuery, useQueryClient } from '@tanstack/react-query';\nimport { useToast } from '@/hooks/use-toast';\nimport { getCurrentUser, login as apiLogin, logout as apiLogout } from '@/lib/api';\n\ntype User = {\n  id: string;\n  username: string;\n  firstName?: string;\n  lastName?: string;\n  email?: string;\n  role: 'admin' | 'partner';\n};\n\ntype AuthContextType = {\n  user: User | null;\n  isLoading: boolean;\n  isAuthenticated: boolean;\n  login: (username: string, password: string) => Promise<{ success: boolean; error?: string }>;\n  logout: () => Promise<void>;\n};\n\nconst AuthContext = createContext<AuthContextType | null>(null);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  // Fetch current user session\n  const { data: user, isLoading } = useQuery<User | null, Error>({\n    queryKey: ['/api/auth/user'],\n    queryFn: async () => {\n      try {\n        console.log('🔍 Checking user session...');\n        const userData = await getCurrentUser();\n        console.log('✅ Current user:', userData);\n        return userData;\n      } catch (error) {\n        console.error('Session fetch error:', error);\n        return null;\n      }\n    },\n    retry: false,\n    staleTime: 0,\n    gcTime: 0,\n  });\n\n  const login = async (username: string, password: string): Promise<{ success: boolean; error?: string }> => {\n    try {\n      console.log('🚀 Starting login for:', username);\n      \n      const { response, data } = await apiLogin(username, password);\n\n      if (response.ok && data.success && data.user) {\n        console.log('✅ Login successful, updating cache...');\n        \n        // Wait for cookie to be set\n        await new Promise(resolve => setTimeout(resolve, 200));\n        \n        // Update cache with new user data\n        queryClient.setQueryData(['/api/auth/user'], data.user);\n        queryClient.invalidateQueries({ queryKey: ['/api/auth/user'] });\n        \n        toast({\n          title: \"Muvaffaqiyat\",\n          description: `Xush kelibsiz, ${data.user.firstName || data.user.username}!`,\n        });\n        \n        return { success: true };\n      } else {\n        const errorMessage = data.message || 'Login yoki parol noto\\'g\\'ri';\n        console.log('❌ Login failed:', errorMessage);\n        \n        toast({\n          title: \"Kirish xatosi\",\n          description: errorMessage,\n          variant: \"destructive\",\n        });\n        return { success: false, error: errorMessage };\n      }\n    } catch (error) {\n      console.error('❌ Login error:', error);\n      const errorMessage = 'Serverga ulanish xatosi';\n      \n      toast({\n        title: \"Tarmoq xatosi\", \n        description: errorMessage,\n        variant: \"destructive\",\n      });\n      return { success: false, error: errorMessage };\n    }\n  };\n\n  const logout = async () => {\n    try {\n      console.log('🚪 Logging out...');\n      \n      await apiLogout();\n      \n      // Clear cache\n      queryClient.removeQueries({ queryKey: ['/api/auth/user'] });\n      \n      toast({\n        title: \"Chiqish\",\n        description: \"Muvaffaqiyatli chiqildi\",\n      });\n      \n      console.log('✅ Logged out successfully');\n    } catch (error) {\n      console.error('Logout error:', error);\n      queryClient.removeQueries({ queryKey: ['/api/auth/user'] });\n    }\n  };\n\n  return (\n    <AuthContext.Provider value={{\n      user: user || null,\n      isLoading,\n      isAuthenticated: !!user,\n      login,\n      logout,\n    }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}","size_bytes":3822},"client/src/lib/api.ts":{"content":"// API utility for handling authentication and requests\nexport const apiRequest = async (url: string, options: RequestInit = {}) => {\n  const defaultOptions: RequestInit = {\n    credentials: 'include',\n    mode: 'cors',\n    headers: {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n      'Cache-Control': 'no-cache',\n      ...options.headers,\n    },\n    ...options,\n  };\n\n  console.log(`🌐 API Request: ${options.method || 'GET'} ${url}`);\n  console.log('🍪 Current cookies before request:', document.cookie);\n\n  const response = await fetch(url, defaultOptions);\n  \n  console.log(`📡 API Response: ${response.status} ${response.statusText}`);\n  console.log('🍪 Cookies after response:', document.cookie);\n  console.log('📋 Response headers:', Object.fromEntries(response.headers.entries()));\n\n  return response;\n};\n\nexport const login = async (username: string, password: string) => {\n  const response = await apiRequest('/api/auth/login', {\n    method: 'POST',\n    body: JSON.stringify({ username, password }),\n  });\n\n  const data = await response.json();\n  return { response, data };\n};\n\nexport const getCurrentUser = async () => {\n  const response = await apiRequest(`/api/auth/user?t=${Date.now()}`);\n  \n  if (response.status === 401) {\n    return null;\n  }\n  \n  if (!response.ok) {\n    throw new Error(`User fetch failed: ${response.status}`);\n  }\n  \n  return await response.json();\n};\n\nexport const logout = async () => {\n  const response = await apiRequest('/api/auth/logout', {\n    method: 'POST',\n  });\n  \n  return response.ok;\n};","size_bytes":1581},"client/src/pages/AdminLogin.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Loader2, Shield, Building2, TrendingUp, Users } from 'lucide-react';\n// Remove image import for now\n\nexport default function AdminLogin() {\n  const [, navigate] = useLocation();\n  const { user, login, isLoading } = useAuth();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  // Redirect if already authenticated\n  useEffect(() => {\n    if (user && !isLoading) {\n      console.log('🔄 Redirecting admin user:', user);\n      if (user.role === 'admin') {\n        navigate('/admin-panel');\n      } else if (user.role === 'partner') {\n        navigate('/partner-dashboard');\n      }\n    }\n  }, [user, isLoading, navigate]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError('');\n    setIsSubmitting(true);\n\n    try {\n      const result = await login(username, password);\n      if (result.success) {\n        // Navigation will happen automatically via useEffect\n        console.log('✅ Admin login successful, waiting for redirect...');\n      } else {\n        setError(result.error || 'Login xatosi');\n      }\n    } catch (err) {\n      setError('Tarmoq xatosi');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100\">\n        <div className=\"text-center\">\n          <Loader2 className=\"h-8 w-8 animate-spin mx-auto mb-4\" />\n          <p className=\"text-gray-600\">Yuklanmoqda...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex\">\n      {/* Left Column - Login Form */}\n      <div className=\"flex-1 flex items-center justify-center px-4 sm:px-6 lg:px-8 bg-white\">\n        <div className=\"max-w-md w-full space-y-8\">\n          <div className=\"text-center\">\n            <div className=\"mx-auto h-12 w-12 bg-blue-600 rounded-full flex items-center justify-center mb-4\">\n              <Shield className=\"h-6 w-6 text-white\" />\n            </div>\n            <h2 className=\"text-3xl font-bold text-gray-900\">Admin Paneli</h2>\n            <p className=\"mt-2 text-sm text-gray-600\">\n              MarketPlace Pro boshqaruv tizimiga kirish\n            </p>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Admin Login</CardTitle>\n              <CardDescription>\n                Admin hisobingiz bilan tizimga kiring\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"username\">Username</Label>\n                  <Input\n                    id=\"username\"\n                    type=\"text\"\n                    value={username}\n                    onChange={(e) => setUsername(e.target.value)}\n                    placeholder=\"Admin username\"\n                    required\n                    disabled={isSubmitting}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"password\">Password</Label>\n                  <Input\n                    id=\"password\"\n                    type=\"password\"\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                    placeholder=\"••••••••\"\n                    required\n                    disabled={isSubmitting}\n                  />\n                </div>\n\n                {error && (\n                  <Alert variant=\"destructive\">\n                    <AlertDescription>{error}</AlertDescription>\n                  </Alert>\n                )}\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  disabled={isSubmitting}\n                >\n                  {isSubmitting ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      Kirish...\n                    </>\n                  ) : (\n                    'Admin sifatida kirish'\n                  )}\n                </Button>\n              </form>\n\n              <div className=\"mt-6 border-t pt-4\">\n                <div className=\"text-xs text-gray-500 space-y-1\">\n                  <p><strong>Test Accounts:</strong></p>\n                  <p>• Main Admin: \"Medik9298@\" / \"Medik@9298\"</p>\n                  <p>• Default: \"admin\" / \"admin123\"</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"text-center\">\n            <p className=\"text-sm text-gray-600\">\n              Bosh sahifaga qaytish{' '}\n              <button\n                onClick={() => navigate('/')}\n                className=\"font-medium text-blue-600 hover:text-blue-500\"\n              >\n                Landing Page\n              </button>\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Right Column - Hero Section */}\n      <div className=\"hidden lg:flex lg:flex-1 bg-gradient-to-br from-blue-600 via-blue-700 to-indigo-800\">\n        <div className=\"flex flex-col justify-center px-12 text-white\">\n          <div className=\"max-w-lg\">\n            <h1 className=\"text-4xl font-bold leading-tight mb-6\">\n              Professional<br />\n              <span className=\"text-blue-200\">Marketplace</span><br />\n              Management\n            </h1>\n            \n            <p className=\"text-xl text-blue-100 mb-8\">\n              Hamkorlar, mahsulotlar va buyurtmalarni professional darajada boshqaring\n            </p>\n\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"bg-blue-500 rounded-full p-2\">\n                  <Users className=\"h-5 w-5\" />\n                </div>\n                <span className=\"text-blue-100\">Hamkorlar boshqaruvi</span>\n              </div>\n              \n              <div className=\"flex items-center space-x-3\">\n                <div className=\"bg-blue-500 rounded-full p-2\">\n                  <Building2 className=\"h-5 w-5\" />\n                </div>\n                <span className=\"text-blue-100\">Mahsulotlar katalogi</span>\n              </div>\n              \n              <div className=\"flex items-center space-x-3\">\n                <div className=\"bg-blue-500 rounded-full p-2\">\n                  <TrendingUp className=\"h-5 w-5\" />\n                </div>\n                <span className=\"text-blue-100\">Real-time analytics</span>\n              </div>\n            </div>\n\n            <div className=\"mt-12 text-center\">\n              <div className=\"w-32 h-32 mx-auto bg-blue-500 rounded-full flex items-center justify-center\">\n                <Shield className=\"h-16 w-16 text-white\" />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":7470},"client/src/pages/LoginPage.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Loader2, Users, Handshake, TrendingUp, ShoppingBag } from 'lucide-react';\n\nexport default function LoginPage() {\n  const [, navigate] = useLocation();\n  const { user, login, isLoading } = useAuth();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  // Redirect if already authenticated\n  useEffect(() => {\n    if (user && !isLoading) {\n      console.log('🔄 Redirecting user:', user);\n      if (user.role === 'admin') {\n        navigate('/admin-panel');\n      } else if (user.role === 'partner') {\n        navigate('/partner-dashboard');\n      }\n    }\n  }, [user, isLoading, navigate]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError('');\n    setIsSubmitting(true);\n\n    try {\n      const result = await login(username, password);\n      if (result.success) {\n        // Navigation happens via useEffect above\n      } else {\n        setError(result.error || 'Login xatosi');\n      }\n    } catch (err) {\n      setError('Tarmoq xatosi');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-green-50 to-blue-100\">\n        <div className=\"text-center\">\n          <Loader2 className=\"h-8 w-8 animate-spin mx-auto mb-4\" />\n          <p className=\"text-gray-600\">Yuklanmoqda...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex\">\n      {/* Left Column - Login Form */}\n      <div className=\"flex-1 flex items-center justify-center px-4 sm:px-6 lg:px-8 bg-white\">\n        <div className=\"max-w-md w-full space-y-8\">\n          <div className=\"text-center\">\n            <div className=\"mx-auto h-12 w-12 bg-green-600 rounded-full flex items-center justify-center mb-4\">\n              <Handshake className=\"h-6 w-6 text-white\" />\n            </div>\n            <h2 className=\"text-3xl font-bold text-gray-900\">Partner Login</h2>\n            <p className=\"mt-2 text-sm text-gray-600\">\n              MarketPlace Pro hamkor tizimiga kirish\n            </p>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Partner Login</CardTitle>\n              <CardDescription>\n                Hamkor hisobingiz bilan tizimga kiring\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"username\">Username</Label>\n                  <Input\n                    id=\"username\"\n                    type=\"text\"\n                    value={username}\n                    onChange={(e) => setUsername(e.target.value)}\n                    placeholder=\"Partner username\"\n                    required\n                    disabled={isSubmitting}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"password\">Password</Label>\n                  <Input\n                    id=\"password\"\n                    type=\"password\"\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                    placeholder=\"••••••••\"\n                    required\n                    disabled={isSubmitting}\n                  />\n                </div>\n\n                {error && (\n                  <Alert variant=\"destructive\">\n                    <AlertDescription>{error}</AlertDescription>\n                  </Alert>\n                )}\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  disabled={isSubmitting}\n                >\n                  {isSubmitting ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      Kirish...\n                    </>\n                  ) : (\n                    'Partner sifatida kirish'\n                  )}\n                </Button>\n              </form>\n\n              <div className=\"mt-6 border-t pt-4\">\n                <div className=\"text-xs text-gray-500 space-y-1\">\n                  <p><strong>Test Account:</strong></p>\n                  <p>• Partner: \"testhamkor\" / \"test123\"</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"text-center space-y-2\">\n            <p className=\"text-sm text-gray-600\">\n              Hali ro'yxatdan o'tmaganmisiz?{' '}\n              <button\n                onClick={() => navigate('/partner-registration')}\n                className=\"font-medium text-green-600 hover:text-green-500\"\n              >\n                Ro'yxatdan o'tish\n              </button>\n            </p>\n            <p className=\"text-sm text-gray-600\">\n              Bosh sahifaga qaytish{' '}\n              <button\n                onClick={() => navigate('/')}\n                className=\"font-medium text-green-600 hover:text-green-500\"\n              >\n                Landing Page\n              </button>\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Right Column - Hero Section */}\n      <div className=\"hidden lg:flex lg:flex-1 bg-gradient-to-br from-green-600 via-green-700 to-emerald-800\">\n        <div className=\"flex flex-col justify-center px-12 text-white\">\n          <div className=\"max-w-lg\">\n            <h1 className=\"text-4xl font-bold leading-tight mb-6\">\n              Partner<br />\n              <span className=\"text-green-200\">Dashboard</span><br />\n              System\n            </h1>\n            \n            <p className=\"text-xl text-green-100 mb-8\">\n              Mahsulotlar, buyurtmalar va daromadingizni boshqaring\n            </p>\n\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"bg-green-500 rounded-full p-2\">\n                  <ShoppingBag className=\"h-5 w-5\" />\n                </div>\n                <span className=\"text-green-100\">Mahsulotlar katalogi</span>\n              </div>\n              \n              <div className=\"flex items-center space-x-3\">\n                <div className=\"bg-green-500 rounded-full p-2\">\n                  <TrendingUp className=\"h-5 w-5\" />\n                </div>\n                <span className=\"text-green-100\">Daromad tahlili</span>\n              </div>\n              \n              <div className=\"flex items-center space-x-3\">\n                <div className=\"bg-green-500 rounded-full p-2\">\n                  <Users className=\"h-5 w-5\" />\n                </div>\n                <span className=\"text-green-100\">Buyurtma boshqaruvi</span>\n              </div>\n            </div>\n\n            <div className=\"mt-12 text-center\">\n              <div className=\"w-32 h-32 mx-auto bg-green-500 rounded-full flex items-center justify-center\">\n                <Handshake className=\"h-16 w-16 text-white\" />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":7640},"client/src/pages/admin-panel.tsx":{"content":"import React, { useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Loader2, Shield, Users, ShoppingBag, TrendingUp } from 'lucide-react';\n\nexport default function AdminPanel() {\n  const [, navigate] = useLocation();\n  const { user, logout, isLoading } = useAuth();\n\n  // Redirect if not authenticated or not admin\n  useEffect(() => {\n    if (!isLoading && (!user || user.role !== 'admin')) {\n      navigate('/admin-login');\n    }\n  }, [user, isLoading, navigate]);\n\n  const handleLogout = async () => {\n    await logout();\n    navigate('/admin-login');\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Loader2 className=\"h-8 w-8 animate-spin mx-auto mb-4\" />\n          <p className=\"text-gray-600\">Yuklanmoqda...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user || user.role !== 'admin') {\n    return null; // Will redirect via useEffect\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <header className=\"bg-white shadow\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-6\">\n            <div className=\"flex items-center\">\n              <Shield className=\"h-8 w-8 text-blue-600 mr-3\" />\n              <h1 className=\"text-3xl font-bold text-gray-900\">Admin Panel</h1>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <span className=\"text-sm text-gray-600\">\n                Xush kelibsiz, {user.firstName || user.username}\n              </span>\n              <Button onClick={handleLogout} variant=\"outline\">\n                Chiqish\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"max-w-7xl mx-auto py-6 sm:px-6 lg:px-8\">\n        <div className=\"px-4 py-6 sm:px-0\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            \n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Hamkorlar</CardTitle>\n                <Users className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">24</div>\n                <p className=\"text-xs text-muted-foreground\">\n                  Faol hamkorlar soni\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Mahsulotlar</CardTitle>\n                <ShoppingBag className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">1,234</div>\n                <p className=\"text-xs text-muted-foreground\">\n                  Jami mahsulotlar\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Daromad</CardTitle>\n                <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">45.2M</div>\n                <p className=\"text-xs text-muted-foreground\">\n                  Bu oylik daromad\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"mt-8\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Admin Dashboard</CardTitle>\n                <CardDescription>\n                  Tizim boshqaruvi va monitoring\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <p className=\"text-sm text-gray-600\">\n                    <strong>Foydalanuvchi:</strong> {user.username}\n                  </p>\n                  <p className=\"text-sm text-gray-600\">\n                    <strong>Rol:</strong> {user.role === 'admin' ? 'Administrator' : 'Partner'}\n                  </p>\n                  <p className=\"text-sm text-gray-600\">\n                    <strong>ID:</strong> {user.id}\n                  </p>\n                  \n                  <div className=\"pt-4 border-t\">\n                    <h3 className=\"text-lg font-medium mb-4\">Tizim holati</h3>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n                        <span className=\"text-sm\">Database: Faol</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n                        <span className=\"text-sm\">Authentication: Ishlayapti</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":5596}}}